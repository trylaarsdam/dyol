
c:/Users/Nerdom/Desktop/capstone/target/capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001a68c  2**0
                  CONTENTS
  3 .data         000000d0  2003dbb4  000da590  0000dbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000b6c  2003dc84  2003dc84  0001dc84  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000da660  000da660  0001a660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000da688  000da688  0001a688  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   001a5ad7  00000000  00000000  0001a68c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00022864  00000000  00000000  001c0163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00026441  00000000  00000000  001e29c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003240  00000000  00000000  00208e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000057d0  00000000  00000000  0020c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000555c3  00000000  00000000  00211818  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00061668  00000000  00000000  00266ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00113b25  00000000  00000000  002c8443  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000efa0  00000000  00000000  003dbf68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	d4 9a 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 f916 	bl	d925e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 f936 	bl	d92aa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dbb4 	.word	0x2003dbb4
   d4048:	000da590 	.word	0x000da590
   d404c:	2003dc84 	.word	0x2003dc84
   d4050:	2003dc84 	.word	0x2003dc84
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fbc7 	bl	d77ec <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da590 	.word	0x000da590
   d4080:	000da4f0 	.word	0x000da4f0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbc0 	b.w	d4808 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fbad 	bl	d47e8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bb79 	b.w	d7788 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bf27 	b.w	d5ee8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bf2d 	b.w	d5ef8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bf2b 	b.w	d5ef8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z11dialCounterv>:
  }
}

// page is global

void dialCounter(){
   d40b2:	4770      	bx	lr

000d40b4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b4:	6803      	ldr	r3, [r0, #0]
   d40b6:	4718      	bx	r3

000d40b8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40b8:	2a01      	cmp	r2, #1
   d40ba:	d002      	beq.n	d40c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40bc:	2a02      	cmp	r2, #2
   d40be:	d002      	beq.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c0:	e004      	b.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c2:	6001      	str	r1, [r0, #0]
	      break;
   d40c4:	e002      	b.n	d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c6:	680b      	ldr	r3, [r1, #0]
   d40c8:	b100      	cbz	r0, d40cc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ca:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40cc:	2000      	movs	r0, #0
   d40ce:	4770      	bx	lr

000d40d0 <_Z11encoderDialv>:
        WiFi.connect(); //*should* connect to wifi based on current credentials
    }
}

char data5 [64];
void encoderDial() {//thread for encoder interpretations
   d40d0:	b508      	push	{r3, lr}
  while(1){  
    if (digitalRead(A3) == LOW && previousA3 == HIGH){
      counter++; //increase counter for turn right
   d40d2:	4c17      	ldr	r4, [pc, #92]	; (d4130 <_Z11encoderDialv+0x60>)
   d40d4:	4626      	mov	r6, r4
}

char data5 [64];
void encoderDial() {//thread for encoder interpretations
  while(1){  
    if (digitalRead(A3) == LOW && previousA3 == HIGH){
   d40d6:	2010      	movs	r0, #16
   d40d8:	f004 f9bb 	bl	d8452 <digitalRead>
   d40dc:	4d15      	ldr	r5, [pc, #84]	; (d4134 <_Z11encoderDialv+0x64>)
   d40de:	b990      	cbnz	r0, d4106 <_Z11encoderDialv+0x36>
   d40e0:	782b      	ldrb	r3, [r5, #0]
   d40e2:	b183      	cbz	r3, d4106 <_Z11encoderDialv+0x36>
      counter++; //increase counter for turn right
   d40e4:	6823      	ldr	r3, [r4, #0]
      if(digitalRead(A4) == LOW && digitalRead(A3) == LOW){
   d40e6:	200f      	movs	r0, #15

char data5 [64];
void encoderDial() {//thread for encoder interpretations
  while(1){  
    if (digitalRead(A3) == LOW && previousA3 == HIGH){
      counter++; //increase counter for turn right
   d40e8:	3301      	adds	r3, #1
   d40ea:	6023      	str	r3, [r4, #0]
      if(digitalRead(A4) == LOW && digitalRead(A3) == LOW){
   d40ec:	f004 f9b1 	bl	d8452 <digitalRead>
   d40f0:	b918      	cbnz	r0, d40fa <_Z11encoderDialv+0x2a>
   d40f2:	2010      	movs	r0, #16
   d40f4:	f004 f9ad 	bl	d8452 <digitalRead>
   d40f8:	b1a8      	cbz	r0, d4126 <_Z11encoderDialv+0x56>
        counter--;//decrease counter for turn left
        counter--; // Cancels out the counter++
      }
      Serial.println(counter); //prints out counter to serial for debugging
   d40fa:	f003 feef 	bl	d7edc <_Z16_fetch_usbserialv>
   d40fe:	220a      	movs	r2, #10
   d4100:	6831      	ldr	r1, [r6, #0]
   d4102:	f003 fa25 	bl	d7550 <_ZN5Print7printlnEii>
    }
    previousA3 = digitalRead(A3); //Sets new "previous" variables
   d4106:	2010      	movs	r0, #16
   d4108:	f004 f9a3 	bl	d8452 <digitalRead>
   d410c:	3000      	adds	r0, #0
   d410e:	bf18      	it	ne
   d4110:	2001      	movne	r0, #1
   d4112:	7028      	strb	r0, [r5, #0]
    previousA4 = digitalRead(A4); 
   d4114:	200f      	movs	r0, #15
   d4116:	f004 f99c 	bl	d8452 <digitalRead>
   d411a:	4b07      	ldr	r3, [pc, #28]	; (d4138 <_Z11encoderDialv+0x68>)
   d411c:	3000      	adds	r0, #0
   d411e:	bf18      	it	ne
   d4120:	2001      	movne	r0, #1
   d4122:	7018      	strb	r0, [r3, #0]
    }
}

char data5 [64];
void encoderDial() {//thread for encoder interpretations
  while(1){  
   d4124:	e7d7      	b.n	d40d6 <_Z11encoderDialv+0x6>
    if (digitalRead(A3) == LOW && previousA3 == HIGH){
      counter++; //increase counter for turn right
      if(digitalRead(A4) == LOW && digitalRead(A3) == LOW){
        counter--;//decrease counter for turn left
        counter--; // Cancels out the counter++
   d4126:	6823      	ldr	r3, [r4, #0]
   d4128:	3b02      	subs	r3, #2
   d412a:	6023      	str	r3, [r4, #0]
   d412c:	e7e5      	b.n	d40fa <_Z11encoderDialv+0x2a>
   d412e:	bf00      	nop
   d4130:	2003dcd0 	.word	0x2003dcd0
   d4134:	2003dbb8 	.word	0x2003dbb8
   d4138:	2003dbc4 	.word	0x2003dbc4

000d413c <_Z11screenWritev>:
  Serial.println(data);
  global_ip = data; //sets ip
  Serial.printlnf("global_ip=%s", global_ip.c_str()); //prints ip
}

void screenWrite() {//thread for writing to the screen
   d413c:	b510      	push	{r4, lr}
   d413e:	b090      	sub	sp, #64	; 0x40
  Serial.println("screenWrite:entered");
   d4140:	f003 fecc 	bl	d7edc <_Z16_fetch_usbserialv>
   d4144:	490e      	ldr	r1, [pc, #56]	; (d4180 <_Z11screenWritev+0x44>)
   d4146:	4c0f      	ldr	r4, [pc, #60]	; (d4184 <_Z11screenWritev+0x48>)
   d4148:	f003 f9a5 	bl	d7496 <_ZN5Print7printlnEPKc>
  while(1) {
    Serial.println("screenWrite:while-loop-entered");
   d414c:	f003 fec6 	bl	d7edc <_Z16_fetch_usbserialv>
   d4150:	490d      	ldr	r1, [pc, #52]	; (d4188 <_Z11screenWritev+0x4c>)
   d4152:	f003 f9a0 	bl	d7496 <_ZN5Print7printlnEPKc>
    char data [64];
    sprintf(data, "t0.txt=\"%s\"\xFF\xFF\xFF", tempReceived.c_str());//translates tempReceived into a char* and writes to buffer
   d4156:	6822      	ldr	r2, [r4, #0]
   d4158:	490c      	ldr	r1, [pc, #48]	; (d418c <_Z11screenWritev+0x50>)
   d415a:	4668      	mov	r0, sp
   d415c:	f001 fedc 	bl	d5f18 <sprintf>
    Serial.println(data); //writes buffer to usb serial
   d4160:	f003 febc 	bl	d7edc <_Z16_fetch_usbserialv>
   d4164:	4669      	mov	r1, sp
   d4166:	f003 f996 	bl	d7496 <_ZN5Print7printlnEPKc>
    Serial1.printf(data);//writes buffer to nextion 
   d416a:	f003 ff3f 	bl	d7fec <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d416e:	466a      	mov	r2, sp
   d4170:	2100      	movs	r1, #0
   d4172:	f003 f9f7 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
    //Serial1.printf("t0.txt=\"Waiting for temp\"\xFF\xFF\xFF");
    //Serial.printlnf("t0.txt=\"Waiting for temp\"\xFF\xFF\xFF");
    delay(10000);
   d4176:	f242 7010 	movw	r0, #10000	; 0x2710
   d417a:	f003 fabf 	bl	d76fc <delay>
   d417e:	e7e5      	b.n	d414c <_Z11screenWritev+0x10>
   d4180:	000d9af8 	.word	0x000d9af8
   d4184:	2003e32c 	.word	0x2003e32c
   d4188:	000d9b0c 	.word	0x000d9b0c
   d418c:	000d9b2b 	.word	0x000d9b2b

000d4190 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4190:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d4192:	2301      	movs	r3, #1
   d4194:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4196:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4198:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d419a:	b10b      	cbz	r3, d41a0 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d419c:	68c0      	ldr	r0, [r0, #12]
   d419e:	e006      	b.n	d41ae <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d41a0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d41a2:	b128      	cbz	r0, d41b0 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d41a4:	6883      	ldr	r3, [r0, #8]
   d41a6:	b90b      	cbnz	r3, d41ac <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d41a8:	f004 f9df 	bl	d856a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41ac:	68c3      	ldr	r3, [r0, #12]
   d41ae:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d41b0:	2301      	movs	r3, #1
   d41b2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d41b4:	2000      	movs	r0, #0
    }
   d41b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d41ba:	f001 bce1 	b.w	d5b80 <os_thread_exit>
	...

000d41c0 <_Z12internalTempv>:
}

void locationCallback(float lat, float lon, float accuracy) {
}

void internalTemp(){//thread for internal temp read, conversion, and writing to display
   d41c0:	b530      	push	{r4, r5, lr}
   d41c2:	b093      	sub	sp, #76	; 0x4c
  Serial.println("internalTemp:called");
   d41c4:	f003 fe8a 	bl	d7edc <_Z16_fetch_usbserialv>
   d41c8:	4923      	ldr	r1, [pc, #140]	; (d4258 <_Z12internalTempv+0x98>)
  while(1){
    Serial.println("internalTemp:while-entered");
    char dataInternal [64]; //data buffer for internal temp
    convertedTemp = (analogRead(A2) * (3300.0 / 4095)); //converts analog input
    convertedTemp = ((convertedTemp - 50)/10);//further converts analog input
   d41ca:	4c24      	ldr	r4, [pc, #144]	; (d425c <_Z12internalTempv+0x9c>)

void locationCallback(float lat, float lon, float accuracy) {
}

void internalTemp(){//thread for internal temp read, conversion, and writing to display
  Serial.println("internalTemp:called");
   d41cc:	f003 f963 	bl	d7496 <_ZN5Print7printlnEPKc>
  while(1){
    Serial.println("internalTemp:while-entered");
   d41d0:	f003 fe84 	bl	d7edc <_Z16_fetch_usbserialv>
   d41d4:	4922      	ldr	r1, [pc, #136]	; (d4260 <_Z12internalTempv+0xa0>)
   d41d6:	f003 f95e 	bl	d7496 <_ZN5Print7printlnEPKc>
    char dataInternal [64]; //data buffer for internal temp
    convertedTemp = (analogRead(A2) * (3300.0 / 4095)); //converts analog input
   d41da:	2011      	movs	r0, #17
   d41dc:	f004 f94c 	bl	d8478 <analogRead>
    convertedTemp = ((convertedTemp - 50)/10);//further converts analog input
   d41e0:	f004 fc60 	bl	d8aa4 <__aeabi_i2d>
   d41e4:	a31a      	add	r3, pc, #104	; (adr r3, d4250 <_Z12internalTempv+0x90>)
   d41e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41ea:	f004 fcc1 	bl	d8b70 <__aeabi_dmul>
   d41ee:	f004 fed1 	bl	d8f94 <__aeabi_d2f>
   d41f2:	eddf 7a1c 	vldr	s15, [pc, #112]	; d4264 <_Z12internalTempv+0xa4>
   d41f6:	ee07 0a10 	vmov	s14, r0
   d41fa:	ee77 7a67 	vsub.f32	s15, s14, s15
   d41fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d4202:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4206:	ed84 7a00 	vstr	s14, [r4]
    Serial.printlnf("internalTemp:%f",convertedTemp);
   d420a:	f003 fe67 	bl	d7edc <_Z16_fetch_usbserialv>
   d420e:	4605      	mov	r5, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4210:	6820      	ldr	r0, [r4, #0]
   d4212:	f004 fc59 	bl	d8ac8 <__aeabi_f2d>
   d4216:	4a14      	ldr	r2, [pc, #80]	; (d4268 <_Z12internalTempv+0xa8>)
   d4218:	e9cd 0100 	strd	r0, r1, [sp]
   d421c:	2101      	movs	r1, #1
   d421e:	4628      	mov	r0, r5
   d4220:	f003 f9a0 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
    sprintf(dataInternal, "t1.txt=\"%i\"\xFF\xFF\xFF", (int) convertedTemp); //does some stuff to convert into command
   d4224:	edd4 7a00 	vldr	s15, [r4]
   d4228:	4910      	ldr	r1, [pc, #64]	; (d426c <_Z12internalTempv+0xac>)
   d422a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d422e:	a802      	add	r0, sp, #8
   d4230:	ee17 2a90 	vmov	r2, s15
   d4234:	f001 fe70 	bl	d5f18 <sprintf>
    Serial1.println(dataInternal); //sends to nextion
   d4238:	f003 fed8 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d423c:	a902      	add	r1, sp, #8
   d423e:	f003 f92a 	bl	d7496 <_ZN5Print7printlnEPKc>
    delay(10000);
   d4242:	f242 7010 	movw	r0, #10000	; 0x2710
   d4246:	f003 fa59 	bl	d76fc <delay>
   d424a:	e7c1      	b.n	d41d0 <_Z12internalTempv+0x10>
   d424c:	f3af 8000 	nop.w
   d4250:	99c99c9a 	.word	0x99c99c9a
   d4254:	3fe9c99c 	.word	0x3fe9c99c
   d4258:	000d9b3a 	.word	0x000d9b3a
   d425c:	2003dd20 	.word	0x2003dd20
   d4260:	000d9b4e 	.word	0x000d9b4e
   d4264:	42480000 	.word	0x42480000
   d4268:	000d9b69 	.word	0x000d9b69
   d426c:	000d9b79 	.word	0x000d9b79

000d4270 <_Z9stopwatchv>:
  }
}

void stopwatch() {//thread for stopwatch code that really isn't being used currently
   d4270:	b538      	push	{r3, r4, r5, lr}
  Serial.println("stopwatch:called");
   d4272:	f003 fe33 	bl	d7edc <_Z16_fetch_usbserialv>
   d4276:	4916      	ldr	r1, [pc, #88]	; (d42d0 <_Z9stopwatchv+0x60>)
   d4278:	f003 f90d 	bl	d7496 <_ZN5Print7printlnEPKc>
  int timeElapsed = 0;
  bool startedButton = digitalRead(D7);
   d427c:	2007      	movs	r0, #7
   d427e:	f004 f8e8 	bl	d8452 <digitalRead>
  }
}

void stopwatch() {//thread for stopwatch code that really isn't being used currently
  Serial.println("stopwatch:called");
  int timeElapsed = 0;
   d4282:	2400      	movs	r4, #0
  bool startedButton = digitalRead(D7);
   d4284:	4605      	mov	r5, r0
  bool started = false;
  char data [64];
  while(1) {
    if(startedButton == true){
   d4286:	b905      	cbnz	r5, d428a <_Z9stopwatchv+0x1a>
   d4288:	e7fe      	b.n	d4288 <_Z9stopwatchv+0x18>
      started = true;
      Serial.println("stopwatch:started");
   d428a:	f003 fe27 	bl	d7edc <_Z16_fetch_usbserialv>
    }
    while(started == true){
      timeElapsed=timeElapsed+1;
   d428e:	3401      	adds	r4, #1
  bool started = false;
  char data [64];
  while(1) {
    if(startedButton == true){
      started = true;
      Serial.println("stopwatch:started");
   d4290:	4910      	ldr	r1, [pc, #64]	; (d42d4 <_Z9stopwatchv+0x64>)
   d4292:	f003 f900 	bl	d7496 <_ZN5Print7printlnEPKc>
    }
    while(started == true){
      timeElapsed=timeElapsed+1;
      Serial.print(timeElapsed);
   d4296:	f003 fe21 	bl	d7edc <_Z16_fetch_usbserialv>
   d429a:	4621      	mov	r1, r4
   d429c:	220a      	movs	r2, #10
   d429e:	f003 f955 	bl	d754c <_ZN5Print5printEii>
      Serial1.printf("t7.txt=\"%i\"\xFF\xFF\xFF", timeElapsed);
   d42a2:	f003 fea3 	bl	d7fec <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d42a6:	4623      	mov	r3, r4
   d42a8:	4a0b      	ldr	r2, [pc, #44]	; (d42d8 <_Z9stopwatchv+0x68>)
   d42aa:	2100      	movs	r1, #0
   d42ac:	f003 f95a 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
      Serial.printlnf("t7.txt=\"%i\"\xFF\xFF\xFF", timeElapsed);
   d42b0:	f003 fe14 	bl	d7edc <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d42b4:	4623      	mov	r3, r4
   d42b6:	4a08      	ldr	r2, [pc, #32]	; (d42d8 <_Z9stopwatchv+0x68>)
   d42b8:	2101      	movs	r1, #1
   d42ba:	f003 f953 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
      if(startedButton == true){
        started = false;
        Serial.println("stopwatch:stopped");
   d42be:	f003 fe0d 	bl	d7edc <_Z16_fetch_usbserialv>
   d42c2:	4906      	ldr	r1, [pc, #24]	; (d42dc <_Z9stopwatchv+0x6c>)
   d42c4:	f003 f8e7 	bl	d7496 <_ZN5Print7printlnEPKc>
      }
      delay(100);
   d42c8:	2064      	movs	r0, #100	; 0x64
   d42ca:	f003 fa17 	bl	d76fc <delay>
  while(1) {
    if(startedButton == true){
      started = true;
      Serial.println("stopwatch:started");
    }
    while(started == true){
   d42ce:	e7da      	b.n	d4286 <_Z9stopwatchv+0x16>
   d42d0:	000d9b88 	.word	0x000d9b88
   d42d4:	000d9b99 	.word	0x000d9b99
   d42d8:	000d9bab 	.word	0x000d9bab
   d42dc:	000d9bba 	.word	0x000d9bba

000d42e0 <_ZN16JsonParserStaticILj512ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d42e0:	b510      	push	{r4, lr}
   d42e2:	4b03      	ldr	r3, [pc, #12]	; (d42f0 <_ZN16JsonParserStaticILj512ELj50EED1Ev+0x10>)
   d42e4:	6003      	str	r3, [r0, #0]
   d42e6:	4604      	mov	r4, r0
   d42e8:	f000 ff68 	bl	d51bc <_ZN10JsonParserD1Ev>
   d42ec:	4620      	mov	r0, r4
   d42ee:	bd10      	pop	{r4, pc}
   d42f0:	000d9af0 	.word	0x000d9af0

000d42f4 <_ZN16JsonParserStaticILj512ELj50EED0Ev>:
   d42f4:	b510      	push	{r4, lr}
   d42f6:	4604      	mov	r4, r0
   d42f8:	f7ff fff2 	bl	d42e0 <_ZN16JsonParserStaticILj512ELj50EED1Ev>
   d42fc:	4620      	mov	r0, r4
   d42fe:	f240 514c 	movw	r1, #1356	; 0x54c
   d4302:	f004 f921 	bl	d8548 <_ZdlPvj>
   d4306:	4620      	mov	r0, r4
   d4308:	bd10      	pop	{r4, pc}
	...

000d430c <_Z9cityWritev>:
    //Serial.printlnf("t0.txt=\"Waiting for temp\"\xFF\xFF\xFF");
    delay(10000);
  }
}

void cityWrite() {//thread for internal temp read, conversion, and writing to display
   d430c:	b530      	push	{r4, r5, lr}
   d430e:	b091      	sub	sp, #68	; 0x44
  Serial.println("cityWrite:entered");
   d4310:	f003 fde4 	bl	d7edc <_Z16_fetch_usbserialv>
   d4314:	490d      	ldr	r1, [pc, #52]	; (d434c <_Z9cityWritev+0x40>)
   d4316:	4d0e      	ldr	r5, [pc, #56]	; (d4350 <_Z9cityWritev+0x44>)
   d4318:	4c0e      	ldr	r4, [pc, #56]	; (d4354 <_Z9cityWritev+0x48>)
   d431a:	f003 f8bc 	bl	d7496 <_ZN5Print7printlnEPKc>
  while(1) {
    char dataCity [64];
    sprintf(dataCity, "t2.txt=\"%s,%s\"\xFF\xFF\xFF", global_city.c_str(), global_regionCode.c_str()); //writes city and state to buffer
   d431e:	682b      	ldr	r3, [r5, #0]
   d4320:	6822      	ldr	r2, [r4, #0]
   d4322:	490d      	ldr	r1, [pc, #52]	; (d4358 <_Z9cityWritev+0x4c>)
   d4324:	4668      	mov	r0, sp
   d4326:	f001 fdf7 	bl	d5f18 <sprintf>
    Serial.println(dataCity);//writes buffer to usb serial
   d432a:	f003 fdd7 	bl	d7edc <_Z16_fetch_usbserialv>
   d432e:	4669      	mov	r1, sp
   d4330:	f003 f8b1 	bl	d7496 <_ZN5Print7printlnEPKc>
    Serial1.printf(dataCity);//writes buffer to nextion
   d4334:	f003 fe5a 	bl	d7fec <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4338:	466a      	mov	r2, sp
   d433a:	2100      	movs	r1, #0
   d433c:	f003 f912 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
    delay(10000);
   d4340:	f242 7010 	movw	r0, #10000	; 0x2710
   d4344:	f003 f9da 	bl	d76fc <delay>
   d4348:	e7e9      	b.n	d431e <_Z9cityWritev+0x12>
   d434a:	bf00      	nop
   d434c:	000d9bcc 	.word	0x000d9bcc
   d4350:	2003dd24 	.word	0x2003dd24
   d4354:	2003dcc0 	.word	0x2003dcc0
   d4358:	000d9bde 	.word	0x000d9bde

000d435c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d435c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d435e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4360:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4362:	b113      	cbz	r3, d436a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4364:	2203      	movs	r2, #3
   d4366:	4601      	mov	r1, r0
   d4368:	4798      	blx	r3
    }
   d436a:	4620      	mov	r0, r4
   d436c:	bd10      	pop	{r4, pc}

000d436e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d436e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4370:	4604      	mov	r4, r0
   d4372:	b170      	cbz	r0, d4392 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4374:	6805      	ldr	r5, [r0, #0]
   d4376:	b135      	cbz	r5, d4386 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4378:	4628      	mov	r0, r5
   d437a:	f7ff ffef 	bl	d435c <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d437e:	2110      	movs	r1, #16
   d4380:	4628      	mov	r0, r5
   d4382:	f004 f8e1 	bl	d8548 <_ZdlPvj>
   d4386:	4620      	mov	r0, r4
   d4388:	2114      	movs	r1, #20
      }
   d438a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d438e:	f004 b8db 	b.w	d8548 <_ZdlPvj>
   d4392:	bd38      	pop	{r3, r4, r5, pc}

000d4394 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4394:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4396:	6803      	ldr	r3, [r0, #0]
   d4398:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d439a:	b1bb      	cbz	r3, d43cc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d439c:	6858      	ldr	r0, [r3, #4]
   d439e:	f001 fbaf 	bl	d5b00 <os_thread_is_current>
   d43a2:	b978      	cbnz	r0, d43c4 <_ZN6ThreadD1Ev+0x30>
   d43a4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d43a6:	7c5a      	ldrb	r2, [r3, #17]
   d43a8:	b912      	cbnz	r2, d43b0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d43aa:	6858      	ldr	r0, [r3, #4]
   d43ac:	f001 fbb8 	bl	d5b20 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d43b0:	6823      	ldr	r3, [r4, #0]
   d43b2:	6858      	ldr	r0, [r3, #4]
   d43b4:	f001 fbbc 	bl	d5b30 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d43b8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d43ba:	2300      	movs	r3, #0
   d43bc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d43be:	b128      	cbz	r0, d43cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d43c0:	f7ff ffd5 	bl	d436e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d43c4:	6820      	ldr	r0, [r4, #0]
   d43c6:	b108      	cbz	r0, d43cc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d43c8:	f7ff ffd1 	bl	d436e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11>
    }

    ~Thread()
    {
        dispose();
    }
   d43cc:	4620      	mov	r0, r4
   d43ce:	bd10      	pop	{r4, pc}

000d43d0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d43d0:	2300      	movs	r3, #0
   d43d2:	461a      	mov	r2, r3
   d43d4:	4619      	mov	r1, r3
   d43d6:	6840      	ldr	r0, [r0, #4]
   d43d8:	f001 bd16 	b.w	d5e08 <network_on>

000d43dc <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>:

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
   d43dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d43e0:	4681      	mov	r9, r0
   d43e2:	b094      	sub	sp, #80	; 0x50
   d43e4:	4614      	mov	r4, r2
   d43e6:	469a      	mov	sl, r3
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d43e8:	460d      	mov	r5, r1
   d43ea:	b121      	cbz	r1, d43f6 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1a>
   d43ec:	4608      	mov	r0, r1
   d43ee:	f004 ffba 	bl	d9366 <strlen>
   d43f2:	4607      	mov	r7, r0
   d43f4:	e000      	b.n	d43f8 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1c>
   d43f6:	460f      	mov	r7, r1
   d43f8:	b124      	cbz	r4, d4404 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x28>
   d43fa:	4620      	mov	r0, r4
   d43fc:	f004 ffb3 	bl	d9366 <strlen>
   d4400:	4606      	mov	r6, r0
   d4402:	e000      	b.n	d4406 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x2a>
   d4404:	4626      	mov	r6, r4

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d4406:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d440a:	4642      	mov	r2, r8
   d440c:	2100      	movs	r1, #0
   d440e:	a801      	add	r0, sp, #4
   d4410:	f004 ff4b 	bl	d92aa <memset>
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
   d4414:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d4416:	f88d 3019 	strb.w	r3, [sp, #25]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d441a:	2300      	movs	r3, #0
   d441c:	aa01      	add	r2, sp, #4
   d441e:	4619      	mov	r1, r3
   d4420:	f8d9 0004 	ldr.w	r0, [r9, #4]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d4424:	f8cd 8004 	str.w	r8, [sp, #4]
        creds.ssid = ssid;
   d4428:	9502      	str	r5, [sp, #8]
        creds.ssid_len = ssidLen;
   d442a:	9703      	str	r7, [sp, #12]
        creds.password = password;
   d442c:	9404      	str	r4, [sp, #16]
        creds.password_len = passwordLen;
   d442e:	9605      	str	r6, [sp, #20]
        creds.security = WLanSecurityType(security);
   d4430:	f88d a018 	strb.w	sl, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4434:	f001 fd08 	bl	d5e48 <network_set_credentials>
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }
   d4438:	fab0 f080 	clz	r0, r0
   d443c:	0940      	lsrs	r0, r0, #5
   d443e:	b014      	add	sp, #80	; 0x50
   d4440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4444 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9>:
            txLen = 0;
        }
    }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4444:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4446:	4c36      	ldr	r4, [pc, #216]	; (d4520 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xdc>)
   d4448:	b0c9      	sub	sp, #292	; 0x124
   d444a:	2300      	movs	r3, #0
   d444c:	b2da      	uxtb	r2, r3
        ssid[len] = 0x00; //terminates SSID with a NULL
        wifiKeyState = true; //sets next BLE UART string to be sent to passkey
        Serial.printf("Wifi SSID set to: %s\n", ssid); //prints for debugging
    }
    else if(wifiKeyState == true){
        for (uint8_t i = 0; i < len; i++) {
   d444e:	4291      	cmp	r1, r2
   d4450:	f103 0301 	add.w	r3, r3, #1
   d4454:	4e32      	ldr	r6, [pc, #200]	; (d4520 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xdc>)
   d4456:	d902      	bls.n	d445e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0x1a>
            passkey[i] = (char) data[i]; //loops through passkey array to set to char*
   d4458:	5c85      	ldrb	r5, [r0, r2]
   d445a:	54a5      	strb	r5, [r4, r2]
   d445c:	e7f6      	b.n	d444c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0x8>
        }
        passkey[len] = 0x00; //passkey is terminated with NULL
        wifiKeyState = false;//sets the next BLE UART string sent to be the SSID not the passkey
   d445e:	4b31      	ldr	r3, [pc, #196]	; (d4524 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xe0>)
   d4460:	4d31      	ldr	r5, [pc, #196]	; (d4528 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xe4>)
    }
    else if(wifiKeyState == true){
        for (uint8_t i = 0; i < len; i++) {
            passkey[i] = (char) data[i]; //loops through passkey array to set to char*
        }
        passkey[len] = 0x00; //passkey is terminated with NULL
   d4462:	2400      	movs	r4, #0
   d4464:	5474      	strb	r4, [r6, r1]
        wifiKeyState = false;//sets the next BLE UART string sent to be the SSID not the passkey
   d4466:	701c      	strb	r4, [r3, #0]
        Serial.printf("Wifi PSK set to: %s\n", passkey); //prints for debugging
   d4468:	f003 fd38 	bl	d7edc <_Z16_fetch_usbserialv>
   d446c:	4633      	mov	r3, r6
   d446e:	4a2f      	ldr	r2, [pc, #188]	; (d452c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xe8>)
   d4470:	4621      	mov	r1, r4
   d4472:	f003 f877 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4476:	4622      	mov	r2, r4
   d4478:	2102      	movs	r1, #2
   d447a:	6868      	ldr	r0, [r5, #4]
   d447c:	f001 fcb4 	bl	d5de8 <network_disconnect>
        WiFi.disconnect();//disconnects from wifi to prevent possible interferance that i dont know actually exists
        WiFi.setCredentials(ssid, passkey, WPA2); //sets creds
   d4480:	4632      	mov	r2, r6
   d4482:	9400      	str	r4, [sp, #0]
   d4484:	2303      	movs	r3, #3
   d4486:	492a      	ldr	r1, [pc, #168]	; (d4530 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xec>)
   d4488:	4628      	mov	r0, r5
   d448a:	f7ff ffa7 	bl	d43dc <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>

#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
   d448e:	ae02      	add	r6, sp, #8
   d4490:	2738      	movs	r7, #56	; 0x38
   d4492:	1930      	adds	r0, r6, r4
   d4494:	2238      	movs	r2, #56	; 0x38
   d4496:	2100      	movs	r1, #0
   d4498:	f004 ff07 	bl	d92aa <memset>
       size = sizeof(*this);
   d449c:	51a7      	str	r7, [r4, r6]
   d449e:	3438      	adds	r4, #56	; 0x38
        WiFiAccessPoint ap[5]; //number = how many wifi credentials that are saved to print (from most recent, should be only one)
   d44a0:	f5b4 7f8c 	cmp.w	r4, #280	; 0x118
   d44a4:	d1f5      	bne.n	d4492 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0x4e>
        int found = WiFi.getCredentials(ap, 5);
   d44a6:	4631      	mov	r1, r6
   d44a8:	2205      	movs	r2, #5
   d44aa:	481f      	ldr	r0, [pc, #124]	; (d4528 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xe4>)
   d44ac:	f003 fedc 	bl	d8268 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
   d44b0:	ac03      	add	r4, sp, #12
   d44b2:	4607      	mov	r7, r0
        for (int i = 0; i < found; i++) { //prints out current wifi data
   d44b4:	2600      	movs	r6, #0
   d44b6:	42b7      	cmp	r7, r6
   d44b8:	dd24      	ble.n	d4504 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xc0>
          Serial.print("ssid: ");
   d44ba:	f003 fd0f 	bl	d7edc <_Z16_fetch_usbserialv>
   d44be:	491d      	ldr	r1, [pc, #116]	; (d4534 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xf0>)
   d44c0:	f002 ffd6 	bl	d7470 <_ZN5Print5printEPKc>
          Serial.println(ap[i].ssid);
   d44c4:	f003 fd0a 	bl	d7edc <_Z16_fetch_usbserialv>
   d44c8:	4621      	mov	r1, r4
   d44ca:	f002 ffe4 	bl	d7496 <_ZN5Print7printlnEPKc>
          // security is one of WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA, WLAN_SEC_WPA2, WLAN_SEC_WPA_ENTERPRISE, WLAN_SEC_WPA2_ENTERPRISE
          Serial.print("security: ");
   d44ce:	f003 fd05 	bl	d7edc <_Z16_fetch_usbserialv>
   d44d2:	4919      	ldr	r1, [pc, #100]	; (d4538 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xf4>)
   d44d4:	f002 ffcc 	bl	d7470 <_ZN5Print5printEPKc>
          Serial.println(ap[i].security);
   d44d8:	f003 fd00 	bl	d7edc <_Z16_fetch_usbserialv>
   d44dc:	220a      	movs	r2, #10
   d44de:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d44e2:	f003 f835 	bl	d7550 <_ZN5Print7printlnEii>
          // cipher is one of WLAN_CIPHER_AES, WLAN_CIPHER_TKIP or WLAN_CIPHER_AES_TKIP
          Serial.print("cipher: ");
   d44e6:	f003 fcf9 	bl	d7edc <_Z16_fetch_usbserialv>
   d44ea:	4914      	ldr	r1, [pc, #80]	; (d453c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xf8>)
   d44ec:	f002 ffc0 	bl	d7470 <_ZN5Print5printEPKc>
          Serial.println(ap[i].cipher);
   d44f0:	f003 fcf4 	bl	d7edc <_Z16_fetch_usbserialv>
   d44f4:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   d44f8:	220a      	movs	r2, #10
   d44fa:	f003 f829 	bl	d7550 <_ZN5Print7printlnEii>
        Serial.printf("Wifi PSK set to: %s\n", passkey); //prints for debugging
        WiFi.disconnect();//disconnects from wifi to prevent possible interferance that i dont know actually exists
        WiFi.setCredentials(ssid, passkey, WPA2); //sets creds
        WiFiAccessPoint ap[5]; //number = how many wifi credentials that are saved to print (from most recent, should be only one)
        int found = WiFi.getCredentials(ap, 5);
        for (int i = 0; i < found; i++) { //prints out current wifi data
   d44fe:	3601      	adds	r6, #1
   d4500:	3438      	adds	r4, #56	; 0x38
   d4502:	e7d8      	b.n	d44b6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0x72>
          Serial.println(ap[i].security);
          // cipher is one of WLAN_CIPHER_AES, WLAN_CIPHER_TKIP or WLAN_CIPHER_AES_TKIP
          Serial.print("cipher: ");
          Serial.println(ap[i].cipher);
        }
        Serial.println("WiFi Set");
   d4504:	f003 fcea 	bl	d7edc <_Z16_fetch_usbserialv>
   d4508:	490d      	ldr	r1, [pc, #52]	; (d4540 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9+0xfc>)
   d450a:	f002 ffc4 	bl	d7496 <_ZN5Print7printlnEPKc>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d450e:	2300      	movs	r3, #0
   d4510:	461a      	mov	r2, r3
   d4512:	4619      	mov	r1, r3
   d4514:	6868      	ldr	r0, [r5, #4]
   d4516:	f001 fc57 	bl	d5dc8 <network_connect>
        WiFi.connect(); //*should* connect to wifi based on current credentials
    }
}
   d451a:	b049      	add	sp, #292	; 0x124
   d451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d451e:	bf00      	nop
   d4520:	2003dd7a 	.word	0x2003dd7a
   d4524:	2003dc9c 	.word	0x2003dc9c
   d4528:	2003e6d8 	.word	0x2003e6d8
   d452c:	000d9bf0 	.word	0x000d9bf0
   d4530:	2003dcd8 	.word	0x2003dcd8
   d4534:	000d9c05 	.word	0x000d9c05
   d4538:	000d9c0c 	.word	0x000d9c0c
   d453c:	000d9c17 	.word	0x000d9c17
   d4540:	000d9c20 	.word	0x000d9c20

000d4544 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
            txLen = 0;
        }
    }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d4544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFi.on(); //turns wifi on again
   d4548:	4e16      	ldr	r6, [pc, #88]	; (d45a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>)
            txLen = 0;
        }
    }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d454a:	4605      	mov	r5, r0
    WiFi.on(); //turns wifi on again
   d454c:	4630      	mov	r0, r6
            txLen = 0;
        }
    }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   d454e:	460c      	mov	r4, r1
    WiFi.on(); //turns wifi on again
   d4550:	f7ff ff3e 	bl	d43d0 <_ZN5spark9WiFiClass2onEv>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d4554:	2300      	movs	r3, #0
   d4556:	461a      	mov	r2, r3
   d4558:	4619      	mov	r1, r3
   d455a:	6870      	ldr	r0, [r6, #4]
   d455c:	f001 fc7c 	bl	d5e58 <network_clear_credentials>
    WiFi.clearCredentials(); //clears credentials to prevent having 2 sets of credentials.
    char buffer[10]; //databuffer for stuff im not sure
    if(wifiKeyState == false){
   d4560:	4a11      	ldr	r2, [pc, #68]	; (d45a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>)
   d4562:	7813      	ldrb	r3, [r2, #0]
   d4564:	4610      	mov	r0, r2
   d4566:	b9bb      	cbnz	r3, d4598 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>
   d4568:	4f10      	ldr	r7, [pc, #64]	; (d45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   d456a:	4e10      	ldr	r6, [pc, #64]	; (d45ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x68>)
   d456c:	b2d9      	uxtb	r1, r3
        for (uint8_t i = 0; i < len; i++) {
   d456e:	428c      	cmp	r4, r1
   d4570:	f103 0201 	add.w	r2, r3, #1
   d4574:	d903      	bls.n	d457e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>
            ssid[i] = (char) data[i]; //loops through incoming data to make ssid array
   d4576:	5c6b      	ldrb	r3, [r5, r1]
   d4578:	547b      	strb	r3, [r7, r1]
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    WiFi.on(); //turns wifi on again
    WiFi.clearCredentials(); //clears credentials to prevent having 2 sets of credentials.
    char buffer[10]; //databuffer for stuff im not sure
    if(wifiKeyState == false){
        for (uint8_t i = 0; i < len; i++) {
   d457a:	4613      	mov	r3, r2
   d457c:	e7f5      	b.n	d456a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
            ssid[i] = (char) data[i]; //loops through incoming data to make ssid array
        }
        ssid[len] = 0x00; //terminates SSID with a NULL
   d457e:	2500      	movs	r5, #0
        wifiKeyState = true; //sets next BLE UART string to be sent to passkey
   d4580:	2301      	movs	r3, #1
    char buffer[10]; //databuffer for stuff im not sure
    if(wifiKeyState == false){
        for (uint8_t i = 0; i < len; i++) {
            ssid[i] = (char) data[i]; //loops through incoming data to make ssid array
        }
        ssid[len] = 0x00; //terminates SSID with a NULL
   d4582:	5535      	strb	r5, [r6, r4]
        wifiKeyState = true; //sets next BLE UART string to be sent to passkey
   d4584:	7003      	strb	r3, [r0, #0]
        Serial.printf("Wifi SSID set to: %s\n", ssid); //prints for debugging
   d4586:	f003 fca9 	bl	d7edc <_Z16_fetch_usbserialv>
   d458a:	4633      	mov	r3, r6
   d458c:	4629      	mov	r1, r5
   d458e:	4a08      	ldr	r2, [pc, #32]	; (d45b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>)
          Serial.println(ap[i].cipher);
        }
        Serial.println("WiFi Set");
        WiFi.connect(); //*should* connect to wifi based on current credentials
    }
}
   d4590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4594:	f002 bfe6 	b.w	d7564 <_ZN5Print11printf_implEbPKcz>
   d4598:	4621      	mov	r1, r4
   d459a:	4628      	mov	r0, r5
   d459c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d45a0:	f7ff bf50 	b.w	d4444 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv.part.9>
   d45a4:	2003e6d8 	.word	0x2003e6d8
   d45a8:	2003dc9c 	.word	0x2003dc9c
   d45ac:	2003dcd8 	.word	0x2003dcd8
   d45b0:	000d9c29 	.word	0x000d9c29

000d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
   d45b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d45b8:	4606      	mov	r6, r0
   d45ba:	460f      	mov	r7, r1
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d45bc:	2014      	movs	r0, #20
   d45be:	492a      	ldr	r1, [pc, #168]	; (d4668 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
   d45c0:	4615      	mov	r5, r2
   d45c2:	4698      	mov	r8, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d45c4:	f003 ffc2 	bl	d854c <_ZnwjRKSt9nothrow_t>
   d45c8:	4604      	mov	r4, r0
   d45ca:	b130      	cbz	r0, d45da <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d45cc:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d45ce:	7403      	strb	r3, [r0, #16]
   d45d0:	6003      	str	r3, [r0, #0]
   d45d2:	6043      	str	r3, [r0, #4]
   d45d4:	6083      	str	r3, [r0, #8]
   d45d6:	60c3      	str	r3, [r0, #12]
   d45d8:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d45da:	6034      	str	r4, [r6, #0]

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d45dc:	2c00      	cmp	r4, #0
   d45de:	d039      	beq.n	d4654 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
            goto error;
        }
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d45e0:	4921      	ldr	r1, [pc, #132]	; (d4668 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d45e2:	2010      	movs	r0, #16
   d45e4:	f003 ffb2 	bl	d854c <_ZnwjRKSt9nothrow_t>
   d45e8:	4603      	mov	r3, r0
   d45ea:	b1b0      	cbz	r0, d461a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x66>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d45ec:	2200      	movs	r2, #0
   d45ee:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d45f0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d45f4:	aa02      	add	r2, sp, #8
   d45f6:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d45fa:	e893 0003 	ldmia.w	r3, {r0, r1}
   d45fe:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4602:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4606:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d460a:	6899      	ldr	r1, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d460c:	68aa      	ldr	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d460e:	60a9      	str	r1, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4610:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4612:	68ea      	ldr	r2, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4614:	68d9      	ldr	r1, [r3, #12]
   d4616:	60e9      	str	r1, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4618:	60da      	str	r2, [r3, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d461a:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d461c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d461e:	b135      	cbz	r5, d462e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x7a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4620:	4628      	mov	r0, r5
   d4622:	f7ff fe9b 	bl	d435c <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4626:	2110      	movs	r1, #16
   d4628:	4628      	mov	r0, r5
   d462a:	f003 ff8d 	bl	d8548 <_ZdlPvj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d462e:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d4630:	6803      	ldr	r3, [r0, #0]
   d4632:	b17b      	cbz	r3, d4654 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4636:	4642      	mov	r2, r8
   d4638:	e88d 0009 	stmia.w	sp, {r0, r3}
   d463c:	4639      	mov	r1, r7
   d463e:	4b0b      	ldr	r3, [pc, #44]	; (d466c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d4640:	3004      	adds	r0, #4
   d4642:	f001 fa55 	bl	d5af0 <os_thread_create>
   d4646:	b928      	cbnz	r0, d4654 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d4648:	6833      	ldr	r3, [r6, #0]
            goto error;
        }
        while (!d_->started) {
   d464a:	7c1b      	ldrb	r3, [r3, #16]
   d464c:	b943      	cbnz	r3, d4660 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            os_thread_yield();
   d464e:	f001 fa5f 	bl	d5b10 <os_thread_yield>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
            goto error;
        }
        while (!d_->started) {
   d4652:	e7f9      	b.n	d4648 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x94>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4654:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4656:	2300      	movs	r3, #0
   d4658:	6033      	str	r3, [r6, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d465a:	b108      	cbz	r0, d4660 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
	  get_deleter()(__p);
   d465c:	f7ff fe87 	bl	d436e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11>
            os_thread_yield();
        }
        return;
    error:
        d_.reset();
    }
   d4660:	4630      	mov	r0, r6
   d4662:	b004      	add	sp, #16
   d4664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4668:	000da2ec 	.word	0x000da2ec
   d466c:	000d4191 	.word	0x000d4191

000d4670 <_ZN10JsonBuffer9addStringEPKc>:
	/**
	 * @brief Add a c-string to the end of the buffer
	 *
	 * @param data Pointer to a c-string (null terminated).
	 */
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d4670:	b538      	push	{r3, r4, r5, lr}
   d4672:	4605      	mov	r5, r0
   d4674:	4608      	mov	r0, r1
   d4676:	460c      	mov	r4, r1
   d4678:	f004 fe75 	bl	d9366 <strlen>
   d467c:	4621      	mov	r1, r4
   d467e:	4602      	mov	r2, r0
   d4680:	4628      	mov	r0, r5
   d4682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4686:	f000 bdca 	b.w	d521e <_ZN10JsonBuffer7addDataEPKcj>
	...

000d468c <_Z6hhmmssm>:

uint8_t txBuf[UART_TX_BUF_SIZE]; //buffer for BLE
size_t txLen = 0;

String hhmmss(unsigned long int now)  //format value as "hh:mm:ss"
{
   d468c:	b530      	push	{r4, r5, lr}
   d468e:	4605      	mov	r5, r0
   d4690:	b091      	sub	sp, #68	; 0x44
  int time = 0;
  if (Time.hour(now) - 5 < 0 )
   d4692:	4608      	mov	r0, r1

uint8_t txBuf[UART_TX_BUF_SIZE]; //buffer for BLE
size_t txLen = 0;

String hhmmss(unsigned long int now)  //format value as "hh:mm:ss"
{
   d4694:	460c      	mov	r4, r1
  int time = 0;
  if (Time.hour(now) - 5 < 0 )
   d4696:	f002 ffe7 	bl	d7668 <_ZN9TimeClass4hourEl>
   d469a:	2804      	cmp	r0, #4
   d469c:	dc02      	bgt.n	d46a4 <_Z6hhmmssm+0x18>
  {
    time = Time.hour(now) + 7; // not sure what this does but it seems to be required
   d469e:	4620      	mov	r0, r4
   d46a0:	f002 ffe2 	bl	d7668 <_ZN9TimeClass4hourEl>
  }
  String hour = String (0);
   d46a4:	220a      	movs	r2, #10
   d46a6:	2100      	movs	r1, #0
   d46a8:	4668      	mov	r0, sp
   d46aa:	f001 fdc8 	bl	d623e <_ZN6StringC1Eih>
  if (Time.hour(now) > 12) {
   d46ae:	4620      	mov	r0, r4
   d46b0:	f002 ffda 	bl	d7668 <_ZN9TimeClass4hourEl>
   d46b4:	280c      	cmp	r0, #12
   d46b6:	dd0f      	ble.n	d46d8 <_Z6hhmmssm+0x4c>
    hour = String (Time.hour(now) - 17); //hour adjustment for 12hours
   d46b8:	4620      	mov	r0, r4
   d46ba:	f002 ffd5 	bl	d7668 <_ZN9TimeClass4hourEl>
   d46be:	220a      	movs	r2, #10
   d46c0:	f1a0 0111 	sub.w	r1, r0, #17
   d46c4:	a80c      	add	r0, sp, #48	; 0x30
   d46c6:	f001 fdba 	bl	d623e <_ZN6StringC1Eih>
   d46ca:	a90c      	add	r1, sp, #48	; 0x30
   d46cc:	4668      	mov	r0, sp
   d46ce:	f001 fd9d 	bl	d620c <_ZN6StringaSEOS_>
   d46d2:	a80c      	add	r0, sp, #48	; 0x30
   d46d4:	f001 fd09 	bl	d60ea <_ZN6StringD1Ev>
  }
  if (Time.hour(now) < 1) { //for AM times
   d46d8:	4620      	mov	r0, r4
   d46da:	f002 ffc5 	bl	d7668 <_ZN9TimeClass4hourEl>
   d46de:	2800      	cmp	r0, #0
    hour = String(Time.hour(now) + 12);
   d46e0:	4620      	mov	r0, r4
  }
  String hour = String (0);
  if (Time.hour(now) > 12) {
    hour = String (Time.hour(now) - 17); //hour adjustment for 12hours
  }
  if (Time.hour(now) < 1) { //for AM times
   d46e2:	dc05      	bgt.n	d46f0 <_Z6hhmmssm+0x64>
    hour = String(Time.hour(now) + 12);
   d46e4:	f002 ffc0 	bl	d7668 <_ZN9TimeClass4hourEl>
   d46e8:	220a      	movs	r2, #10
   d46ea:	f100 010c 	add.w	r1, r0, #12
   d46ee:	e003      	b.n	d46f8 <_Z6hhmmssm+0x6c>
  }
  else {
    hour = String (Time.hour(now) - 5); //for time zone
   d46f0:	f002 ffba 	bl	d7668 <_ZN9TimeClass4hourEl>
   d46f4:	220a      	movs	r2, #10
   d46f6:	1f41      	subs	r1, r0, #5
   d46f8:	a80c      	add	r0, sp, #48	; 0x30
   d46fa:	f001 fda0 	bl	d623e <_ZN6StringC1Eih>
   d46fe:	a90c      	add	r1, sp, #48	; 0x30
   d4700:	4668      	mov	r0, sp
   d4702:	f001 fd83 	bl	d620c <_ZN6StringaSEOS_>
   d4706:	a80c      	add	r0, sp, #48	; 0x30
   d4708:	f001 fcef 	bl	d60ea <_ZN6StringD1Ev>
  }
  //String hour = String(Time.hour(now));
  String minute = String::format("%02i",Time.minute(now));//formatting
   d470c:	4620      	mov	r0, r4
   d470e:	f002 ffb3 	bl	d7678 <_ZN9TimeClass6minuteEl>
   d4712:	4915      	ldr	r1, [pc, #84]	; (d4768 <_Z6hhmmssm+0xdc>)
   d4714:	4602      	mov	r2, r0
   d4716:	a804      	add	r0, sp, #16
   d4718:	f001 fdf8 	bl	d630c <_ZN6String6formatEPKcz>
  String second = String::format("%02i",Time.second(now));
   d471c:	4620      	mov	r0, r4
   d471e:	f002 ffb3 	bl	d7688 <_ZN9TimeClass6secondEl>
   d4722:	4911      	ldr	r1, [pc, #68]	; (d4768 <_Z6hhmmssm+0xdc>)
   d4724:	4602      	mov	r2, r0
   d4726:	a808      	add	r0, sp, #32
   d4728:	f001 fdf0 	bl	d630c <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d472c:	4669      	mov	r1, sp
   d472e:	a80c      	add	r0, sp, #48	; 0x30
   d4730:	f001 fd61 	bl	d61f6 <_ZN6StringC1ERKS_>
  return hour + ":" + minute;
   d4734:	490d      	ldr	r1, [pc, #52]	; (d476c <_Z6hhmmssm+0xe0>)
   d4736:	a80c      	add	r0, sp, #48	; 0x30
   d4738:	f001 fdc4 	bl	d62c4 <_ZplRK15StringSumHelperPKc>
   d473c:	a904      	add	r1, sp, #16
   d473e:	f001 fdb5 	bl	d62ac <_ZplRK15StringSumHelperRK6String>
   d4742:	4601      	mov	r1, r0
   d4744:	4628      	mov	r0, r5
   d4746:	f001 fd56 	bl	d61f6 <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d474a:	a80c      	add	r0, sp, #48	; 0x30
   d474c:	f001 fccd 	bl	d60ea <_ZN6StringD1Ev>
  else {
    hour = String (Time.hour(now) - 5); //for time zone
  }
  //String hour = String(Time.hour(now));
  String minute = String::format("%02i",Time.minute(now));//formatting
  String second = String::format("%02i",Time.second(now));
   d4750:	a808      	add	r0, sp, #32
   d4752:	f001 fcca 	bl	d60ea <_ZN6StringD1Ev>
  }
  else {
    hour = String (Time.hour(now) - 5); //for time zone
  }
  //String hour = String(Time.hour(now));
  String minute = String::format("%02i",Time.minute(now));//formatting
   d4756:	a804      	add	r0, sp, #16
   d4758:	f001 fcc7 	bl	d60ea <_ZN6StringD1Ev>
  int time = 0;
  if (Time.hour(now) - 5 < 0 )
  {
    time = Time.hour(now) + 7; // not sure what this does but it seems to be required
  }
  String hour = String (0);
   d475c:	4668      	mov	r0, sp
   d475e:	f001 fcc4 	bl	d60ea <_ZN6StringD1Ev>
  }
  //String hour = String(Time.hour(now));
  String minute = String::format("%02i",Time.minute(now));//formatting
  String second = String::format("%02i",Time.second(now));
  return hour + ":" + minute;
};
   d4762:	4628      	mov	r0, r5
   d4764:	b011      	add	sp, #68	; 0x44
   d4766:	bd30      	pop	{r4, r5, pc}
   d4768:	000d9c3f 	.word	0x000d9c3f
   d476c:	000d9c44 	.word	0x000d9c44

000d4770 <_Z15encoderDecisionv>:
    //Serial1.print(data5);
    //Serial.print(data5);
  }
}

void encoderDecision() {
   d4770:	b508      	push	{r3, lr}
  Serial1.print("page 2\xFF\xFF\xFF");
   d4772:	f003 fc3b 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d4776:	4917      	ldr	r1, [pc, #92]	; (d47d4 <_Z15encoderDecisionv+0x64>)
  while(1){
    Serial.println(currentPage);
   d4778:	4c17      	ldr	r4, [pc, #92]	; (d47d8 <_Z15encoderDecisionv+0x68>)
    Serial.println(counter);
   d477a:	4d18      	ldr	r5, [pc, #96]	; (d47dc <_Z15encoderDecisionv+0x6c>)
    //Serial.print(data5);
  }
}

void encoderDecision() {
  Serial1.print("page 2\xFF\xFF\xFF");
   d477c:	f002 fe78 	bl	d7470 <_ZN5Print5printEPKc>
  while(1){
    Serial.println(currentPage);
   d4780:	f003 fbac 	bl	d7edc <_Z16_fetch_usbserialv>
   d4784:	220a      	movs	r2, #10
   d4786:	6821      	ldr	r1, [r4, #0]
   d4788:	f002 fee2 	bl	d7550 <_ZN5Print7printlnEii>
    Serial.println(counter);
   d478c:	f003 fba6 	bl	d7edc <_Z16_fetch_usbserialv>
   d4790:	220a      	movs	r2, #10
   d4792:	6829      	ldr	r1, [r5, #0]
   d4794:	f002 fedc 	bl	d7550 <_ZN5Print7printlnEii>
    if(currentPage != counter){
   d4798:	682a      	ldr	r2, [r5, #0]
   d479a:	6823      	ldr	r3, [r4, #0]
   d479c:	4293      	cmp	r3, r2
   d479e:	d013      	beq.n	d47c8 <_Z15encoderDecisionv+0x58>
      sprintf(data5, "page %i\xFF\xFF\xFF", (int) counter); //constructs command for nextion. format: "page x" where x=page number
   d47a0:	490f      	ldr	r1, [pc, #60]	; (d47e0 <_Z15encoderDecisionv+0x70>)
   d47a2:	4810      	ldr	r0, [pc, #64]	; (d47e4 <_Z15encoderDecisionv+0x74>)
   d47a4:	f001 fbb8 	bl	d5f18 <sprintf>
      Serial1.print(data5);//sends command to screen
   d47a8:	f003 fc20 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d47ac:	490d      	ldr	r1, [pc, #52]	; (d47e4 <_Z15encoderDecisionv+0x74>)
   d47ae:	f002 fe5f 	bl	d7470 <_ZN5Print5printEPKc>
      Serial.println(data5);//debugging serial send
   d47b2:	f003 fb93 	bl	d7edc <_Z16_fetch_usbserialv>
   d47b6:	490b      	ldr	r1, [pc, #44]	; (d47e4 <_Z15encoderDecisionv+0x74>)
   d47b8:	f002 fe6d 	bl	d7496 <_ZN5Print7printlnEPKc>
      currentPage = counter;
   d47bc:	682b      	ldr	r3, [r5, #0]
   d47be:	6023      	str	r3, [r4, #0]
      delay(500);
   d47c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d47c4:	f002 ff9a 	bl	d76fc <delay>
    }
    delay(500);
   d47c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d47cc:	f002 ff96 	bl	d76fc <delay>
  }
}

void encoderDecision() {
  Serial1.print("page 2\xFF\xFF\xFF");
  while(1){
   d47d0:	e7d6      	b.n	d4780 <_Z15encoderDecisionv+0x10>
   d47d2:	bf00      	nop
   d47d4:	000d9c46 	.word	0x000d9c46
   d47d8:	2003dbc0 	.word	0x2003dbc0
   d47dc:	2003dcd0 	.word	0x2003dcd0
   d47e0:	000d9c50 	.word	0x000d9c50
   d47e4:	2003dd3a 	.word	0x2003dd3a

000d47e8 <loop>:
    delay(10000);
  }
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d47e8:	f04f 30ff 	mov.w	r0, #4294967295
   d47ec:	f002 bf86 	b.w	d76fc <delay>

000d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>:
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
   d47f0:	b510      	push	{r4, lr}
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d47f2:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d47f4:	680b      	ldr	r3, [r1, #0]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d47f6:	600a      	str	r2, [r1, #0]
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
   d47f8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d47fa:	6800      	ldr	r0, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d47fc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d47fe:	b108      	cbz	r0, d4804 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_+0x14>
	  get_deleter()(__p);
   d4800:	f7ff fdb5 	bl	d436e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.11>
      operator=(unique_ptr&& __u) noexcept
      {
	reset(__u.release());
	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
	return *this;
      }
   d4804:	4620      	mov	r0, r4
   d4806:	bd10      	pop	{r4, pc}

000d4808 <setup>:
      Serial.println("externalTempFunction:published"); //debugging
      delay(10000);
    }
}

void setup() {
   d4808:	b5f0      	push	{r4, r5, r6, r7, lr}
   d480a:	b093      	sub	sp, #76	; 0x4c
    Serial.begin(9600);
   d480c:	f003 fb66 	bl	d7edc <_Z16_fetch_usbserialv>
   d4810:	f44f 5116 	mov.w	r1, #9600	; 0x2580
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4814:	2400      	movs	r4, #0
   d4816:	f003 fb55 	bl	d7ec4 <_ZN9USBSerial5beginEl>
    Serial1.begin(115200);
   d481a:	f003 fbe7 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d481e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4822:	f003 fbdd 	bl	d7fe0 <_ZN11USARTSerial5beginEm>
   d4826:	4623      	mov	r3, r4
   d4828:	4622      	mov	r2, r4
   d482a:	498c      	ldr	r1, [pc, #560]	; (d4a5c <setup+0x254>)
   d482c:	9401      	str	r4, [sp, #4]
   d482e:	9400      	str	r4, [sp, #0]
   d4830:	488b      	ldr	r0, [pc, #556]	; (d4a60 <setup+0x258>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4832:	4f8c      	ldr	r7, [pc, #560]	; (d4a64 <setup+0x25c>)
	    _M_manager = &_My_handler::_M_manager;
   d4834:	4e8c      	ldr	r6, [pc, #560]	; (d4a68 <setup+0x260>)
   d4836:	f001 fb3f 	bl	d5eb8 <spark_subscribe>
   d483a:	4623      	mov	r3, r4
   d483c:	4622      	mov	r2, r4
   d483e:	498b      	ldr	r1, [pc, #556]	; (d4a6c <setup+0x264>)
   d4840:	9401      	str	r4, [sp, #4]
   d4842:	9400      	str	r4, [sp, #0]
   d4844:	488a      	ldr	r0, [pc, #552]	; (d4a70 <setup+0x268>)
   d4846:	f001 fb37 	bl	d5eb8 <spark_subscribe>
    Particle.subscribe("hook-response/tempRead", tempHandler, MY_DEVICES);//subscribes to external temp webhook
    Particle.subscribe("hook-response/geoip", geoIpHandler, MY_DEVICES);//subscribes to geoip data webhook
    externalTempThread = Thread("externalTemp", externalTempFunction); //GETs webhook data and parses it and sends it to screenWrite
   d484a:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d484e:	4b89      	ldr	r3, [pc, #548]	; (d4a74 <setup+0x26c>)
   d4850:	9309      	str	r3, [sp, #36]	; 0x24
   d4852:	aa09      	add	r2, sp, #36	; 0x24
   d4854:	2302      	movs	r3, #2
   d4856:	4988      	ldr	r1, [pc, #544]	; (d4a78 <setup+0x270>)
   d4858:	9500      	str	r5, [sp, #0]
   d485a:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d485c:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d485e:	960b      	str	r6, [sp, #44]	; 0x2c
   d4860:	f7ff fea8 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        return isValid() && os_thread_is_current(d_->handle);
    }

    Thread& operator=(Thread&& thread)
    {
        d_ = std::move(thread.d_);
   d4864:	a904      	add	r1, sp, #16
   d4866:	4885      	ldr	r0, [pc, #532]	; (d4a7c <setup+0x274>)
   d4868:	f7ff ffc2 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d486c:	a804      	add	r0, sp, #16
   d486e:	f7ff fd91 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4872:	a809      	add	r0, sp, #36	; 0x24
   d4874:	f7ff fd72 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4878:	4b81      	ldr	r3, [pc, #516]	; (d4a80 <setup+0x278>)
   d487a:	9309      	str	r3, [sp, #36]	; 0x24
    stopWatchThread = Thread("stopWatchTask", stopwatch); //thread for stopwatch code that really isn't being used currently
   d487c:	aa09      	add	r2, sp, #36	; 0x24
   d487e:	2302      	movs	r3, #2
   d4880:	4980      	ldr	r1, [pc, #512]	; (d4a84 <setup+0x27c>)
   d4882:	9500      	str	r5, [sp, #0]
   d4884:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4886:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d4888:	960b      	str	r6, [sp, #44]	; 0x2c
   d488a:	f7ff fe93 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d488e:	a904      	add	r1, sp, #16
   d4890:	487d      	ldr	r0, [pc, #500]	; (d4a88 <setup+0x280>)
   d4892:	f7ff ffad 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d4896:	a804      	add	r0, sp, #16
   d4898:	f7ff fd7c 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d489c:	a809      	add	r0, sp, #36	; 0x24
   d489e:	f7ff fd5d 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d48a2:	4b7a      	ldr	r3, [pc, #488]	; (d4a8c <setup+0x284>)
   d48a4:	9309      	str	r3, [sp, #36]	; 0x24
    internalTempThread = Thread("sensorTemp", internalTemp);//thread for internal temp read, conversion, and writing to display
   d48a6:	aa09      	add	r2, sp, #36	; 0x24
   d48a8:	2302      	movs	r3, #2
   d48aa:	4979      	ldr	r1, [pc, #484]	; (d4a90 <setup+0x288>)
   d48ac:	9500      	str	r5, [sp, #0]
   d48ae:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d48b0:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d48b2:	960b      	str	r6, [sp, #44]	; 0x2c
   d48b4:	f7ff fe7e 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d48b8:	a904      	add	r1, sp, #16
   d48ba:	4876      	ldr	r0, [pc, #472]	; (d4a94 <setup+0x28c>)
   d48bc:	f7ff ff98 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d48c0:	a804      	add	r0, sp, #16
   d48c2:	f7ff fd67 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48c6:	a809      	add	r0, sp, #36	; 0x24
   d48c8:	f7ff fd48 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d48cc:	4b72      	ldr	r3, [pc, #456]	; (d4a98 <setup+0x290>)
   d48ce:	9309      	str	r3, [sp, #36]	; 0x24
    cityWriteThread = Thread("cityThread", cityWrite);//thread for the geoip interpretation and parsing
   d48d0:	aa09      	add	r2, sp, #36	; 0x24
   d48d2:	2302      	movs	r3, #2
   d48d4:	4971      	ldr	r1, [pc, #452]	; (d4a9c <setup+0x294>)
   d48d6:	9500      	str	r5, [sp, #0]
   d48d8:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d48da:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d48dc:	960b      	str	r6, [sp, #44]	; 0x2c
   d48de:	f7ff fe69 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d48e2:	a904      	add	r1, sp, #16
   d48e4:	486e      	ldr	r0, [pc, #440]	; (d4aa0 <setup+0x298>)
   d48e6:	f7ff ff83 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d48ea:	a804      	add	r0, sp, #16
   d48ec:	f7ff fd52 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48f0:	a809      	add	r0, sp, #36	; 0x24
   d48f2:	f7ff fd33 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d48f6:	4b6b      	ldr	r3, [pc, #428]	; (d4aa4 <setup+0x29c>)
   d48f8:	9309      	str	r3, [sp, #36]	; 0x24
    screenWriteThread = Thread("screenThread", screenWrite);//thread for writing to the screen
   d48fa:	aa09      	add	r2, sp, #36	; 0x24
   d48fc:	2302      	movs	r3, #2
   d48fe:	496a      	ldr	r1, [pc, #424]	; (d4aa8 <setup+0x2a0>)
   d4900:	9500      	str	r5, [sp, #0]
   d4902:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4904:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d4906:	960b      	str	r6, [sp, #44]	; 0x2c
   d4908:	f7ff fe54 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d490c:	a904      	add	r1, sp, #16
   d490e:	4867      	ldr	r0, [pc, #412]	; (d4aac <setup+0x2a4>)
   d4910:	f7ff ff6e 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d4914:	a804      	add	r0, sp, #16
   d4916:	f7ff fd3d 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d491a:	a809      	add	r0, sp, #36	; 0x24
   d491c:	f7ff fd1e 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4920:	4b63      	ldr	r3, [pc, #396]	; (d4ab0 <setup+0x2a8>)
   d4922:	9309      	str	r3, [sp, #36]	; 0x24
    encoderDialThread = Thread("encoderThread", encoderDial);//thread for encoder interpretations
   d4924:	aa09      	add	r2, sp, #36	; 0x24
   d4926:	2302      	movs	r3, #2
   d4928:	4962      	ldr	r1, [pc, #392]	; (d4ab4 <setup+0x2ac>)
   d492a:	9500      	str	r5, [sp, #0]
   d492c:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d492e:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d4930:	960b      	str	r6, [sp, #44]	; 0x2c
   d4932:	f7ff fe3f 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d4936:	a904      	add	r1, sp, #16
   d4938:	485f      	ldr	r0, [pc, #380]	; (d4ab8 <setup+0x2b0>)
   d493a:	f7ff ff59 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d493e:	a804      	add	r0, sp, #16
   d4940:	f7ff fd28 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4944:	a809      	add	r0, sp, #36	; 0x24
   d4946:	f7ff fd09 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d494a:	4b5c      	ldr	r3, [pc, #368]	; (d4abc <setup+0x2b4>)
   d494c:	9309      	str	r3, [sp, #36]	; 0x24
    timeThread = Thread("timeTask", timeFunction);//thread for time calculation and conversion
   d494e:	aa09      	add	r2, sp, #36	; 0x24
   d4950:	2302      	movs	r3, #2
   d4952:	495b      	ldr	r1, [pc, #364]	; (d4ac0 <setup+0x2b8>)
   d4954:	9500      	str	r5, [sp, #0]
   d4956:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4958:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d495a:	960b      	str	r6, [sp, #44]	; 0x2c
   d495c:	f7ff fe2a 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d4960:	a904      	add	r1, sp, #16
   d4962:	4858      	ldr	r0, [pc, #352]	; (d4ac4 <setup+0x2bc>)
   d4964:	f7ff ff44 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d4968:	a804      	add	r0, sp, #16
   d496a:	f7ff fd13 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d496e:	a809      	add	r0, sp, #36	; 0x24
   d4970:	f7ff fcf4 	bl	d435c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4974:	4b54      	ldr	r3, [pc, #336]	; (d4ac8 <setup+0x2c0>)
   d4976:	9309      	str	r3, [sp, #36]	; 0x24
    dialCounterThread = Thread("dial", dialCounter);
   d4978:	aa09      	add	r2, sp, #36	; 0x24
   d497a:	2302      	movs	r3, #2
   d497c:	4953      	ldr	r1, [pc, #332]	; (d4acc <setup+0x2c4>)
   d497e:	9500      	str	r5, [sp, #0]
   d4980:	a804      	add	r0, sp, #16
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4982:	970c      	str	r7, [sp, #48]	; 0x30
	    _M_manager = &_My_handler::_M_manager;
   d4984:	960b      	str	r6, [sp, #44]	; 0x2c
   d4986:	f7ff fe15 	bl	d45b4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d498a:	a904      	add	r1, sp, #16
   d498c:	4850      	ldr	r0, [pc, #320]	; (d4ad0 <setup+0x2c8>)
   d498e:	f7ff ff2f 	bl	d47f0 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d4992:	a804      	add	r0, sp, #16
   d4994:	f7ff fcfe 	bl	d4394 <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4998:	a809      	add	r0, sp, #36	; 0x24
   d499a:	f7ff fcdf 	bl	d435c <_ZNSt14_Function_baseD1Ev>
    tempReceived = "No IP";//sets default value for nextion external temp readout
   d499e:	494d      	ldr	r1, [pc, #308]	; (d4ad4 <setup+0x2cc>)
   d49a0:	484d      	ldr	r0, [pc, #308]	; (d4ad8 <setup+0x2d0>)
   d49a2:	f001 fc3b 	bl	d621c <_ZN6StringaSEPKc>
   d49a6:	2301      	movs	r3, #1
   d49a8:	4622      	mov	r2, r4
   d49aa:	494c      	ldr	r1, [pc, #304]	; (d4adc <setup+0x2d4>)
   d49ac:	9401      	str	r4, [sp, #4]
   d49ae:	9400      	str	r4, [sp, #0]
   d49b0:	484b      	ldr	r0, [pc, #300]	; (d4ae0 <setup+0x2d8>)
   d49b2:	f001 fa81 	bl	d5eb8 <spark_subscribe>
    Particle.subscribe("particle/device/ip", ipHandler);//subscribes to global IP get
    WiFi.on();//turns wifi on in the case device is in manual mode
   d49b6:	484b      	ldr	r0, [pc, #300]	; (d4ae4 <setup+0x2dc>)
   d49b8:	f7ff fd0a 	bl	d43d0 <_ZN5spark9WiFiClass2onEv>
    pinMode(A2, INPUT);//for temp sensor
   d49bc:	4621      	mov	r1, r4
   d49be:	2011      	movs	r0, #17
   d49c0:	f003 fd36 	bl	d8430 <pinMode>
    /*while(! mcp.begin()) {
      Serial.println("MCP9808 not found");
      delay(500);
    }
    Serial.println("MCP9808 OK");*/
    pinMode (A3, INPUT_PULLUP);//for encoder
   d49c4:	2102      	movs	r1, #2
   d49c6:	2010      	movs	r0, #16
   d49c8:	f003 fd32 	bl	d8430 <pinMode>
    pinMode (A4, INPUT_PULLUP);//for encoder
   d49cc:	2102      	movs	r1, #2
   d49ce:	200f      	movs	r0, #15
   d49d0:	f003 fd2e 	bl	d8430 <pinMode>
    BLE.addCharacteristic(txCharacteristic);//BLE init stuff
   d49d4:	f002 f900 	bl	d6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d49d8:	4943      	ldr	r1, [pc, #268]	; (d4ae8 <setup+0x2e0>)
   d49da:	f002 fd09 	bl	d73f0 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>
    BLE.addCharacteristic(rxCharacteristic);//BLE init stuff
   d49de:	f002 f8fb 	bl	d6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d49e2:	4942      	ldr	r1, [pc, #264]	; (d4aec <setup+0x2e4>)
   d49e4:	f002 fd04 	bl	d73f0 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>
    BleAdvertisingData data;//BLE init stuff
   d49e8:	a809      	add	r0, sp, #36	; 0x24
   d49ea:	f001 fe28 	bl	d663e <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);//BLE init stuff
   d49ee:	4b40      	ldr	r3, [pc, #256]	; (d4af0 <setup+0x2e8>)
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d49f0:	a804      	add	r0, sp, #16
   d49f2:	6819      	ldr	r1, [r3, #0]
   d49f4:	f001 fd39 	bl	d646a <_ZN8particle7BleUuidC1EPKc>
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d49f8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d49fc:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
   d4a00:	d005      	beq.n	d4a0e <setup+0x206>
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.full(), BLE_SIG_UUID_128BIT_LEN, force);
   d4a02:	2310      	movs	r3, #16
   d4a04:	9400      	str	r4, [sp, #0]
   d4a06:	eb0d 0203 	add.w	r2, sp, r3
   d4a0a:	2107      	movs	r1, #7
   d4a0c:	e007      	b.n	d4a1e <setup+0x216>

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4a0e:	aa12      	add	r2, sp, #72	; 0x48
   d4a10:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   d4a14:	f822 1d3a 	strh.w	r1, [r2, #-58]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4a18:	9300      	str	r3, [sp, #0]
   d4a1a:	2103      	movs	r1, #3
   d4a1c:	2302      	movs	r3, #2
   d4a1e:	a809      	add	r0, sp, #36	; 0x24
   d4a20:	f001 fdc6 	bl	d65b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    data.appendLocalName("DYOL");//BLE init stuff, sets device broadcast name
    BLE.advertise(&data);//BLE init stuff
    WiFi.setCredentials("WCL2","atmega328", WPA2); //sets creds
   d4a24:	4c2f      	ldr	r4, [pc, #188]	; (d4ae4 <setup+0x2dc>)
    pinMode (A4, INPUT_PULLUP);//for encoder
    BLE.addCharacteristic(txCharacteristic);//BLE init stuff
    BLE.addCharacteristic(rxCharacteristic);//BLE init stuff
    BleAdvertisingData data;//BLE init stuff
    data.appendServiceUUID(serviceUuid);//BLE init stuff
    data.appendLocalName("DYOL");//BLE init stuff, sets device broadcast name
   d4a26:	4933      	ldr	r1, [pc, #204]	; (d4af4 <setup+0x2ec>)
   d4a28:	a809      	add	r0, sp, #36	; 0x24
   d4a2a:	f001 fe22 	bl	d6672 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
    BLE.advertise(&data);//BLE init stuff
    WiFi.setCredentials("WCL2","atmega328", WPA2); //sets creds
   d4a2e:	2500      	movs	r5, #0
    BLE.addCharacteristic(txCharacteristic);//BLE init stuff
    BLE.addCharacteristic(rxCharacteristic);//BLE init stuff
    BleAdvertisingData data;//BLE init stuff
    data.appendServiceUUID(serviceUuid);//BLE init stuff
    data.appendLocalName("DYOL");//BLE init stuff, sets device broadcast name
    BLE.advertise(&data);//BLE init stuff
   d4a30:	f002 f8d2 	bl	d6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4a34:	2200      	movs	r2, #0
   d4a36:	a909      	add	r1, sp, #36	; 0x24
   d4a38:	f001 fef2 	bl	d6820 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    WiFi.setCredentials("WCL2","atmega328", WPA2); //sets creds
   d4a3c:	2303      	movs	r3, #3
   d4a3e:	4a2e      	ldr	r2, [pc, #184]	; (d4af8 <setup+0x2f0>)
   d4a40:	492e      	ldr	r1, [pc, #184]	; (d4afc <setup+0x2f4>)
   d4a42:	9500      	str	r5, [sp, #0]
   d4a44:	4620      	mov	r0, r4
   d4a46:	f7ff fcc9 	bl	d43dc <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a4a:	462b      	mov	r3, r5
   d4a4c:	462a      	mov	r2, r5
   d4a4e:	4629      	mov	r1, r5
   d4a50:	6860      	ldr	r0, [r4, #4]
   d4a52:	f001 f9b9 	bl	d5dc8 <network_connect>
    WiFi.connect();//connects to wifi 
    encoderDecision(); //starts loop to send page switching commands based on encoder value
   d4a56:	f7ff fe8b 	bl	d4770 <_Z15encoderDecisionv>
   d4a5a:	bf00      	nop
   d4a5c:	000d4dfd 	.word	0x000d4dfd
   d4a60:	000d9c5b 	.word	0x000d9c5b
   d4a64:	000d40b5 	.word	0x000d40b5
   d4a68:	000d40b9 	.word	0x000d40b9
   d4a6c:	000d4e55 	.word	0x000d4e55
   d4a70:	000d9c72 	.word	0x000d9c72
   d4a74:	000d4cf5 	.word	0x000d4cf5
   d4a78:	000d9c86 	.word	0x000d9c86
   d4a7c:	2003dcd4 	.word	0x2003dcd4
   d4a80:	000d4271 	.word	0x000d4271
   d4a84:	000d9c93 	.word	0x000d9c93
   d4a88:	2003dc88 	.word	0x2003dc88
   d4a8c:	000d41c1 	.word	0x000d41c1
   d4a90:	000d9ca1 	.word	0x000d9ca1
   d4a94:	2003ddbc 	.word	0x2003ddbc
   d4a98:	000d430d 	.word	0x000d430d
   d4a9c:	000d9cac 	.word	0x000d9cac
   d4aa0:	2003dc8c 	.word	0x2003dc8c
   d4aa4:	000d413d 	.word	0x000d413d
   d4aa8:	000d9cb7 	.word	0x000d9cb7
   d4aac:	2003ddc8 	.word	0x2003ddc8
   d4ab0:	000d40d1 	.word	0x000d40d1
   d4ab4:	000d9cc4 	.word	0x000d9cc4
   d4ab8:	2003e340 	.word	0x2003e340
   d4abc:	000d4b2d 	.word	0x000d4b2d
   d4ac0:	000d9cd2 	.word	0x000d9cd2
   d4ac4:	2003e33c 	.word	0x2003e33c
   d4ac8:	000d40b3 	.word	0x000d40b3
   d4acc:	000d9cdb 	.word	0x000d9cdb
   d4ad0:	2003e318 	.word	0x2003e318
   d4ad4:	000d9ce0 	.word	0x000d9ce0
   d4ad8:	2003e32c 	.word	0x2003e32c
   d4adc:	000d4cb9 	.word	0x000d4cb9
   d4ae0:	000d9ce6 	.word	0x000d9ce6
   d4ae4:	2003e6d8 	.word	0x2003e6d8
   d4ae8:	2003ddc0 	.word	0x2003ddc0
   d4aec:	2003dc94 	.word	0x2003dc94
   d4af0:	2003dbbc 	.word	0x2003dbbc
   d4af4:	000d9cf9 	.word	0x000d9cf9
   d4af8:	000d9cfe 	.word	0x000d9cfe
   d4afc:	000d9d08 	.word	0x000d9d08

000d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b00:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4b02:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b04:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4b06:	b17c      	cbz	r4, d4b28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4b08:	6863      	ldr	r3, [r4, #4]
   d4b0a:	3b01      	subs	r3, #1
   d4b0c:	6063      	str	r3, [r4, #4]
   d4b0e:	b95b      	cbnz	r3, d4b28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4b10:	6823      	ldr	r3, [r4, #0]
   d4b12:	4620      	mov	r0, r4
   d4b14:	689b      	ldr	r3, [r3, #8]
   d4b16:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b18:	68a3      	ldr	r3, [r4, #8]
   d4b1a:	3b01      	subs	r3, #1
   d4b1c:	60a3      	str	r3, [r4, #8]
   d4b1e:	b91b      	cbnz	r3, d4b28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4b20:	6823      	ldr	r3, [r4, #0]
   d4b22:	4620      	mov	r0, r4
   d4b24:	68db      	ldr	r3, [r3, #12]
   d4b26:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4b28:	4628      	mov	r0, r5
   d4b2a:	bd38      	pop	{r3, r4, r5, pc}

000d4b2c <_Z12timeFunctionv>:
  String minute = String::format("%02i",Time.minute(now));//formatting
  String second = String::format("%02i",Time.second(now));
  return hour + ":" + minute;
};

void timeFunction(){//thread for time calculation and conversion
   d4b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  while(1){
    static unsigned long waitMillis;
    struct epochMillis now;  //holds the unix epoch time to millisecond resolution
    char dataClock [64];
    if(millis() > waitMillis) {
   d4b2e:	4c56      	ldr	r4, [pc, #344]	; (d4c88 <_Z12timeFunctionv+0x15c>)
        ntpTime->nowMillis(&now);  //get the current NTP time
   d4b30:	4f56      	ldr	r7, [pc, #344]	; (d4c8c <_Z12timeFunctionv+0x160>)
  String minute = String::format("%02i",Time.minute(now));//formatting
  String second = String::format("%02i",Time.second(now));
  return hour + ":" + minute;
};

void timeFunction(){//thread for time calculation and conversion
   d4b32:	b09f      	sub	sp, #124	; 0x7c
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4b34:	f000 ff88 	bl	d5a48 <HAL_Timer_Get_Milli_Seconds>
  while(1){
    static unsigned long waitMillis;
    struct epochMillis now;  //holds the unix epoch time to millisecond resolution
    char dataClock [64];
    if(millis() > waitMillis) {
   d4b38:	6823      	ldr	r3, [r4, #0]
   d4b3a:	4283      	cmp	r3, r0
   d4b3c:	d2fa      	bcs.n	d4b34 <_Z12timeFunctionv+0x8>
        ntpTime->nowMillis(&now);  //get the current NTP time
   d4b3e:	a902      	add	r1, sp, #8
   d4b40:	6838      	ldr	r0, [r7, #0]
   d4b42:	f000 fb02 	bl	d514a <_ZN7NtpTime9nowMillisEP11epochMillis>
        Particle.publish("NTP clock is: ", hhmmss(now.seconds) + "." + String::format("%03i",now.millis)); //asks for time
   d4b46:	9902      	ldr	r1, [sp, #8]
   d4b48:	a806      	add	r0, sp, #24
   d4b4a:	f7ff fd9f 	bl	d468c <_Z6hhmmssm>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4b4e:	a906      	add	r1, sp, #24
   d4b50:	a80a      	add	r0, sp, #40	; 0x28
   d4b52:	f001 fb50 	bl	d61f6 <_ZN6StringC1ERKS_>
   d4b56:	494e      	ldr	r1, [pc, #312]	; (d4c90 <_Z12timeFunctionv+0x164>)
   d4b58:	a80a      	add	r0, sp, #40	; 0x28
   d4b5a:	f001 fbb3 	bl	d62c4 <_ZplRK15StringSumHelperPKc>
   d4b5e:	9a03      	ldr	r2, [sp, #12]
   d4b60:	494c      	ldr	r1, [pc, #304]	; (d4c94 <_Z12timeFunctionv+0x168>)
   d4b62:	4605      	mov	r5, r0
   d4b64:	a80e      	add	r0, sp, #56	; 0x38
   d4b66:	f001 fbd1 	bl	d630c <_ZN6String6formatEPKcz>
   d4b6a:	a90e      	add	r1, sp, #56	; 0x38
   d4b6c:	4628      	mov	r0, r5
   d4b6e:	f001 fb9d 	bl	d62ac <_ZplRK15StringSumHelperRK6String>
   d4b72:	4d49      	ldr	r5, [pc, #292]	; (d4c98 <_Z12timeFunctionv+0x16c>)
   d4b74:	6802      	ldr	r2, [r0, #0]
   d4b76:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4b78:	4948      	ldr	r1, [pc, #288]	; (d4c9c <_Z12timeFunctionv+0x170>)
   d4b7a:	f88d 3000 	strb.w	r3, [sp]
   d4b7e:	a804      	add	r0, sp, #16
   d4b80:	233c      	movs	r3, #60	; 0x3c
   d4b82:	f002 ff71 	bl	d7a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b86:	a805      	add	r0, sp, #20
   d4b88:	f7ff ffba 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b8c:	a80e      	add	r0, sp, #56	; 0x38
   d4b8e:	f001 faac 	bl	d60ea <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4b92:	a80a      	add	r0, sp, #40	; 0x28
   d4b94:	f001 faa9 	bl	d60ea <_ZN6StringD1Ev>
   d4b98:	a806      	add	r0, sp, #24
   d4b9a:	f001 faa6 	bl	d60ea <_ZN6StringD1Ev>
        Particle.publish("System clock is: ", hhmmss(Time.now()));
   d4b9e:	f002 fd9c 	bl	d76da <_ZN9TimeClass3nowEv>
   d4ba2:	4601      	mov	r1, r0
   d4ba4:	a80e      	add	r0, sp, #56	; 0x38
   d4ba6:	f7ff fd71 	bl	d468c <_Z6hhmmssm>
   d4baa:	782b      	ldrb	r3, [r5, #0]
   d4bac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4bae:	493c      	ldr	r1, [pc, #240]	; (d4ca0 <_Z12timeFunctionv+0x174>)
   d4bb0:	f88d 3000 	strb.w	r3, [sp]
   d4bb4:	a80a      	add	r0, sp, #40	; 0x28
   d4bb6:	233c      	movs	r3, #60	; 0x3c
   d4bb8:	f002 ff56 	bl	d7a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4bbc:	a80b      	add	r0, sp, #44	; 0x2c
   d4bbe:	f7ff ff9f 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bc2:	a80e      	add	r0, sp, #56	; 0x38
   d4bc4:	f001 fa91 	bl	d60ea <_ZN6StringD1Ev>
        Serial.println(hhmmss(now.seconds) + "." + String::format("%03i",now.millis));//prints time
   d4bc8:	f003 f988 	bl	d7edc <_Z16_fetch_usbserialv>
   d4bcc:	9902      	ldr	r1, [sp, #8]
   d4bce:	4605      	mov	r5, r0
   d4bd0:	a806      	add	r0, sp, #24
   d4bd2:	f7ff fd5b 	bl	d468c <_Z6hhmmssm>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4bd6:	a906      	add	r1, sp, #24
   d4bd8:	a80a      	add	r0, sp, #40	; 0x28
   d4bda:	f001 fb0c 	bl	d61f6 <_ZN6StringC1ERKS_>
   d4bde:	492c      	ldr	r1, [pc, #176]	; (d4c90 <_Z12timeFunctionv+0x164>)
   d4be0:	a80a      	add	r0, sp, #40	; 0x28
   d4be2:	f001 fb6f 	bl	d62c4 <_ZplRK15StringSumHelperPKc>
   d4be6:	9a03      	ldr	r2, [sp, #12]
   d4be8:	492a      	ldr	r1, [pc, #168]	; (d4c94 <_Z12timeFunctionv+0x168>)
   d4bea:	4606      	mov	r6, r0
   d4bec:	a80e      	add	r0, sp, #56	; 0x38
   d4bee:	f001 fb8d 	bl	d630c <_ZN6String6formatEPKcz>
   d4bf2:	a90e      	add	r1, sp, #56	; 0x38
   d4bf4:	4630      	mov	r0, r6
   d4bf6:	f001 fb59 	bl	d62ac <_ZplRK15StringSumHelperRK6String>
   d4bfa:	6801      	ldr	r1, [r0, #0]
   d4bfc:	4628      	mov	r0, r5
   d4bfe:	f002 fc4a 	bl	d7496 <_ZN5Print7printlnEPKc>
   d4c02:	a80e      	add	r0, sp, #56	; 0x38
   d4c04:	f001 fa71 	bl	d60ea <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4c08:	a80a      	add	r0, sp, #40	; 0x28
   d4c0a:	f001 fa6e 	bl	d60ea <_ZN6StringD1Ev>
   d4c0e:	a806      	add	r0, sp, #24
   d4c10:	f001 fa6b 	bl	d60ea <_ZN6StringD1Ev>
        Serial.println("System: " + hhmmss(Time.now()));
   d4c14:	f003 f962 	bl	d7edc <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4c18:	4922      	ldr	r1, [pc, #136]	; (d4ca4 <_Z12timeFunctionv+0x178>)
   d4c1a:	4605      	mov	r5, r0
   d4c1c:	a80e      	add	r0, sp, #56	; 0x38
   d4c1e:	f001 faab 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c22:	f002 fd5a 	bl	d76da <_ZN9TimeClass3nowEv>
   d4c26:	4601      	mov	r1, r0
   d4c28:	a80a      	add	r0, sp, #40	; 0x28
   d4c2a:	f7ff fd2f 	bl	d468c <_Z6hhmmssm>
   d4c2e:	a90a      	add	r1, sp, #40	; 0x28
   d4c30:	a80e      	add	r0, sp, #56	; 0x38
   d4c32:	f001 fb3b 	bl	d62ac <_ZplRK15StringSumHelperRK6String>
   d4c36:	6801      	ldr	r1, [r0, #0]
   d4c38:	4628      	mov	r0, r5
   d4c3a:	f002 fc2c 	bl	d7496 <_ZN5Print7printlnEPKc>
   d4c3e:	a80a      	add	r0, sp, #40	; 0x28
   d4c40:	f001 fa53 	bl	d60ea <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4c44:	a80e      	add	r0, sp, #56	; 0x38
   d4c46:	f001 fa50 	bl	d60ea <_ZN6StringD1Ev>
        sprintf(dataClock, "t3.txt=\"%s\"\xFF\xFF\xFF", hhmmss(Time.now()).c_str());
   d4c4a:	f002 fd46 	bl	d76da <_ZN9TimeClass3nowEv>
   d4c4e:	4601      	mov	r1, r0
   d4c50:	a80a      	add	r0, sp, #40	; 0x28
   d4c52:	f7ff fd1b 	bl	d468c <_Z6hhmmssm>
   d4c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4c58:	4913      	ldr	r1, [pc, #76]	; (d4ca8 <_Z12timeFunctionv+0x17c>)
   d4c5a:	a80e      	add	r0, sp, #56	; 0x38
   d4c5c:	f001 f95c 	bl	d5f18 <sprintf>
   d4c60:	a80a      	add	r0, sp, #40	; 0x28
   d4c62:	f001 fa42 	bl	d60ea <_ZN6StringD1Ev>
        Serial1.println(dataClock);//prints time to screen
   d4c66:	f003 f9c1 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d4c6a:	a90e      	add	r1, sp, #56	; 0x38
   d4c6c:	f002 fc13 	bl	d7496 <_ZN5Print7printlnEPKc>
        Serial.println(dataClock);
   d4c70:	f003 f934 	bl	d7edc <_Z16_fetch_usbserialv>
   d4c74:	a90e      	add	r1, sp, #56	; 0x38
   d4c76:	f002 fc0e 	bl	d7496 <_ZN5Print7printlnEPKc>
   d4c7a:	f000 fee5 	bl	d5a48 <HAL_Timer_Get_Milli_Seconds>
        waitMillis = millis() + (3000);  // wait 3 seconds
   d4c7e:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
   d4c82:	6020      	str	r0, [r4, #0]
  String second = String::format("%02i",Time.second(now));
  return hour + ":" + minute;
};

void timeFunction(){//thread for time calculation and conversion
  while(1){
   d4c84:	e756      	b.n	d4b34 <_Z12timeFunctionv+0x8>
   d4c86:	bf00      	nop
   d4c88:	2003dd18 	.word	0x2003dd18
   d4c8c:	2003dd1c 	.word	0x2003dd1c
   d4c90:	000da095 	.word	0x000da095
   d4c94:	000d9d0d 	.word	0x000d9d0d
   d4c98:	2003dd39 	.word	0x2003dd39
   d4c9c:	000d9d12 	.word	0x000d9d12
   d4ca0:	000d9d21 	.word	0x000d9d21
   d4ca4:	000d9d33 	.word	0x000d9d33
   d4ca8:	000d9d3c 	.word	0x000d9d3c

000d4cac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>:
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4cac:	4613      	mov	r3, r2
   d4cae:	460a      	mov	r2, r1
   d4cb0:	2101      	movs	r1, #1
   d4cb2:	f002 bc57 	b.w	d7564 <_ZN5Print11printf_implEbPKcz>
	...

000d4cb8 <_Z9ipHandlerPKcS0_>:
    Serial.printlnf("lat=%s,lon=%s,city=%s,region_code=%s", global_lat.c_str(), global_lon.c_str(), global_city.c_str(), global_regionCode.c_str());
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
}

void ipHandler(const char *event, const char *data) {
   d4cb8:	b538      	push	{r3, r4, r5, lr}
   d4cba:	460d      	mov	r5, r1
  Serial.println("ipHandler: called");
  Serial.println(data);
  global_ip = data; //sets ip
   d4cbc:	4c0a      	ldr	r4, [pc, #40]	; (d4ce8 <_Z9ipHandlerPKcS0_+0x30>)
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
}

void ipHandler(const char *event, const char *data) {
  Serial.println("ipHandler: called");
   d4cbe:	f003 f90d 	bl	d7edc <_Z16_fetch_usbserialv>
   d4cc2:	490a      	ldr	r1, [pc, #40]	; (d4cec <_Z9ipHandlerPKcS0_+0x34>)
   d4cc4:	f002 fbe7 	bl	d7496 <_ZN5Print7printlnEPKc>
  Serial.println(data);
   d4cc8:	f003 f908 	bl	d7edc <_Z16_fetch_usbserialv>
   d4ccc:	4629      	mov	r1, r5
   d4cce:	f002 fbe2 	bl	d7496 <_ZN5Print7printlnEPKc>
  global_ip = data; //sets ip
   d4cd2:	4629      	mov	r1, r5
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	f001 faa1 	bl	d621c <_ZN6StringaSEPKc>
  Serial.printlnf("global_ip=%s", global_ip.c_str()); //prints ip
   d4cda:	f003 f8ff 	bl	d7edc <_Z16_fetch_usbserialv>
   d4cde:	6822      	ldr	r2, [r4, #0]
   d4ce0:	4903      	ldr	r1, [pc, #12]	; (d4cf0 <_Z9ipHandlerPKcS0_+0x38>)
   d4ce2:	f7ff ffe3 	bl	d4cac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d4ce6:	bd38      	pop	{r3, r4, r5, pc}
   d4ce8:	2003dca0 	.word	0x2003dca0
   d4cec:	000d9d4b 	.word	0x000d9d4b
   d4cf0:	000d9d5d 	.word	0x000d9d5d

000d4cf4 <_Z20externalTempFunctionv>:
      page=5;
    }
  }*/
}

void externalTempFunction() {//GETs webhook data and parses it and sends it to screenWrite
   d4cf4:	b530      	push	{r4, r5, lr}
   d4cf6:	4d29      	ldr	r5, [pc, #164]	; (d4d9c <_Z20externalTempFunctionv+0xa8>)
   d4cf8:	b095      	sub	sp, #84	; 0x54
    while(1) {
      // Step 1: get IP
      Serial.println("externalTempFunction: calling IP");
   d4cfa:	f003 f8ef 	bl	d7edc <_Z16_fetch_usbserialv>
   d4cfe:	4928      	ldr	r1, [pc, #160]	; (d4da0 <_Z20externalTempFunctionv+0xac>)
   d4d00:	4c28      	ldr	r4, [pc, #160]	; (d4da4 <_Z20externalTempFunctionv+0xb0>)
   d4d02:	f002 fbc8 	bl	d7496 <_ZN5Print7printlnEPKc>
   d4d06:	782b      	ldrb	r3, [r5, #0]
   d4d08:	4927      	ldr	r1, [pc, #156]	; (d4da8 <_Z20externalTempFunctionv+0xb4>)
   d4d0a:	f88d 3000 	strb.w	r3, [sp]
   d4d0e:	2200      	movs	r2, #0
   d4d10:	233c      	movs	r3, #60	; 0x3c
   d4d12:	a804      	add	r0, sp, #16
   d4d14:	f002 fea8 	bl	d7a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4d18:	a805      	add	r0, sp, #20
   d4d1a:	f7ff fef1 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("particle/device/ip"); //requests public ip from particle
      delay(4000);
   d4d1e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d4d22:	f002 fceb 	bl	d76fc <delay>

      // Step 2: get geo location
      Serial.println("externalTempFunction: calling geoip");
   d4d26:	f003 f8d9 	bl	d7edc <_Z16_fetch_usbserialv>
   d4d2a:	4920      	ldr	r1, [pc, #128]	; (d4dac <_Z20externalTempFunctionv+0xb8>)
   d4d2c:	f002 fbb3 	bl	d7496 <_ZN5Print7printlnEPKc>
   d4d30:	4b1f      	ldr	r3, [pc, #124]	; (d4db0 <_Z20externalTempFunctionv+0xbc>)
   d4d32:	4920      	ldr	r1, [pc, #128]	; (d4db4 <_Z20externalTempFunctionv+0xc0>)
   d4d34:	681a      	ldr	r2, [r3, #0]
   d4d36:	7823      	ldrb	r3, [r4, #0]
   d4d38:	f88d 3000 	strb.w	r3, [sp]
   d4d3c:	a804      	add	r0, sp, #16
   d4d3e:	233c      	movs	r3, #60	; 0x3c
   d4d40:	f002 fe92 	bl	d7a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4d44:	a805      	add	r0, sp, #20
   d4d46:	f7ff fedb 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("geoip", global_ip.c_str(), PRIVATE); //requests data from particle and translates it into a char*
      delay(4000);
   d4d4a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d4d4e:	f002 fcd5 	bl	d76fc <delay>

      // Step 3: get temp
      Serial.printlnf("externalTempFunction:currentTemp is %s", tempReceived.c_str());
   d4d52:	f003 f8c3 	bl	d7edc <_Z16_fetch_usbserialv>
   d4d56:	4b18      	ldr	r3, [pc, #96]	; (d4db8 <_Z20externalTempFunctionv+0xc4>)
   d4d58:	4918      	ldr	r1, [pc, #96]	; (d4dbc <_Z20externalTempFunctionv+0xc8>)
   d4d5a:	681a      	ldr	r2, [r3, #0]
   d4d5c:	f7ff ffa6 	bl	d4cac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
   d4d60:	4b17      	ldr	r3, [pc, #92]	; (d4dc0 <_Z20externalTempFunctionv+0xcc>)
      //double temp = https://api.weatherbit.io/v2.0/current?city=Lombard,NC&key=c175924274b5402e8413adbee368dd35;
      char data[64]; //data buffer for integrating lat and lon for webhook
      sprintf(data, "%s,%s", global_lat.c_str(), global_lon.c_str());//move to geoip handler so is step by step
   d4d62:	4a18      	ldr	r2, [pc, #96]	; (d4dc4 <_Z20externalTempFunctionv+0xd0>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	6812      	ldr	r2, [r2, #0]
   d4d68:	4917      	ldr	r1, [pc, #92]	; (d4dc8 <_Z20externalTempFunctionv+0xd4>)
   d4d6a:	a804      	add	r0, sp, #16
   d4d6c:	f001 f8d4 	bl	d5f18 <sprintf>
   d4d70:	7823      	ldrb	r3, [r4, #0]
   d4d72:	4916      	ldr	r1, [pc, #88]	; (d4dcc <_Z20externalTempFunctionv+0xd8>)
   d4d74:	f88d 3000 	strb.w	r3, [sp]
   d4d78:	aa04      	add	r2, sp, #16
   d4d7a:	233c      	movs	r3, #60	; 0x3c
   d4d7c:	a802      	add	r0, sp, #8
   d4d7e:	f002 fe73 	bl	d7a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4d82:	a803      	add	r0, sp, #12
   d4d84:	f7ff febc 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("tempRead", data, PRIVATE);//                    that way it is event driven
      Serial.println("externalTempFunction:published"); //debugging
   d4d88:	f003 f8a8 	bl	d7edc <_Z16_fetch_usbserialv>
   d4d8c:	4910      	ldr	r1, [pc, #64]	; (d4dd0 <_Z20externalTempFunctionv+0xdc>)
   d4d8e:	f002 fb82 	bl	d7496 <_ZN5Print7printlnEPKc>
      delay(10000);
   d4d92:	f242 7010 	movw	r0, #10000	; 0x2710
   d4d96:	f002 fcb1 	bl	d76fc <delay>
   d4d9a:	e7ae      	b.n	d4cfa <_Z20externalTempFunctionv+0x6>
   d4d9c:	2003dd39 	.word	0x2003dd39
   d4da0:	000d9d6a 	.word	0x000d9d6a
   d4da4:	2003dc90 	.word	0x2003dc90
   d4da8:	000d9ce6 	.word	0x000d9ce6
   d4dac:	000d9d8b 	.word	0x000d9d8b
   d4db0:	2003dca0 	.word	0x2003dca0
   d4db4:	000d9da9 	.word	0x000d9da9
   d4db8:	2003e32c 	.word	0x2003e32c
   d4dbc:	000d9daf 	.word	0x000d9daf
   d4dc0:	2003dcb0 	.word	0x2003dcb0
   d4dc4:	2003e31c 	.word	0x2003e31c
   d4dc8:	000d9dd6 	.word	0x000d9dd6
   d4dcc:	000d9c69 	.word	0x000d9c69
   d4dd0:	000d9ddc 	.word	0x000d9ddc

000d4dd4 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>:
	 *
	 * This should only be used for things like string, numbers, booleans, etc.. If you want to get a JSON array
	 * or object within an object, use getValueTokenByKey() instead.
	 */
	template<class T>
	bool getOuterValueByKey(const char *name, T &result) const {
   d4dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4dd6:	460e      	mov	r6, r1
   d4dd8:	4604      	mov	r4, r0
   d4dda:	4615      	mov	r5, r2
		const JsonParserGeneratorRK::jsmntok_t *value;

		if (getValueTokenByKey(getOuterObject(), name, value)) {
   d4ddc:	f000 fa50 	bl	d5280 <_ZNK10JsonParser14getOuterObjectEv>
   d4de0:	ab01      	add	r3, sp, #4
   d4de2:	4601      	mov	r1, r0
   d4de4:	4632      	mov	r2, r6
   d4de6:	4620      	mov	r0, r4
   d4de8:	f000 fb52 	bl	d5490 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d4dec:	b120      	cbz	r0, d4df8 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_+0x24>
			return getTokenValue(value, result);
   d4dee:	462a      	mov	r2, r5
   d4df0:	9901      	ldr	r1, [sp, #4]
   d4df2:	4620      	mov	r0, r4
   d4df4:	f000 fb2e 	bl	d5454 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
		}
		else {
			return false;
		}
	}
   d4df8:	b002      	add	sp, #8
   d4dfa:	bd70      	pop	{r4, r5, r6, pc}

000d4dfc <_Z11tempHandlerPKcS0_>:
      delay(100);
    }
  }
}

void tempHandler(const char *event, const char *data) { //callback for temp webhook
   d4dfc:	b510      	push	{r4, lr}
   d4dfe:	460c      	mov	r4, r1
  // Handle the integration response
  Serial.printlnf("tempHandler:dataReceived=%s", data);
   d4e00:	f003 f86c 	bl	d7edc <_Z16_fetch_usbserialv>
   d4e04:	4622      	mov	r2, r4
   d4e06:	490e      	ldr	r1, [pc, #56]	; (d4e40 <_Z11tempHandlerPKcS0_+0x44>)
   d4e08:	f7ff ff50 	bl	d4cac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  jsonParser.addString(data); //adds json to buffer
   d4e0c:	4621      	mov	r1, r4
   d4e0e:	480d      	ldr	r0, [pc, #52]	; (d4e44 <_Z11tempHandlerPKcS0_+0x48>)
   d4e10:	f7ff fc2e 	bl	d4670 <_ZN10JsonBuffer9addStringEPKc>
  if (jsonParser.parse()) {
   d4e14:	480b      	ldr	r0, [pc, #44]	; (d4e44 <_Z11tempHandlerPKcS0_+0x48>)
   d4e16:	f000 fd34 	bl	d5882 <_ZN10JsonParser5parseEv>
   d4e1a:	b158      	cbz	r0, d4e34 <_Z11tempHandlerPKcS0_+0x38>
    jsonParser.getOuterValueByKey("tempReceived", tempReceived); //parses
   d4e1c:	4c0a      	ldr	r4, [pc, #40]	; (d4e48 <_Z11tempHandlerPKcS0_+0x4c>)
   d4e1e:	490b      	ldr	r1, [pc, #44]	; (d4e4c <_Z11tempHandlerPKcS0_+0x50>)
   d4e20:	4808      	ldr	r0, [pc, #32]	; (d4e44 <_Z11tempHandlerPKcS0_+0x48>)
   d4e22:	4622      	mov	r2, r4
   d4e24:	f7ff ffd6 	bl	d4dd4 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    
    // Put code to do something with tempMin and tempMax here
    Serial.printlnf("tempReceived=%s", tempReceived.c_str()); //translates String to char* 
   d4e28:	f003 f858 	bl	d7edc <_Z16_fetch_usbserialv>
   d4e2c:	6822      	ldr	r2, [r4, #0]
   d4e2e:	4908      	ldr	r1, [pc, #32]	; (d4e50 <_Z11tempHandlerPKcS0_+0x54>)
   d4e30:	f7ff ff3c 	bl	d4cac <_ZN5Print8printlnfIIPKcEEEjS2_DpT_>
  }
  jsonParser.clear();//clears buffer so that geographical data can be parsed correctly
   d4e34:	4803      	ldr	r0, [pc, #12]	; (d4e44 <_Z11tempHandlerPKcS0_+0x48>)
}
   d4e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    jsonParser.getOuterValueByKey("tempReceived", tempReceived); //parses
    
    // Put code to do something with tempMin and tempMax here
    Serial.printlnf("tempReceived=%s", tempReceived.c_str()); //translates String to char* 
  }
  jsonParser.clear();//clears buffer so that geographical data can be parsed correctly
   d4e3a:	f000 ba0e 	b.w	d525a <_ZN10JsonBuffer5clearEv>
   d4e3e:	bf00      	nop
   d4e40:	000d9dfb 	.word	0x000d9dfb
   d4e44:	2003ddcc 	.word	0x2003ddcc
   d4e48:	2003e32c 	.word	0x2003e32c
   d4e4c:	000d9e17 	.word	0x000d9e17
   d4e50:	000d9e24 	.word	0x000d9e24

000d4e54 <_Z12geoIpHandlerPKcS0_>:
}

void geoIpHandler(const char *event, const char *data) { //callback for geoip webhook
   d4e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e56:	b085      	sub	sp, #20
   d4e58:	460c      	mov	r4, r1
  Serial.println("geoIpHandler:called");
   d4e5a:	f003 f83f 	bl	d7edc <_Z16_fetch_usbserialv>
   d4e5e:	491d      	ldr	r1, [pc, #116]	; (d4ed4 <_Z12geoIpHandlerPKcS0_+0x80>)
   d4e60:	f002 fb19 	bl	d7496 <_ZN5Print7printlnEPKc>
  Serial.println(data);
   d4e64:	f003 f83a 	bl	d7edc <_Z16_fetch_usbserialv>
   d4e68:	4621      	mov	r1, r4
   d4e6a:	f002 fb14 	bl	d7496 <_ZN5Print7printlnEPKc>

  jsonParser.addString(data); //this input uses a response template on the particle console to simplify the response
   d4e6e:	4621      	mov	r1, r4
   d4e70:	4819      	ldr	r0, [pc, #100]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
   d4e72:	f7ff fbfd 	bl	d4670 <_ZN10JsonBuffer9addStringEPKc>
  if (jsonParser.parse()) {
   d4e76:	4818      	ldr	r0, [pc, #96]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
   d4e78:	f000 fd03 	bl	d5882 <_ZN10JsonParser5parseEv>
   d4e7c:	b320      	cbz	r0, d4ec8 <_Z12geoIpHandlerPKcS0_+0x74>
    jsonParser.getOuterValueByKey("latitude", global_lat);
   d4e7e:	4c17      	ldr	r4, [pc, #92]	; (d4edc <_Z12geoIpHandlerPKcS0_+0x88>)
    jsonParser.getOuterValueByKey("longitude", global_lon);
   d4e80:	4d17      	ldr	r5, [pc, #92]	; (d4ee0 <_Z12geoIpHandlerPKcS0_+0x8c>)
  Serial.println("geoIpHandler:called");
  Serial.println(data);

  jsonParser.addString(data); //this input uses a response template on the particle console to simplify the response
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("latitude", global_lat);
   d4e82:	4918      	ldr	r1, [pc, #96]	; (d4ee4 <_Z12geoIpHandlerPKcS0_+0x90>)
    jsonParser.getOuterValueByKey("longitude", global_lon);
    jsonParser.getOuterValueByKey("city", global_city);
   d4e84:	4e18      	ldr	r6, [pc, #96]	; (d4ee8 <_Z12geoIpHandlerPKcS0_+0x94>)
  Serial.println("geoIpHandler:called");
  Serial.println(data);

  jsonParser.addString(data); //this input uses a response template on the particle console to simplify the response
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("latitude", global_lat);
   d4e86:	4814      	ldr	r0, [pc, #80]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
    jsonParser.getOuterValueByKey("longitude", global_lon);
    jsonParser.getOuterValueByKey("city", global_city);
    jsonParser.getOuterValueByKey("region_code", global_regionCode);
   d4e88:	4f18      	ldr	r7, [pc, #96]	; (d4eec <_Z12geoIpHandlerPKcS0_+0x98>)
  Serial.println("geoIpHandler:called");
  Serial.println(data);

  jsonParser.addString(data); //this input uses a response template on the particle console to simplify the response
  if (jsonParser.parse()) {
    jsonParser.getOuterValueByKey("latitude", global_lat);
   d4e8a:	4622      	mov	r2, r4
   d4e8c:	f7ff ffa2 	bl	d4dd4 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    jsonParser.getOuterValueByKey("longitude", global_lon);
   d4e90:	462a      	mov	r2, r5
   d4e92:	4917      	ldr	r1, [pc, #92]	; (d4ef0 <_Z12geoIpHandlerPKcS0_+0x9c>)
   d4e94:	4810      	ldr	r0, [pc, #64]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
   d4e96:	f7ff ff9d 	bl	d4dd4 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    jsonParser.getOuterValueByKey("city", global_city);
   d4e9a:	4632      	mov	r2, r6
   d4e9c:	4915      	ldr	r1, [pc, #84]	; (d4ef4 <_Z12geoIpHandlerPKcS0_+0xa0>)
   d4e9e:	480e      	ldr	r0, [pc, #56]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
   d4ea0:	f7ff ff98 	bl	d4dd4 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>
    jsonParser.getOuterValueByKey("region_code", global_regionCode);
   d4ea4:	463a      	mov	r2, r7
   d4ea6:	4914      	ldr	r1, [pc, #80]	; (d4ef8 <_Z12geoIpHandlerPKcS0_+0xa4>)
   d4ea8:	480b      	ldr	r0, [pc, #44]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
   d4eaa:	f7ff ff93 	bl	d4dd4 <_ZNK10JsonParser18getOuterValueByKeyI6StringEEbPKcRT_>

    //serial debugging
    Serial.printlnf("lat=%s,lon=%s,city=%s,region_code=%s", global_lat.c_str(), global_lon.c_str(), global_city.c_str(), global_regionCode.c_str());
   d4eae:	f003 f815 	bl	d7edc <_Z16_fetch_usbserialv>
   d4eb2:	683b      	ldr	r3, [r7, #0]
   d4eb4:	9302      	str	r3, [sp, #8]
   d4eb6:	6833      	ldr	r3, [r6, #0]
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	682b      	ldr	r3, [r5, #0]
   d4ebc:	9300      	str	r3, [sp, #0]
   d4ebe:	6823      	ldr	r3, [r4, #0]
   d4ec0:	4a0e      	ldr	r2, [pc, #56]	; (d4efc <_Z12geoIpHandlerPKcS0_+0xa8>)
   d4ec2:	2101      	movs	r1, #1
   d4ec4:	f002 fb4e 	bl	d7564 <_ZN5Print11printf_implEbPKcz>
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
   d4ec8:	4803      	ldr	r0, [pc, #12]	; (d4ed8 <_Z12geoIpHandlerPKcS0_+0x84>)
}
   d4eca:	b005      	add	sp, #20
   d4ecc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    jsonParser.getOuterValueByKey("region_code", global_regionCode);

    //serial debugging
    Serial.printlnf("lat=%s,lon=%s,city=%s,region_code=%s", global_lat.c_str(), global_lon.c_str(), global_city.c_str(), global_regionCode.c_str());
  }
  jsonParser.clear(); //clears the parser buffer so the temp can be parsed correctly
   d4ed0:	f000 b9c3 	b.w	d525a <_ZN10JsonBuffer5clearEv>
   d4ed4:	000d9e34 	.word	0x000d9e34
   d4ed8:	2003ddcc 	.word	0x2003ddcc
   d4edc:	2003e31c 	.word	0x2003e31c
   d4ee0:	2003dcb0 	.word	0x2003dcb0
   d4ee4:	000d9e48 	.word	0x000d9e48
   d4ee8:	2003dcc0 	.word	0x2003dcc0
   d4eec:	2003dd24 	.word	0x2003dd24
   d4ef0:	000d9e51 	.word	0x000d9e51
   d4ef4:	000d9e5b 	.word	0x000d9e5b
   d4ef8:	000d9e60 	.word	0x000d9e60
   d4efc:	000d9e6c 	.word	0x000d9e6c

000d4f00 <_GLOBAL__sub_I_internalTempThread>:
  }
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d4f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4f04:	4b6d      	ldr	r3, [pc, #436]	; (d50bc <_GLOBAL__sub_I_internalTempThread+0x1bc>)

#define UART_TX_BUF_SIZE        20

SYSTEM_THREAD(ENABLED);

Thread internalTempThread;
   d4f06:	4e6e      	ldr	r6, [pc, #440]	; (d50c0 <_GLOBAL__sub_I_internalTempThread+0x1c0>)
int currentPage = 1;
int page=0;
MCP9808 mcp = MCP9808();
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
   d4f08:	4f6e      	ldr	r7, [pc, #440]	; (d50c4 <_GLOBAL__sub_I_internalTempThread+0x1c4>)
   d4f0a:	f8df 8214 	ldr.w	r8, [pc, #532]	; d5120 <_GLOBAL__sub_I_internalTempThread+0x220>

const char* serviceUuid = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";//ble inits setting uuids
const char* rxUuid = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";//ble inits setting uuids
const char* txUuid = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";//ble inits setting uuids

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);//ble inits
   d4f0e:	f8df 9214 	ldr.w	r9, [pc, #532]	; d5124 <_GLOBAL__sub_I_internalTempThread+0x224>
   d4f12:	2500      	movs	r5, #0
   d4f14:	701d      	strb	r5, [r3, #0]
   d4f16:	4b6c      	ldr	r3, [pc, #432]	; (d50c8 <_GLOBAL__sub_I_internalTempThread+0x1c8>)
  }
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d4f18:	b08f      	sub	sp, #60	; 0x3c
   d4f1a:	2401      	movs	r4, #1
   d4f1c:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4f1e:	f000 fd43 	bl	d59a8 <HAL_Pin_Map>
#include <cstring>
#include "MCP9808.h"

#define UART_TX_BUF_SIZE        20

SYSTEM_THREAD(ENABLED);
   d4f22:	4629      	mov	r1, r5
   d4f24:	4620      	mov	r0, r4
   d4f26:	f000 ff1b 	bl	d5d60 <system_thread_set_state>

Thread internalTempThread;
   d4f2a:	4c68      	ldr	r4, [pc, #416]	; (d50cc <_GLOBAL__sub_I_internalTempThread+0x1cc>)

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f2c:	4868      	ldr	r0, [pc, #416]	; (d50d0 <_GLOBAL__sub_I_internalTempThread+0x1d0>)
   d4f2e:	4622      	mov	r2, r4
   d4f30:	4631      	mov	r1, r6
   d4f32:	6005      	str	r5, [r0, #0]
   d4f34:	f003 fafa 	bl	d852c <__aeabi_atexit>
   d4f38:	4866      	ldr	r0, [pc, #408]	; (d50d4 <_GLOBAL__sub_I_internalTempThread+0x1d4>)
Thread externalTempThread;
   d4f3a:	4622      	mov	r2, r4
   d4f3c:	4631      	mov	r1, r6
   d4f3e:	6005      	str	r5, [r0, #0]
   d4f40:	f003 faf4 	bl	d852c <__aeabi_atexit>
   d4f44:	4864      	ldr	r0, [pc, #400]	; (d50d8 <_GLOBAL__sub_I_internalTempThread+0x1d8>)
Thread timeThread;
   d4f46:	4622      	mov	r2, r4
   d4f48:	4631      	mov	r1, r6
   d4f4a:	6005      	str	r5, [r0, #0]
   d4f4c:	f003 faee 	bl	d852c <__aeabi_atexit>
   d4f50:	4862      	ldr	r0, [pc, #392]	; (d50dc <_GLOBAL__sub_I_internalTempThread+0x1dc>)
Thread screenWriteThread;
   d4f52:	4622      	mov	r2, r4
   d4f54:	4631      	mov	r1, r6
   d4f56:	6005      	str	r5, [r0, #0]
   d4f58:	f003 fae8 	bl	d852c <__aeabi_atexit>
   d4f5c:	4860      	ldr	r0, [pc, #384]	; (d50e0 <_GLOBAL__sub_I_internalTempThread+0x1e0>)
Thread stopWatchThread;
   d4f5e:	4622      	mov	r2, r4
   d4f60:	4631      	mov	r1, r6
   d4f62:	6005      	str	r5, [r0, #0]
   d4f64:	f003 fae2 	bl	d852c <__aeabi_atexit>
   d4f68:	485e      	ldr	r0, [pc, #376]	; (d50e4 <_GLOBAL__sub_I_internalTempThread+0x1e4>)
Thread cityWriteThread;
   d4f6a:	4622      	mov	r2, r4
   d4f6c:	4631      	mov	r1, r6
   d4f6e:	6005      	str	r5, [r0, #0]
   d4f70:	f003 fadc 	bl	d852c <__aeabi_atexit>
   d4f74:	485c      	ldr	r0, [pc, #368]	; (d50e8 <_GLOBAL__sub_I_internalTempThread+0x1e8>)
Thread encoderDialThread;
   d4f76:	4622      	mov	r2, r4
   d4f78:	4631      	mov	r1, r6
   d4f7a:	6005      	str	r5, [r0, #0]
   d4f7c:	f003 fad6 	bl	d852c <__aeabi_atexit>
   d4f80:	485a      	ldr	r0, [pc, #360]	; (d50ec <_GLOBAL__sub_I_internalTempThread+0x1ec>)
Thread dialCounterThread;
   d4f82:	4622      	mov	r2, r4
   d4f84:	4631      	mov	r1, r6
   d4f86:	6005      	str	r5, [r0, #0]
   d4f88:	f003 fad0 	bl	d852c <__aeabi_atexit>
bool previousA4=HIGH; // Previous value (High or Low) of A4
int counter = 0; // Value of encoder

int currentPage = 1;
int page=0;
MCP9808 mcp = MCP9808();
   d4f8c:	2118      	movs	r1, #24
   d4f8e:	4858      	ldr	r0, [pc, #352]	; (d50f0 <_GLOBAL__sub_I_internalTempThread+0x1f0>)
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
   d4f90:	4e58      	ldr	r6, [pc, #352]	; (d50f4 <_GLOBAL__sub_I_internalTempThread+0x1f4>)
bool previousA4=HIGH; // Previous value (High or Low) of A4
int counter = 0; // Value of encoder

int currentPage = 1;
int page=0;
MCP9808 mcp = MCP9808();
   d4f92:	f000 f8d5 	bl	d5140 <_ZN7MCP9808C1Eh>
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
   d4f96:	4639      	mov	r1, r7
   d4f98:	4640      	mov	r0, r8
   d4f9a:	f001 f8ed 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f9e:	4640      	mov	r0, r8
String global_lon = "";
   d4fa0:	f8df 8184 	ldr.w	r8, [pc, #388]	; d5128 <_GLOBAL__sub_I_internalTempThread+0x228>
int currentPage = 1;
int page=0;
MCP9808 mcp = MCP9808();
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
   d4fa4:	4622      	mov	r2, r4
   d4fa6:	4631      	mov	r1, r6
   d4fa8:	f003 fac0 	bl	d852c <__aeabi_atexit>
String global_lon = "";
   d4fac:	4639      	mov	r1, r7
   d4fae:	4640      	mov	r0, r8
   d4fb0:	f001 f8e2 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fb4:	4640      	mov	r0, r8
String global_city = "";
   d4fb6:	f8df 8174 	ldr.w	r8, [pc, #372]	; d512c <_GLOBAL__sub_I_internalTempThread+0x22c>
int page=0;
MCP9808 mcp = MCP9808();
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
String global_lon = "";
   d4fba:	4622      	mov	r2, r4
   d4fbc:	4631      	mov	r1, r6
   d4fbe:	f003 fab5 	bl	d852c <__aeabi_atexit>
String global_city = "";
   d4fc2:	4639      	mov	r1, r7
   d4fc4:	4640      	mov	r0, r8
   d4fc6:	f001 f8d7 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fca:	4640      	mov	r0, r8
String global_regionCode = "";
   d4fcc:	f8df 8160 	ldr.w	r8, [pc, #352]	; d5130 <_GLOBAL__sub_I_internalTempThread+0x230>
MCP9808 mcp = MCP9808();
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
String global_lon = "";
String global_city = "";
   d4fd0:	4622      	mov	r2, r4
   d4fd2:	4631      	mov	r1, r6
   d4fd4:	f003 faaa 	bl	d852c <__aeabi_atexit>
String global_regionCode = "";
   d4fd8:	4639      	mov	r1, r7
   d4fda:	4640      	mov	r0, r8
   d4fdc:	f001 f8cc 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fe0:	4640      	mov	r0, r8
String global_ip = ""; //through here
   d4fe2:	f8df 8150 	ldr.w	r8, [pc, #336]	; d5134 <_GLOBAL__sub_I_internalTempThread+0x234>
int lastResult = 0;
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
String global_lon = "";
String global_city = "";
String global_regionCode = "";
   d4fe6:	4622      	mov	r2, r4
   d4fe8:	4631      	mov	r1, r6
   d4fea:	f003 fa9f 	bl	d852c <__aeabi_atexit>
String global_ip = ""; //through here
   d4fee:	4639      	mov	r1, r7
   d4ff0:	4640      	mov	r0, r8
   d4ff2:	f001 f8c1 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d4ff6:	4640      	mov	r0, r8
int i = 0; //yeah this is here
float convertedTemp = 0;
String tempReceived;
   d4ff8:	f8df 813c 	ldr.w	r8, [pc, #316]	; d5138 <_GLOBAL__sub_I_internalTempThread+0x238>
unsigned int nextTime = 30;    // Next time to contact the server
String global_lat = ""; //variables for location data
String global_lon = "";
String global_city = "";
String global_regionCode = "";
String global_ip = ""; //through here
   d4ffc:	4622      	mov	r2, r4
   d4ffe:	4631      	mov	r1, r6
   d5000:	f003 fa94 	bl	d852c <__aeabi_atexit>
int i = 0; //yeah this is here
float convertedTemp = 0;
String tempReceived;
   d5004:	4639      	mov	r1, r7
   d5006:	4640      	mov	r0, r8
   d5008:	f001 f8b6 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d500c:	4622      	mov	r2, r4
   d500e:	4631      	mov	r1, r6
   d5010:	4640      	mov	r0, r8
class JsonParserStatic : public JsonParser {
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d5012:	4e39      	ldr	r6, [pc, #228]	; (d50f8 <_GLOBAL__sub_I_internalTempThread+0x1f8>)
   d5014:	f003 fa8a 	bl	d852c <__aeabi_atexit>
   d5018:	2332      	movs	r3, #50	; 0x32
   d501a:	9300      	str	r3, [sp, #0]
   d501c:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   d5020:	f506 730b 	add.w	r3, r6, #556	; 0x22c
   d5024:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5028:	4630      	mov	r0, r6
   d502a:	f000 f919 	bl	d5260 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
JsonParserStatic<512, 50> jsonParser;
   d502e:	4622      	mov	r2, r4
   d5030:	4b32      	ldr	r3, [pc, #200]	; (d50fc <_GLOBAL__sub_I_internalTempThread+0x1fc>)
   d5032:	4933      	ldr	r1, [pc, #204]	; (d5100 <_GLOBAL__sub_I_internalTempThread+0x200>)
   d5034:	6033      	str	r3, [r6, #0]
   d5036:	4630      	mov	r0, r6
   d5038:	f003 fa78 	bl	d852c <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d503c:	4e31      	ldr	r6, [pc, #196]	; (d5104 <_GLOBAL__sub_I_internalTempThread+0x204>)

const char* serviceUuid = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";//ble inits setting uuids
const char* rxUuid = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";//ble inits setting uuids
const char* txUuid = "6E400003-B5A3-F393-E0A9-E50E24DCCA9E";//ble inits setting uuids

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);//ble inits
   d503e:	4b32      	ldr	r3, [pc, #200]	; (d5108 <_GLOBAL__sub_I_internalTempThread+0x208>)
   d5040:	f8d9 8000 	ldr.w	r8, [r9]
   d5044:	6819      	ldr	r1, [r3, #0]
   d5046:	6035      	str	r5, [r6, #0]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d5048:	af09      	add	r7, sp, #36	; 0x24

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d504a:	6075      	str	r5, [r6, #4]
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d504c:	a804      	add	r0, sp, #16
   d504e:	f001 fa0c 	bl	d646a <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d5052:	4641      	mov	r1, r8
   d5054:	4638      	mov	r0, r7
   d5056:	f8df 80e4 	ldr.w	r8, [pc, #228]	; d513c <_GLOBAL__sub_I_internalTempThread+0x23c>
   d505a:	f001 fa06 	bl	d646a <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d505e:	ab04      	add	r3, sp, #16
   d5060:	4630      	mov	r0, r6
   d5062:	9502      	str	r5, [sp, #8]
   d5064:	9501      	str	r5, [sp, #4]
   d5066:	9700      	str	r7, [sp, #0]
   d5068:	2210      	movs	r2, #16
   d506a:	4928      	ldr	r1, [pc, #160]	; (d510c <_GLOBAL__sub_I_internalTempThread+0x20c>)
   d506c:	f002 f89e 	bl	d71ac <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d5070:	4622      	mov	r2, r4
   d5072:	4641      	mov	r1, r8
   d5074:	4630      	mov	r0, r6
   d5076:	f003 fa59 	bl	d852c <__aeabi_atexit>

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d507a:	4e25      	ldr	r6, [pc, #148]	; (d5110 <_GLOBAL__sub_I_internalTempThread+0x210>)
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, &rxCharacteristic);//ble inits
   d507c:	4b25      	ldr	r3, [pc, #148]	; (d5114 <_GLOBAL__sub_I_internalTempThread+0x214>)
   d507e:	f8d9 9000 	ldr.w	r9, [r9]
   d5082:	6819      	ldr	r1, [r3, #0]
   d5084:	6035      	str	r5, [r6, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5086:	6075      	str	r5, [r6, #4]
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d5088:	a804      	add	r0, sp, #16
   d508a:	f001 f9ee 	bl	d646a <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d508e:	4649      	mov	r1, r9
   d5090:	4638      	mov	r0, r7
   d5092:	f001 f9ea 	bl	d646a <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d5096:	4b20      	ldr	r3, [pc, #128]	; (d5118 <_GLOBAL__sub_I_internalTempThread+0x218>)
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	4630      	mov	r0, r6
   d509c:	ab04      	add	r3, sp, #16
   d509e:	9602      	str	r6, [sp, #8]
   d50a0:	9700      	str	r7, [sp, #0]
   d50a2:	2204      	movs	r2, #4
   d50a4:	491d      	ldr	r1, [pc, #116]	; (d511c <_GLOBAL__sub_I_internalTempThread+0x21c>)
   d50a6:	f002 f881 	bl	d71ac <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>
   d50aa:	4622      	mov	r2, r4
   d50ac:	4641      	mov	r1, r8
   d50ae:	4630      	mov	r0, r6
   d50b0:	f003 fa3c 	bl	d852c <__aeabi_atexit>
  }
}

void loop(){
  delay(CONCURRENT_WAIT_FOREVER);
   d50b4:	b00f      	add	sp, #60	; 0x3c
   d50b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d50ba:	bf00      	nop
   d50bc:	2003dd39 	.word	0x2003dd39
   d50c0:	000d4395 	.word	0x000d4395
   d50c4:	000da0a6 	.word	0x000da0a6
   d50c8:	2003dc90 	.word	0x2003dc90
   d50cc:	2003dc84 	.word	0x2003dc84
   d50d0:	2003ddbc 	.word	0x2003ddbc
   d50d4:	2003dcd4 	.word	0x2003dcd4
   d50d8:	2003e33c 	.word	0x2003e33c
   d50dc:	2003ddc8 	.word	0x2003ddc8
   d50e0:	2003dc88 	.word	0x2003dc88
   d50e4:	2003dc8c 	.word	0x2003dc8c
   d50e8:	2003e340 	.word	0x2003e340
   d50ec:	2003e318 	.word	0x2003e318
   d50f0:	2003dd34 	.word	0x2003dd34
   d50f4:	000d60eb 	.word	0x000d60eb
   d50f8:	2003ddcc 	.word	0x2003ddcc
   d50fc:	000d9af0 	.word	0x000d9af0
   d5100:	000d42e1 	.word	0x000d42e1
   d5104:	2003ddc0 	.word	0x2003ddc0
   d5108:	2003dbc8 	.word	0x2003dbc8
   d510c:	000d9e91 	.word	0x000d9e91
   d5110:	2003dc94 	.word	0x2003dc94
   d5114:	2003dbb4 	.word	0x2003dbb4
   d5118:	000d4545 	.word	0x000d4545
   d511c:	000d9e94 	.word	0x000d9e94
   d5120:	2003e31c 	.word	0x2003e31c
   d5124:	2003dbbc 	.word	0x2003dbbc
   d5128:	2003dcb0 	.word	0x2003dcb0
   d512c:	2003dcc0 	.word	0x2003dcc0
   d5130:	2003dd24 	.word	0x2003dd24
   d5134:	2003dca0 	.word	0x2003dca0
   d5138:	2003e32c 	.word	0x2003e32c
   d513c:	000d689f 	.word	0x000d689f

000d5140 <_ZN7MCP9808C1Eh>:
#include "MCP9808.h"

MCP9808::MCP9808(uint8_t addr){
	// Address can be changed from 0x18 to 0x1F, default is 0x18
	// Only the least significant bits can be modified with pins A0 to A2
	_i2cAddr = (MCP9808_DEFAULT_ADDRESS & addr == MCP9808_DEFAULT_ADDRESS) ? addr : MCP9808_DEFAULT_ADDRESS;
   d5140:	2318      	movs	r3, #24
   d5142:	7003      	strb	r3, [r0, #0]
}
   d5144:	4770      	bx	lr

000d5146 <_GLOBAL__sub_I__ZN7MCP9808C2Eh>:
   d5146:	f000 bc2f 	b.w	d59a8 <HAL_Pin_Map>

000d514a <_ZN7NtpTime9nowMillisEP11epochMillis>:

/*
 * Return the current time to the millisecond.
 */
void NtpTime::nowMillis(epochMillis* _now)
{
   d514a:	b570      	push	{r4, r5, r6, lr}
  if(!synced)
   d514c:	f890 6052 	ldrb.w	r6, [r0, #82]	; 0x52

/*
 * Return the current time to the millisecond.
 */
void NtpTime::nowMillis(epochMillis* _now)
{
   d5150:	4604      	mov	r4, r0
   d5152:	460d      	mov	r5, r1
  if(!synced)
   d5154:	b926      	cbnz	r6, d5160 <_ZN7NtpTime9nowMillisEP11epochMillis+0x16>
  {
    _now->seconds = Time.now();  //We haven't had a successful time request, so do the best we can.
   d5156:	f002 fac0 	bl	d76da <_ZN9TimeClass3nowEv>
    _now->millis = 0;
   d515a:	e885 0041 	stmia.w	r5, {r0, r6}
   d515e:	bd70      	pop	{r4, r5, r6, pc}
   d5160:	f000 fc72 	bl	d5a48 <HAL_Timer_Get_Milli_Seconds>
  }
  else
  {
    int nowMillis = (millis() - updateSystemMillis + NTPMillis);
   d5164:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d5166:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d5168:	1a9b      	subs	r3, r3, r2
   d516a:	4418      	add	r0, r3
    _now->seconds =  NTPTime - ntpTimeEpochStart + (nowMillis / 1000);
   d516c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d516e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d5170:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5174:	1a9b      	subs	r3, r3, r2
   d5176:	fb90 f2f1 	sdiv	r2, r0, r1
   d517a:	4413      	add	r3, r2
    _now->millis = nowMillis % 1000;
   d517c:	fb01 0012 	mls	r0, r1, r2, r0
    _now->millis = 0;
  }
  else
  {
    int nowMillis = (millis() - updateSystemMillis + NTPMillis);
    _now->seconds =  NTPTime - ntpTimeEpochStart + (nowMillis / 1000);
   d5180:	602b      	str	r3, [r5, #0]
    _now->millis = nowMillis % 1000;
   d5182:	6068      	str	r0, [r5, #4]
   d5184:	bd70      	pop	{r4, r5, r6, pc}

000d5186 <_GLOBAL__sub_I__ZN7NtpTimeC2Ev>:
   d5186:	f000 bc0f 	b.w	d59a8 <HAL_Pin_Map>
	...

000d518c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d518c:	b510      	push	{r4, lr}
   d518e:	4b05      	ldr	r3, [pc, #20]	; (d51a4 <_ZN10JsonBufferD1Ev+0x18>)
   d5190:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5192:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5194:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5196:	b91b      	cbnz	r3, d51a0 <_ZN10JsonBufferD1Ev+0x14>
   d5198:	6840      	ldr	r0, [r0, #4]
   d519a:	b108      	cbz	r0, d51a0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d519c:	f000 feac 	bl	d5ef8 <free>
	}
}
   d51a0:	4620      	mov	r0, r4
   d51a2:	bd10      	pop	{r4, pc}
   d51a4:	000d9f10 	.word	0x000d9f10

000d51a8 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d51a8:	b510      	push	{r4, lr}
   d51aa:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d51ac:	f7ff ffee 	bl	d518c <_ZN10JsonBufferD1Ev>
   d51b0:	4620      	mov	r0, r4
   d51b2:	2114      	movs	r1, #20
   d51b4:	f003 f9c8 	bl	d8548 <_ZdlPvj>
   d51b8:	4620      	mov	r0, r4
   d51ba:	bd10      	pop	{r4, pc}

000d51bc <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d51bc:	b510      	push	{r4, lr}
   d51be:	4b07      	ldr	r3, [pc, #28]	; (d51dc <_ZN10JsonParserD1Ev+0x20>)
   d51c0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d51c2:	7c03      	ldrb	r3, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d51c4:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d51c6:	b91b      	cbnz	r3, d51d0 <_ZN10JsonParserD1Ev+0x14>
   d51c8:	6940      	ldr	r0, [r0, #20]
   d51ca:	b108      	cbz	r0, d51d0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d51cc:	f000 fe94 	bl	d5ef8 <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d51d0:	4620      	mov	r0, r4
   d51d2:	f7ff ffdb 	bl	d518c <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d51d6:	4620      	mov	r0, r4
   d51d8:	bd10      	pop	{r4, pc}
   d51da:	bf00      	nop
   d51dc:	000d9f4c 	.word	0x000d9f4c

000d51e0 <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d51e0:	b510      	push	{r4, lr}
   d51e2:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d51e4:	f7ff ffea 	bl	d51bc <_ZN10JsonParserD1Ev>
   d51e8:	4620      	mov	r0, r4
   d51ea:	212c      	movs	r1, #44	; 0x2c
   d51ec:	f003 f9ac 	bl	d8548 <_ZdlPvj>
   d51f0:	4620      	mov	r0, r4
   d51f2:	bd10      	pop	{r4, pc}

000d51f4 <_ZN10JsonBuffer8allocateEj>:

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d51f4:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d51f6:	7c03      	ldrb	r3, [r0, #16]

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d51f8:	4604      	mov	r4, r0
   d51fa:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d51fc:	b10b      	cbz	r3, d5202 <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
   d51fe:	2000      	movs	r0, #0
   d5200:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
   d5202:	6840      	ldr	r0, [r0, #4]
   d5204:	b110      	cbz	r0, d520c <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
   d5206:	f000 fe7f 	bl	d5f08 <realloc>
   d520a:	e002      	b.n	d5212 <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
   d520c:	4608      	mov	r0, r1
   d520e:	f000 fe6b 	bl	d5ee8 <malloc>
		}
		if (newBuffer) {
   d5212:	2800      	cmp	r0, #0
   d5214:	d0f3      	beq.n	d51fe <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
   d5216:	6060      	str	r0, [r4, #4]
			bufferLen = len;
   d5218:	60a5      	str	r5, [r4, #8]
			return true;
   d521a:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
   d521c:	bd38      	pop	{r3, r4, r5, pc}

000d521e <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d521e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   d5220:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d5222:	460e      	mov	r6, r1
   d5224:	4604      	mov	r4, r0
   d5226:	4615      	mov	r5, r2
   d5228:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
   d522a:	b17b      	cbz	r3, d524c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d522c:	1853      	adds	r3, r2, r1
   d522e:	6882      	ldr	r2, [r0, #8]
   d5230:	4293      	cmp	r3, r2
   d5232:	d80b      	bhi.n	d524c <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
   d5234:	68e3      	ldr	r3, [r4, #12]
   d5236:	6860      	ldr	r0, [r4, #4]
   d5238:	462a      	mov	r2, r5
   d523a:	4631      	mov	r1, r6
   d523c:	4418      	add	r0, r3
   d523e:	f004 f80e 	bl	d925e <memcpy>
	offset += dataLen;
   d5242:	68e3      	ldr	r3, [r4, #12]
   d5244:	441d      	add	r5, r3
   d5246:	60e5      	str	r5, [r4, #12]

	return true;
   d5248:	2001      	movs	r0, #1
   d524a:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
   d524c:	4429      	add	r1, r5
   d524e:	4620      	mov	r0, r4
   d5250:	f7ff ffd0 	bl	d51f4 <_ZN10JsonBuffer8allocateEj>
   d5254:	2800      	cmp	r0, #0
   d5256:	d1ed      	bne.n	d5234 <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
   d5258:	bd70      	pop	{r4, r5, r6, pc}

000d525a <_ZN10JsonBuffer5clearEv>:

void JsonBuffer::clear() {
	offset = 0;
   d525a:	2300      	movs	r3, #0
   d525c:	60c3      	str	r3, [r0, #12]
   d525e:	4770      	bx	lr

000d5260 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d5260:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5262:	6082      	str	r2, [r0, #8]
   d5264:	2200      	movs	r2, #0
   d5266:	60c2      	str	r2, [r0, #12]
   d5268:	2201      	movs	r2, #1
   d526a:	7402      	strb	r2, [r0, #16]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d526c:	6143      	str	r3, [r0, #20]
   d526e:	4a03      	ldr	r2, [pc, #12]	; (d527c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d5270:	9b02      	ldr	r3, [sp, #8]
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5272:	6041      	str	r1, [r0, #4]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d5274:	6002      	str	r2, [r0, #0]
   d5276:	61c3      	str	r3, [r0, #28]

}
   d5278:	bd10      	pop	{r4, pc}
   d527a:	bf00      	nop
   d527c:	000d9f4c 	.word	0x000d9f4c

000d5280 <_ZNK10JsonParser14getOuterObjectEv>:
	return 0;
}


const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   d5280:	6943      	ldr	r3, [r0, #20]
   d5282:	6982      	ldr	r2, [r0, #24]
   d5284:	4293      	cmp	r3, r2
   d5286:	d205      	bcs.n	d5294 <_ZNK10JsonParser14getOuterObjectEv+0x14>
   d5288:	781a      	ldrb	r2, [r3, #0]
   d528a:	2a01      	cmp	r2, #1
   d528c:	bf0c      	ite	eq
   d528e:	4618      	moveq	r0, r3
   d5290:	2000      	movne	r0, #0
   d5292:	4770      	bx	lr
		return &tokens[0];
	}
	else {
		return 0;
   d5294:	2000      	movs	r0, #0
	}
}
   d5296:	4770      	bx	lr

000d5298 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d5298:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d529a:	6813      	ldr	r3, [r2, #0]
   d529c:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d529e:	6813      	ldr	r3, [r2, #0]
   d52a0:	f103 0410 	add.w	r4, r3, #16
   d52a4:	6014      	str	r4, [r2, #0]
   d52a6:	6986      	ldr	r6, [r0, #24]
   d52a8:	42b4      	cmp	r4, r6
   d52aa:	d20a      	bcs.n	d52c2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d52ac:	699b      	ldr	r3, [r3, #24]
   d52ae:	688c      	ldr	r4, [r1, #8]
   d52b0:	42a3      	cmp	r3, r4
   d52b2:	da01      	bge.n	d52b8 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d52b4:	429d      	cmp	r5, r3
   d52b6:	daf2      	bge.n	d529e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   d52b8:	42a3      	cmp	r3, r4
   d52ba:	bfcc      	ite	gt
   d52bc:	2000      	movgt	r0, #0
   d52be:	2001      	movle	r0, #1
   d52c0:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
   d52c2:	2000      	movs	r0, #0
	}
	return true;
}
   d52c4:	bd70      	pop	{r4, r5, r6, pc}

000d52c6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d52c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d52ca:	ad02      	add	r5, sp, #8
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d52cc:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d52ce:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d52d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d52d4:	f845 3d04 	str.w	r3, [r5, #-4]!
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d52d8:	4607      	mov	r7, r0
   d52da:	460c      	mov	r4, r1
   d52dc:	4691      	mov	r9, r2

	size_t index = 0;
   d52de:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d52e2:	9b01      	ldr	r3, [sp, #4]
   d52e4:	69ba      	ldr	r2, [r7, #24]
   d52e6:	429a      	cmp	r2, r3
   d52e8:	d91e      	bls.n	d5328 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
   d52ea:	6899      	ldr	r1, [r3, #8]
   d52ec:	68a2      	ldr	r2, [r4, #8]
   d52ee:	4291      	cmp	r1, r2
   d52f0:	da1a      	bge.n	d5328 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
   d52f2:	45b0      	cmp	r8, r6
   d52f4:	d10b      	bne.n	d530e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
   d52f6:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
   d52fa:	462a      	mov	r2, r5
   d52fc:	4621      	mov	r1, r4
   d52fe:	4638      	mov	r0, r7
   d5300:	f7ff ffca 	bl	d5298 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d5304:	b118      	cbz	r0, d530e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
   d5306:	9b01      	ldr	r3, [sp, #4]
   d5308:	f8ca 3000 	str.w	r3, [sl]
				return true;
   d530c:	e00d      	b.n	d532a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
   d530e:	462a      	mov	r2, r5
   d5310:	4621      	mov	r1, r4
   d5312:	4638      	mov	r0, r7
   d5314:	f7ff ffc0 	bl	d5298 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d5318:	462a      	mov	r2, r5
   d531a:	4621      	mov	r1, r4
   d531c:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
   d531e:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
   d5322:	f7ff ffb9 	bl	d5298 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d5326:	e7dc      	b.n	d52e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
   d5328:	2000      	movs	r0, #0
}
   d532a:	b002      	add	sp, #8
   d532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5330 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d5330:	b538      	push	{r3, r4, r5, lr}
   d5332:	4604      	mov	r4, r0
	if (str) {
   d5334:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d5336:	460d      	mov	r5, r1
	if (str) {
   d5338:	b110      	cbz	r0, d5340 <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
   d533a:	f000 ffaa 	bl	d6292 <_ZN6String6concatEc>
   d533e:	e007      	b.n	d5350 <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
   d5340:	6861      	ldr	r1, [r4, #4]
   d5342:	b129      	cbz	r1, d5350 <_ZN16JsonParserString6appendEc+0x20>
   d5344:	68a3      	ldr	r3, [r4, #8]
   d5346:	68e2      	ldr	r2, [r4, #12]
   d5348:	3b01      	subs	r3, #1
   d534a:	429a      	cmp	r2, r3
			buf[length] = ch;
   d534c:	bf38      	it	cc
   d534e:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
   d5350:	68e3      	ldr	r3, [r4, #12]
   d5352:	3301      	adds	r3, #1
   d5354:	60e3      	str	r3, [r4, #12]
   d5356:	bd38      	pop	{r3, r4, r5, pc}

000d5358 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
   d5358:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d535a:	b570      	push	{r4, r5, r6, lr}
   d535c:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
   d535e:	d801      	bhi.n	d5364 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
   d5360:	b2c1      	uxtb	r1, r0
   d5362:	e019      	b.n	d5398 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
   d5364:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   d5368:	ea4f 15a0 	mov.w	r5, r0, asr #6
   d536c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
   d5370:	d203      	bcs.n	d537a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
   d5372:	f065 013f 	orn	r1, r5, #63	; 0x3f
   d5376:	b2c9      	uxtb	r1, r1
   d5378:	e009      	b.n	d538e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
   d537a:	0b01      	lsrs	r1, r0, #12
   d537c:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
   d5380:	4620      	mov	r0, r4
   d5382:	f7ff ffd5 	bl	d5330 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
   d5386:	f005 013f 	and.w	r1, r5, #63	; 0x3f
   d538a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d538e:	4620      	mov	r0, r4
   d5390:	f7ff ffce 	bl	d5330 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d5394:	f046 0180 	orr.w	r1, r6, #128	; 0x80
   d5398:	4620      	mov	r0, r4
	}
}
   d539a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d539e:	f7ff bfc7 	b.w	d5330 <_ZN16JsonParserString6appendEc>
	...

000d53a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d53a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d53a8:	684d      	ldr	r5, [r1, #4]
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d53aa:	4680      	mov	r8, r0
   d53ac:	460f      	mov	r7, r1
   d53ae:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;
   d53b0:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
   d53b2:	68b8      	ldr	r0, [r7, #8]
   d53b4:	4285      	cmp	r5, r0
   d53b6:	da46      	bge.n	d5446 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa2>
   d53b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
   d53bc:	b3cc      	cbz	r4, d5432 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8e>
			escape = false;
			switch(buffer[ii]) {
   d53be:	5d59      	ldrb	r1, [r3, r5]
   d53c0:	296e      	cmp	r1, #110	; 0x6e
   d53c2:	eb03 0205 	add.w	r2, r3, r5
   d53c6:	d00f      	beq.n	d53e8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
   d53c8:	d805      	bhi.n	d53d6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x32>
   d53ca:	2962      	cmp	r1, #98	; 0x62
   d53cc:	d00a      	beq.n	d53e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x40>
   d53ce:	2966      	cmp	r1, #102	; 0x66
   d53d0:	d10b      	bne.n	d53ea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d53d2:	210c      	movs	r1, #12
   d53d4:	e009      	b.n	d53ea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
   d53d6:	2974      	cmp	r1, #116	; 0x74
   d53d8:	d00e      	beq.n	d53f8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x54>
   d53da:	2975      	cmp	r1, #117	; 0x75
   d53dc:	d00e      	beq.n	d53fc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x58>
   d53de:	2972      	cmp	r1, #114	; 0x72
   d53e0:	d103      	bne.n	d53ea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
   d53e2:	e007      	b.n	d53f4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x50>
			case 'b':
				str.append('\b');
   d53e4:	2108      	movs	r1, #8
   d53e6:	e000      	b.n	d53ea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
   d53e8:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d53ea:	4630      	mov	r0, r6
   d53ec:	f7ff ffa0 	bl	d5330 <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
   d53f0:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
   d53f2:	e026      	b.n	d5442 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
   d53f4:	210d      	movs	r1, #13
   d53f6:	e7f8      	b.n	d53ea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 't':
				str.append('\t');
   d53f8:	2109      	movs	r1, #9
   d53fa:	e7f6      	b.n	d53ea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
   d53fc:	1d2b      	adds	r3, r5, #4
   d53fe:	4298      	cmp	r0, r3
   d5400:	ddf6      	ble.n	d53f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
   d5402:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
   d5404:	a802      	add	r0, sp, #8
   d5406:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d540a:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
   d540c:	3301      	adds	r3, #1
   d540e:	2b04      	cmp	r3, #4
   d5410:	d1f8      	bne.n	d5404 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x60>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d5412:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d5414:	aa01      	add	r2, sp, #4
   d5416:	490e      	ldr	r1, [pc, #56]	; (d5450 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xac>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d5418:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d541c:	f000 fd84 	bl	d5f28 <sscanf>
   d5420:	2801      	cmp	r0, #1
   d5422:	d1e5      	bne.n	d53f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
						appendUtf8((uint16_t)unicode, str);
   d5424:	4631      	mov	r1, r6
   d5426:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d542a:	f7ff ff95 	bl	d5358 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d542e:	3505      	adds	r5, #5
   d5430:	e7de      	b.n	d53f0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
   d5432:	5d59      	ldrb	r1, [r3, r5]
   d5434:	295c      	cmp	r1, #92	; 0x5c
   d5436:	d003      	beq.n	d5440 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
   d5438:	4630      	mov	r0, r6
   d543a:	f7ff ff79 	bl	d5330 <_ZN16JsonParserString6appendEc>
   d543e:	e000      	b.n	d5442 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
   d5440:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d5442:	3501      	adds	r5, #1
   d5444:	e7b5      	b.n	d53b2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
   d5446:	2001      	movs	r0, #1
   d5448:	b004      	add	sp, #16
   d544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d544e:	bf00      	nop
   d5450:	000d9f1c 	.word	0x000d9f1c

000d5454 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d5454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5456:	460c      	mov	r4, r1
   d5458:	4606      	mov	r6, r0

	result = "";
   d545a:	490c      	ldr	r1, [pc, #48]	; (d548c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d545c:	4610      	mov	r0, r2
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d545e:	4615      	mov	r5, r2

	result = "";
   d5460:	f000 fedc 	bl	d621c <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d5464:	68a3      	ldr	r3, [r4, #8]
   d5466:	6861      	ldr	r1, [r4, #4]
   d5468:	1a59      	subs	r1, r3, r1
   d546a:	3101      	adds	r1, #1
   d546c:	4628      	mov	r0, r5
   d546e:	f000 fe5a 	bl	d6126 <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d5472:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d5474:	466a      	mov	r2, sp
   d5476:	4621      	mov	r1, r4
   d5478:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d547a:	9500      	str	r5, [sp, #0]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	9302      	str	r3, [sp, #8]
   d5480:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d5482:	f7ff ff8f 	bl	d53a4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d5486:	b004      	add	sp, #16
   d5488:	bd70      	pop	{r4, r5, r6, pc}
   d548a:	bf00      	nop
   d548c:	000da0a6 	.word	0x000da0a6

000d5490 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d5490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5494:	b089      	sub	sp, #36	; 0x24
   d5496:	4606      	mov	r6, r0
   d5498:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d549a:	a804      	add	r0, sp, #16
   d549c:	4911      	ldr	r1, [pc, #68]	; (d54e4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d549e:	4690      	mov	r8, r2
   d54a0:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d54a2:	f000 fe69 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d54a6:	2500      	movs	r5, #0
   d54a8:	9500      	str	r5, [sp, #0]
   d54aa:	464b      	mov	r3, r9
   d54ac:	aa03      	add	r2, sp, #12
   d54ae:	4639      	mov	r1, r7
   d54b0:	4630      	mov	r0, r6
   d54b2:	f7ff ff08 	bl	d52c6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d54b6:	4604      	mov	r4, r0
   d54b8:	b168      	cbz	r0, d54d6 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
   d54ba:	aa04      	add	r2, sp, #16
   d54bc:	9903      	ldr	r1, [sp, #12]
   d54be:	4630      	mov	r0, r6
   d54c0:	f7ff ffc8 	bl	d5454 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d54c4:	4604      	mov	r4, r0
   d54c6:	b120      	cbz	r0, d54d2 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d54c8:	4641      	mov	r1, r8
   d54ca:	a804      	add	r0, sp, #16
   d54cc:	f000 ff0c 	bl	d62e8 <_ZNK6String6equalsEPKc>
   d54d0:	b908      	cbnz	r0, d54d6 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d54d2:	3501      	adds	r5, #1
   d54d4:	e7e8      	b.n	d54a8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d54d6:	a804      	add	r0, sp, #16
   d54d8:	f000 fe07 	bl	d60ea <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
   d54dc:	4620      	mov	r0, r4
   d54de:	b009      	add	sp, #36	; 0x24
   d54e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d54e4:	000da0a6 	.word	0x000da0a6

000d54e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d54e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d54ec:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d54ee:	f04f 35ff 	mov.w	r5, #4294967295
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d54f2:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d54f6:	f8d0 c000 	ldr.w	ip, [r0]
   d54fa:	4594      	cmp	ip, r2
   d54fc:	f080 819e 	bcs.w	d583c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
   d5500:	f811 800c 	ldrb.w	r8, [r1, ip]
   d5504:	f1b8 0f00 	cmp.w	r8, #0
   d5508:	f000 8198 	beq.w	d583c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d550c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d5510:	f000 8116 	beq.w	d5740 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
   d5514:	d818      	bhi.n	d5548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
   d5516:	f1b8 0f0d 	cmp.w	r8, #13
   d551a:	f000 818b 	beq.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d551e:	d806      	bhi.n	d552e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
   d5520:	f1a8 0809 	sub.w	r8, r8, #9
   d5524:	f1b8 0f01 	cmp.w	r8, #1
   d5528:	f240 8184 	bls.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d552c:	e13d      	b.n	d57aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d552e:	f1b8 0f20 	cmp.w	r8, #32
   d5532:	f000 817f 	beq.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d5536:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d553a:	f040 8136 	bne.w	d57aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
   d553e:	f10c 0901 	add.w	r9, ip, #1
   d5542:	f8c0 9000 	str.w	r9, [r0]
   d5546:	e092      	b.n	d566e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d5548:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d554c:	d03c      	beq.n	d55c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d554e:	d807      	bhi.n	d5560 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
   d5550:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d5554:	f000 80f0 	beq.w	d5738 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
   d5558:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d555c:	d007      	beq.n	d556e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d555e:	e124      	b.n	d57aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d5560:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d5564:	d003      	beq.n	d556e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d5566:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d556a:	d02d      	beq.n	d55c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d556c:	e11d      	b.n	d57aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
   d556e:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d5570:	2b00      	cmp	r3, #0
   d5572:	f000 815f 	beq.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d5576:	6847      	ldr	r7, [r0, #4]
   d5578:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d557a:	42be      	cmp	r6, r7
   d557c:	f240 817d 	bls.w	d587a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x392>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d5580:	f107 0c01 	add.w	ip, r7, #1
   d5584:	f8c0 c004 	str.w	ip, [r0, #4]
   d5588:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   d558c:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
   d5590:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5592:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
   d5596:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d559a:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
   d559e:	6887      	ldr	r7, [r0, #8]
   d55a0:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d55a2:	bf1f      	itttt	ne
   d55a4:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d55a8:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d55ac:	3701      	addne	r7, #1
   d55ae:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d55b2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d55b6:	bf14      	ite	ne
   d55b8:	2702      	movne	r7, #2
   d55ba:	2701      	moveq	r7, #1
   d55bc:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
   d55c0:	6807      	ldr	r7, [r0, #0]
   d55c2:	f8ca 7004 	str.w	r7, [sl, #4]
   d55c6:	e0b7      	b.n	d5738 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d55c8:	2b00      	cmp	r3, #0
   d55ca:	f000 8133 	beq.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d55ce:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d55d0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d55d4:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
   d55d8:	f108 38ff 	add.w	r8, r8, #4294967295
   d55dc:	bf14      	ite	ne
   d55de:	f04f 0a02 	movne.w	sl, #2
   d55e2:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d55e6:	f107 39ff 	add.w	r9, r7, #4294967295
   d55ea:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   d55ee:	f1b9 0f00 	cmp.w	r9, #0
   d55f2:	db19      	blt.n	d5628 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d55f4:	f8d8 7004 	ldr.w	r7, [r8, #4]
   d55f8:	3701      	adds	r7, #1
   d55fa:	d010      	beq.n	d561e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
   d55fc:	f8d8 7008 	ldr.w	r7, [r8, #8]
   d5600:	1c7e      	adds	r6, r7, #1
   d5602:	d10c      	bne.n	d561e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
   d5604:	f898 b000 	ldrb.w	fp, [r8]
   d5608:	45d3      	cmp	fp, sl
   d560a:	f040 8129 	bne.w	d5860 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d560e:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d5610:	f10c 0701 	add.w	r7, ip, #1
   d5614:	f8c8 7008 	str.w	r7, [r8, #8]
   d5618:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
   d561c:	e011      	b.n	d5642 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d561e:	f109 39ff 	add.w	r9, r9, #4294967295
   d5622:	f1a8 0810 	sub.w	r8, r8, #16
   d5626:	e7e2      	b.n	d55ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d5628:	f1b9 3fff 	cmp.w	r9, #4294967295
   d562c:	f040 8102 	bne.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d5630:	e116      	b.n	d5860 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
				for (; i >= 0; i--) {
   d5632:	f109 39ff 	add.w	r9, r9, #4294967295
   d5636:	f1b9 3fff 	cmp.w	r9, #4294967295
   d563a:	f1ac 0c10 	sub.w	ip, ip, #16
   d563e:	f000 80f9 	beq.w	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d5642:	f8dc 7004 	ldr.w	r7, [ip, #4]
   d5646:	3701      	adds	r7, #1
   d5648:	d0f3      	beq.n	d5632 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
   d564a:	f8dc 7008 	ldr.w	r7, [ip, #8]
   d564e:	3701      	adds	r7, #1
   d5650:	d1ef      	bne.n	d5632 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
   d5652:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
   d5656:	e0ed      	b.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5658:	f811 7008 	ldrb.w	r7, [r1, r8]
   d565c:	2f00      	cmp	r7, #0
   d565e:	d068      	beq.n	d5732 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
   d5660:	2f22      	cmp	r7, #34	; 0x22
   d5662:	d009      	beq.n	d5678 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d5664:	2f5c      	cmp	r7, #92	; 0x5c
   d5666:	d026      	beq.n	d56b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5668:	6807      	ldr	r7, [r0, #0]
   d566a:	3701      	adds	r7, #1
   d566c:	6007      	str	r7, [r0, #0]
   d566e:	f8d0 8000 	ldr.w	r8, [r0]
   d5672:	4542      	cmp	r2, r8
   d5674:	d8f0      	bhi.n	d5658 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
   d5676:	e05c      	b.n	d5732 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
   d5678:	2b00      	cmp	r3, #0
   d567a:	f000 80ce 	beq.w	d581a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d567e:	6847      	ldr	r7, [r0, #4]
   d5680:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5682:	42be      	cmp	r6, r7
   d5684:	f240 80f7 	bls.w	d5876 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d5688:	f107 0c01 	add.w	ip, r7, #1
   d568c:	013f      	lsls	r7, r7, #4
   d568e:	f8c0 c004 	str.w	ip, [r0, #4]
   d5692:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d5696:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5698:	f8cc 5008 	str.w	r5, [ip, #8]
   d569c:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
   d56a0:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d56a4:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d56a8:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
   d56ac:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
   d56b0:	f8cc 8008 	str.w	r8, [ip, #8]
   d56b4:	e0b1      	b.n	d581a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d56b6:	f108 0701 	add.w	r7, r8, #1
   d56ba:	42ba      	cmp	r2, r7
   d56bc:	d9d4      	bls.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
   d56be:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d56c0:	5dcf      	ldrb	r7, [r1, r7]
   d56c2:	2f66      	cmp	r7, #102	; 0x66
   d56c4:	d0d0      	beq.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d56c6:	d808      	bhi.n	d56da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
   d56c8:	2f2f      	cmp	r7, #47	; 0x2f
   d56ca:	d0cd      	beq.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d56cc:	d801      	bhi.n	d56d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
   d56ce:	2f22      	cmp	r7, #34	; 0x22
   d56d0:	e007      	b.n	d56e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d56d2:	2f5c      	cmp	r7, #92	; 0x5c
   d56d4:	d0c8      	beq.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d56d6:	2f62      	cmp	r7, #98	; 0x62
   d56d8:	e003      	b.n	d56e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d56da:	2f72      	cmp	r7, #114	; 0x72
   d56dc:	d0c4      	beq.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d56de:	d802      	bhi.n	d56e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
   d56e0:	2f6e      	cmp	r7, #110	; 0x6e
   d56e2:	d175      	bne.n	d57d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
   d56e4:	e7c0      	b.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d56e6:	2f74      	cmp	r7, #116	; 0x74
   d56e8:	d0be      	beq.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d56ea:	2f75      	cmp	r7, #117	; 0x75
   d56ec:	d170      	bne.n	d57d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
   d56ee:	f108 0702 	add.w	r7, r8, #2
   d56f2:	6007      	str	r7, [r0, #0]
   d56f4:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d56f8:	f8d0 8000 	ldr.w	r8, [r0]
   d56fc:	4542      	cmp	r2, r8
   d56fe:	d803      	bhi.n	d5708 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
   d5700:	6807      	ldr	r7, [r0, #0]
   d5702:	3f01      	subs	r7, #1
   d5704:	6007      	str	r7, [r0, #0]
   d5706:	e7af      	b.n	d5668 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5708:	f811 7008 	ldrb.w	r7, [r1, r8]
   d570c:	2f00      	cmp	r7, #0
   d570e:	d0f7      	beq.n	d5700 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d5710:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d5714:	f1bb 0f09 	cmp.w	fp, #9
   d5718:	d904      	bls.n	d5724 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
   d571a:	f027 0720 	bic.w	r7, r7, #32
   d571e:	3f41      	subs	r7, #65	; 0x41
   d5720:	2f05      	cmp	r7, #5
   d5722:	d855      	bhi.n	d57d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d5724:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5728:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d572c:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d572e:	d1e3      	bne.n	d56f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
   d5730:	e7e6      	b.n	d5700 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
   d5732:	f8c0 c000 	str.w	ip, [r0]
   d5736:	e09a      	b.n	d586e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   d5738:	6847      	ldr	r7, [r0, #4]
   d573a:	3f01      	subs	r7, #1
   d573c:	6087      	str	r7, [r0, #8]
				break;
   d573e:	e079      	b.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
   d5740:	2b00      	cmp	r3, #0
   d5742:	d077      	beq.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d5744:	6887      	ldr	r7, [r0, #8]
   d5746:	1c7e      	adds	r6, r7, #1
   d5748:	d074      	beq.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d574a:	013f      	lsls	r7, r7, #4
   d574c:	5ddf      	ldrb	r7, [r3, r7]
   d574e:	3f01      	subs	r7, #1
   d5750:	2f01      	cmp	r7, #1
   d5752:	d96f      	bls.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5754:	6847      	ldr	r7, [r0, #4]
   d5756:	f107 38ff 	add.w	r8, r7, #4294967295
   d575a:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d575e:	f1b8 0f00 	cmp.w	r8, #0
   d5762:	db67      	blt.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d5764:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
   d5768:	3f01      	subs	r7, #1
   d576a:	2f01      	cmp	r7, #1
   d576c:	d80a      	bhi.n	d5784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d576e:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   d5772:	3701      	adds	r7, #1
   d5774:	d006      	beq.n	d5784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
   d5776:	f85c 7c08 	ldr.w	r7, [ip, #-8]
   d577a:	3701      	adds	r7, #1
   d577c:	d102      	bne.n	d5784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
   d577e:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d5782:	e057      	b.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5784:	f108 38ff 	add.w	r8, r8, #4294967295
   d5788:	f1ac 0c10 	sub.w	ip, ip, #16
   d578c:	e7e7      	b.n	d575e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d578e:	f811 7008 	ldrb.w	r7, [r1, r8]
   d5792:	b307      	cbz	r7, d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d5794:	2f20      	cmp	r7, #32
   d5796:	d01e      	beq.n	d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5798:	d810      	bhi.n	d57bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
   d579a:	2f09      	cmp	r7, #9
   d579c:	d20a      	bcs.n	d57b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d579e:	3f20      	subs	r7, #32
   d57a0:	2f5e      	cmp	r7, #94	; 0x5e
   d57a2:	d815      	bhi.n	d57d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d57a4:	f108 0701 	add.w	r7, r8, #1
   d57a8:	6007      	str	r7, [r0, #0]
   d57aa:	f8d0 8000 	ldr.w	r8, [r0]
   d57ae:	4542      	cmp	r2, r8
   d57b0:	d8ed      	bhi.n	d578e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
   d57b2:	e010      	b.n	d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d57b4:	2f0a      	cmp	r7, #10
   d57b6:	d90e      	bls.n	d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d57b8:	2f0d      	cmp	r7, #13
   d57ba:	e007      	b.n	d57cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d57bc:	2f3a      	cmp	r7, #58	; 0x3a
   d57be:	d00a      	beq.n	d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d57c0:	d801      	bhi.n	d57c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
   d57c2:	2f2c      	cmp	r7, #44	; 0x2c
   d57c4:	e002      	b.n	d57cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d57c6:	2f5d      	cmp	r7, #93	; 0x5d
   d57c8:	d005      	beq.n	d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d57ca:	2f7d      	cmp	r7, #125	; 0x7d
   d57cc:	d1e7      	bne.n	d579e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
   d57ce:	e002      	b.n	d57d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
   d57d0:	f8c0 c000 	str.w	ip, [r0]
   d57d4:	e044      	b.n	d5860 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
   d57d6:	b913      	cbnz	r3, d57de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
   d57d8:	f108 37ff 	add.w	r7, r8, #4294967295
   d57dc:	e01c      	b.n	d5818 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d57de:	6847      	ldr	r7, [r0, #4]
   d57e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d57e2:	42be      	cmp	r6, r7
   d57e4:	d947      	bls.n	d5876 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d57e6:	f107 0801 	add.w	r8, r7, #1
   d57ea:	013f      	lsls	r7, r7, #4
   d57ec:	f8c0 8004 	str.w	r8, [r0, #4]
   d57f0:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d57f4:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d57f6:	f8c8 5008 	str.w	r5, [r8, #8]
   d57fa:	f8c8 5004 	str.w	r5, [r8, #4]
	tok->size = 0;
   d57fe:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d5802:	f04f 0604 	mov.w	r6, #4
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d5806:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d580a:	55de      	strb	r6, [r3, r7]
	token->start = start;
   d580c:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
   d5810:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
   d5814:	6807      	ldr	r7, [r0, #0]
   d5816:	3f01      	subs	r7, #1
   d5818:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
   d581a:	6887      	ldr	r7, [r0, #8]
   d581c:	1c7e      	adds	r6, r7, #1
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
   d581e:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d5822:	d007      	beq.n	d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d5824:	b133      	cbz	r3, d5834 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					tokens[parser->toksuper].size++;
   d5826:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d582a:	f8dc 700c 	ldr.w	r7, [ip, #12]
   d582e:	3701      	adds	r7, #1
   d5830:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5834:	6807      	ldr	r7, [r0, #0]
   d5836:	3701      	adds	r7, #1
   d5838:	6007      	str	r7, [r0, #0]
   d583a:	e65c      	b.n	d54f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
   d583c:	b1a3      	cbz	r3, d5868 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d583e:	6842      	ldr	r2, [r0, #4]
   d5840:	1e51      	subs	r1, r2, #1
   d5842:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d5846:	2900      	cmp	r1, #0
   d5848:	db0e      	blt.n	d5868 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d584a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d584e:	3201      	adds	r2, #1
   d5850:	d003      	beq.n	d585a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x372>
   d5852:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d5856:	3201      	adds	r2, #1
   d5858:	d009      	beq.n	d586e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
   d585a:	3901      	subs	r1, #1
   d585c:	3b10      	subs	r3, #16
   d585e:	e7f2      	b.n	d5846 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
   d5860:	f06f 0001 	mvn.w	r0, #1
   d5864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5868:	4620      	mov	r0, r4
   d586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
   d586e:	f06f 0002 	mvn.w	r0, #2
   d5872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
   d5876:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
   d587a:	f04f 30ff 	mov.w	r0, #4294967295
   d587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5882 <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d5882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
   d5884:	6943      	ldr	r3, [r0, #20]
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d5886:	4604      	mov	r4, r0
   d5888:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   d588c:	b1f3      	cbz	r3, d58cc <_ZN10JsonParser5parseEv+0x4a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d588e:	2200      	movs	r2, #0
   d5890:	6202      	str	r2, [r0, #32]
	parser->toknext = 0;
   d5892:	6242      	str	r2, [r0, #36]	; 0x24
	parser->toksuper = -1;
   d5894:	f04f 32ff 	mov.w	r2, #4294967295
   d5898:	6282      	str	r2, [r0, #40]	; 0x28

bool JsonParser::parse() {
	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d589a:	69c2      	ldr	r2, [r0, #28]
   d589c:	9200      	str	r2, [sp, #0]
   d589e:	68c2      	ldr	r2, [r0, #12]
   d58a0:	6841      	ldr	r1, [r0, #4]
   d58a2:	4630      	mov	r0, r6
   d58a4:	f7ff fe20 	bl	d54e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d58a8:	1c43      	adds	r3, r0, #1
   d58aa:	d109      	bne.n	d58c0 <_ZN10JsonParser5parseEv+0x3e>
			if (staticBuffers) {
   d58ac:	7c25      	ldrb	r5, [r4, #16]
   d58ae:	b10d      	cbz	r5, d58b4 <_ZN10JsonParser5parseEv+0x32>
				// If using static buffers and there is not enough space, fail
				return false;
   d58b0:	2000      	movs	r0, #0
   d58b2:	e033      	b.n	d591c <_ZN10JsonParser5parseEv+0x9a>
			}
			free(tokens);
   d58b4:	6960      	ldr	r0, [r4, #20]
   d58b6:	f000 fb1f 	bl	d5ef8 <free>
			tokens = 0;
   d58ba:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d58bc:	61e5      	str	r5, [r4, #28]
   d58be:	e005      	b.n	d58cc <_ZN10JsonParser5parseEv+0x4a>
		}
		else
		if (result < 0) {
   d58c0:	2800      	cmp	r0, #0
   d58c2:	dbf5      	blt.n	d58b0 <_ZN10JsonParser5parseEv+0x2e>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
   d58c4:	6963      	ldr	r3, [r4, #20]
   d58c6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   d58ca:	e025      	b.n	d5918 <_ZN10JsonParser5parseEv+0x96>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d58cc:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
   d58ce:	f04f 37ff 	mov.w	r7, #4294967295
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d58d2:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d58d4:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d58d6:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d58d8:	9500      	str	r5, [sp, #0]
   d58da:	462b      	mov	r3, r5
   d58dc:	68e2      	ldr	r2, [r4, #12]
   d58de:	6861      	ldr	r1, [r4, #4]
   d58e0:	4630      	mov	r0, r6
   d58e2:	f7ff fe01 	bl	d54e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d58e6:	2800      	cmp	r0, #0
   d58e8:	dbe2      	blt.n	d58b0 <_ZN10JsonParser5parseEv+0x2e>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
   d58ea:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d58ec:	d013      	beq.n	d5916 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d58ee:	0100      	lsls	r0, r0, #4
   d58f0:	f000 fafa 	bl	d5ee8 <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d58f4:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d58f6:	6160      	str	r0, [r4, #20]
   d58f8:	4603      	mov	r3, r0

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d58fa:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d58fc:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d58fe:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d5900:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5902:	68e2      	ldr	r2, [r4, #12]
   d5904:	6861      	ldr	r1, [r4, #4]
   d5906:	4630      	mov	r0, r6
   d5908:	f7ff fdee 	bl	d54e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
   d590c:	6963      	ldr	r3, [r4, #20]
   d590e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d5912:	61a0      	str	r0, [r4, #24]
   d5914:	e001      	b.n	d591a <_ZN10JsonParser5parseEv+0x98>
	}
	else {
		tokensEnd = tokens;
   d5916:	6963      	ldr	r3, [r4, #20]
   d5918:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
   d591a:	2001      	movs	r0, #1
}
   d591c:	b003      	add	sp, #12
   d591e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5920 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5920:	f000 b842 	b.w	d59a8 <HAL_Pin_Map>

000d5924 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d5924:	4b02      	ldr	r3, [pc, #8]	; (d5930 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d5926:	2201      	movs	r2, #1
   d5928:	701a      	strb	r2, [r3, #0]
   d592a:	f000 b83d 	b.w	d59a8 <HAL_Pin_Map>
   d592e:	bf00      	nop
   d5930:	2003e344 	.word	0x2003e344

000d5934 <_GLOBAL__sub_I__ZN8NexGaugeC2EhhPKcPv>:
   d5934:	f000 b838 	b.w	d59a8 <HAL_Pin_Map>

000d5938 <_GLOBAL__sub_I__Z14NexSendCommandPKcz>:
   d5938:	f000 b836 	b.w	d59a8 <HAL_Pin_Map>

000d593c <_GLOBAL__sub_I__ZN14NexProgressBarC2EhhPKcPv>:
   d593c:	f000 b834 	b.w	d59a8 <HAL_Pin_Map>

000d5940 <_GLOBAL__sub_I__ZN11NexWaveformC2EhhPKcPv>:
   d5940:	f000 b832 	b.w	d59a8 <HAL_Pin_Map>

000d5944 <_GLOBAL__sub_I__ZN9NexButtonC2EhhPKcPv>:
   d5944:	f000 b830 	b.w	d59a8 <HAL_Pin_Map>

000d5948 <_GLOBAL__sub_I__ZN8NexTimerC2EhhPKcPv>:
   d5948:	f000 b82e 	b.w	d59a8 <HAL_Pin_Map>

000d594c <_GLOBAL__sub_I__ZN6NexVarC2EhhPKc>:
   d594c:	f000 b82c 	b.w	d59a8 <HAL_Pin_Map>

000d5950 <_GLOBAL__sub_I__ZN9NexNumberC2EhhPKc>:
   d5950:	f000 b82a 	b.w	d59a8 <HAL_Pin_Map>

000d5954 <_GLOBAL__sub_I_ITEADLIB_Nextion.cpp>:
   d5954:	f000 b828 	b.w	d59a8 <HAL_Pin_Map>

000d5958 <_GLOBAL__sub_I__ZN9NexObjectC2EhhPKcPv>:
   d5958:	f000 b826 	b.w	d59a8 <HAL_Pin_Map>

000d595c <_GLOBAL__sub_I__ZN11NexDSButtonC2EhhPKc>:
   d595c:	f000 b824 	b.w	d59a8 <HAL_Pin_Map>

000d5960 <_GLOBAL__sub_I__Z11clearScreenm>:
   d5960:	f000 b822 	b.w	d59a8 <HAL_Pin_Map>

000d5964 <_GLOBAL__sub_I__ZN7NexCropC2EhhPKcPv>:
   d5964:	f000 b820 	b.w	d59a8 <HAL_Pin_Map>

000d5968 <_GLOBAL__sub_I__ZN9NexSliderC2EhhPKcPv>:
   d5968:	f000 b81e 	b.w	d59a8 <HAL_Pin_Map>

000d596c <_GLOBAL__sub_I_bkCmd>:
   d596c:	f000 b81c 	b.w	d59a8 <HAL_Pin_Map>

000d5970 <_GLOBAL__sub_I__ZN10NexHotspotC2EhhPKcPv>:
   d5970:	f000 b81a 	b.w	d59a8 <HAL_Pin_Map>

000d5974 <_GLOBAL__sub_I__ZN7NexPageC2EhhPKcPv>:
   d5974:	f000 b818 	b.w	d59a8 <HAL_Pin_Map>

000d5978 <_GLOBAL__sub_I__ZN7NexTextC2EhhPKcPv>:
   d5978:	f000 b816 	b.w	d59a8 <HAL_Pin_Map>

000d597c <_GLOBAL__sub_I__ZN10NexPictureC2EhhPKcPv>:
   d597c:	f000 b814 	b.w	d59a8 <HAL_Pin_Map>

000d5980 <_GLOBAL__sub_I__ZN8NexTouchC2EhhPKcPv>:
   d5980:	f000 b812 	b.w	d59a8 <HAL_Pin_Map>

000d5984 <_GLOBAL__sub_I_CellularHelper.cpp>:
   d5984:	f000 b810 	b.w	d59a8 <HAL_Pin_Map>

000d5988 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <netdb_freeaddrinfo+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	689b      	ldr	r3, [r3, #8]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030268 	.word	0x00030268

000d5998 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <netdb_getaddrinfo+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	68db      	ldr	r3, [r3, #12]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030268 	.word	0x00030268

000d59a8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <HAL_Pin_Map+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	681b      	ldr	r3, [r3, #0]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	0003022c 	.word	0x0003022c

000d59b8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <HAL_Validate_Pin_Function+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	685b      	ldr	r3, [r3, #4]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	0003022c 	.word	0x0003022c

000d59c8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <HAL_Pin_Mode+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	689b      	ldr	r3, [r3, #8]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	0003022c 	.word	0x0003022c

000d59d8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <HAL_Get_Pin_Mode+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	68db      	ldr	r3, [r3, #12]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003022c 	.word	0x0003022c

000d59e8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <HAL_GPIO_Read+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	695b      	ldr	r3, [r3, #20]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003022c 	.word	0x0003022c

000d59f8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_ADC_Read+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003022c 	.word	0x0003022c

000d5a08 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_SPI_Init+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	69db      	ldr	r3, [r3, #28]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	00030230 	.word	0x00030230

000d5a18 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <HAL_SPI_Is_Enabled+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	6a1b      	ldr	r3, [r3, #32]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030230 	.word	0x00030230

000d5a28 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <HAL_RNG_GetRandomNumber+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	685b      	ldr	r3, [r3, #4]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030218 	.word	0x00030218

000d5a38 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <HAL_Delay_Microseconds+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	68db      	ldr	r3, [r3, #12]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	00030218 	.word	0x00030218

000d5a48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	695b      	ldr	r3, [r3, #20]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	00030218 	.word	0x00030218

000d5a58 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <HAL_RTC_Get_UnixTime+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	69db      	ldr	r3, [r3, #28]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030218 	.word	0x00030218

000d5a68 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <HAL_RTC_Time_Is_Valid+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030218 	.word	0x00030218

000d5a78 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <hal_ble_stack_init+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	689b      	ldr	r3, [r3, #8]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030278 	.word	0x00030278

000d5a88 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <hal_ble_set_callback_on_events+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	695b      	ldr	r3, [r3, #20]
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030278 	.word	0x00030278

000d5a98 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <hal_ble_gap_set_advertising_data+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030278 	.word	0x00030278

000d5aa8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <hal_ble_gap_set_scan_response_data+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030278 	.word	0x00030278

000d5ab8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <hal_ble_gap_start_advertising+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030278 	.word	0x00030278

000d5ac8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b03      	ldr	r3, [pc, #12]	; (d5ad8 <hal_ble_gatt_server_add_service+0x10>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5ad2:	9301      	str	r3, [sp, #4]
   d5ad4:	bd08      	pop	{r3, pc}
   d5ad6:	0000      	.short	0x0000
   d5ad8:	00030278 	.word	0x00030278

000d5adc <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b03      	ldr	r3, [pc, #12]	; (d5aec <hal_ble_gatt_server_add_characteristic+0x10>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d5ae6:	9301      	str	r3, [sp, #4]
   d5ae8:	bd08      	pop	{r3, pc}
   d5aea:	0000      	.short	0x0000
   d5aec:	00030278 	.word	0x00030278

000d5af0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <os_thread_create+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	685b      	ldr	r3, [r3, #4]
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	00030248 	.word	0x00030248

000d5b00 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <os_thread_is_current+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	689b      	ldr	r3, [r3, #8]
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	00030248 	.word	0x00030248

000d5b10 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <os_thread_yield+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	68db      	ldr	r3, [r3, #12]
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	00030248 	.word	0x00030248

000d5b20 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <os_thread_join+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	691b      	ldr	r3, [r3, #16]
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	00030248 	.word	0x00030248

000d5b30 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5b30:	b508      	push	{r3, lr}
   d5b32:	4b02      	ldr	r3, [pc, #8]	; (d5b3c <os_thread_cleanup+0xc>)
   d5b34:	681b      	ldr	r3, [r3, #0]
   d5b36:	695b      	ldr	r3, [r3, #20]
   d5b38:	9301      	str	r3, [sp, #4]
   d5b3a:	bd08      	pop	{r3, pc}
   d5b3c:	00030248 	.word	0x00030248

000d5b40 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5b40:	b508      	push	{r3, lr}
   d5b42:	4b02      	ldr	r3, [pc, #8]	; (d5b4c <os_mutex_create+0xc>)
   d5b44:	681b      	ldr	r3, [r3, #0]
   d5b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b48:	9301      	str	r3, [sp, #4]
   d5b4a:	bd08      	pop	{r3, pc}
   d5b4c:	00030248 	.word	0x00030248

000d5b50 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5b50:	b508      	push	{r3, lr}
   d5b52:	4b02      	ldr	r3, [pc, #8]	; (d5b5c <os_mutex_recursive_create+0xc>)
   d5b54:	681b      	ldr	r3, [r3, #0]
   d5b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b58:	9301      	str	r3, [sp, #4]
   d5b5a:	bd08      	pop	{r3, pc}
   d5b5c:	00030248 	.word	0x00030248

000d5b60 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5b60:	b508      	push	{r3, lr}
   d5b62:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <os_mutex_recursive_lock+0xc>)
   d5b64:	681b      	ldr	r3, [r3, #0]
   d5b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5b68:	9301      	str	r3, [sp, #4]
   d5b6a:	bd08      	pop	{r3, pc}
   d5b6c:	00030248 	.word	0x00030248

000d5b70 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5b70:	b508      	push	{r3, lr}
   d5b72:	4b02      	ldr	r3, [pc, #8]	; (d5b7c <os_mutex_recursive_unlock+0xc>)
   d5b74:	681b      	ldr	r3, [r3, #0]
   d5b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5b78:	9301      	str	r3, [sp, #4]
   d5b7a:	bd08      	pop	{r3, pc}
   d5b7c:	00030248 	.word	0x00030248

000d5b80 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d5b80:	b508      	push	{r3, lr}
   d5b82:	4b02      	ldr	r3, [pc, #8]	; (d5b8c <os_thread_exit+0xc>)
   d5b84:	681b      	ldr	r3, [r3, #0]
   d5b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5b88:	9301      	str	r3, [sp, #4]
   d5b8a:	bd08      	pop	{r3, pc}
   d5b8c:	00030248 	.word	0x00030248

000d5b90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b90:	b508      	push	{r3, lr}
   d5b92:	4b02      	ldr	r3, [pc, #8]	; (d5b9c <inet_inet_ntop+0xc>)
   d5b94:	681b      	ldr	r3, [r3, #0]
   d5b96:	695b      	ldr	r3, [r3, #20]
   d5b98:	9301      	str	r3, [sp, #4]
   d5b9a:	bd08      	pop	{r3, pc}
   d5b9c:	00030264 	.word	0x00030264

000d5ba0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5ba0:	b508      	push	{r3, lr}
   d5ba2:	4b02      	ldr	r3, [pc, #8]	; (d5bac <HAL_USART_Init+0xc>)
   d5ba4:	681b      	ldr	r3, [r3, #0]
   d5ba6:	681b      	ldr	r3, [r3, #0]
   d5ba8:	9301      	str	r3, [sp, #4]
   d5baa:	bd08      	pop	{r3, pc}
   d5bac:	0003023c 	.word	0x0003023c

000d5bb0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5bb0:	b508      	push	{r3, lr}
   d5bb2:	4b02      	ldr	r3, [pc, #8]	; (d5bbc <HAL_USART_Write_Data+0xc>)
   d5bb4:	681b      	ldr	r3, [r3, #0]
   d5bb6:	68db      	ldr	r3, [r3, #12]
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	bd08      	pop	{r3, pc}
   d5bbc:	0003023c 	.word	0x0003023c

000d5bc0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5bc0:	b508      	push	{r3, lr}
   d5bc2:	4b02      	ldr	r3, [pc, #8]	; (d5bcc <HAL_USART_Available_Data+0xc>)
   d5bc4:	681b      	ldr	r3, [r3, #0]
   d5bc6:	691b      	ldr	r3, [r3, #16]
   d5bc8:	9301      	str	r3, [sp, #4]
   d5bca:	bd08      	pop	{r3, pc}
   d5bcc:	0003023c 	.word	0x0003023c

000d5bd0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5bd0:	b508      	push	{r3, lr}
   d5bd2:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <HAL_USART_Read_Data+0xc>)
   d5bd4:	681b      	ldr	r3, [r3, #0]
   d5bd6:	695b      	ldr	r3, [r3, #20]
   d5bd8:	9301      	str	r3, [sp, #4]
   d5bda:	bd08      	pop	{r3, pc}
   d5bdc:	0003023c 	.word	0x0003023c

000d5be0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5be0:	b508      	push	{r3, lr}
   d5be2:	4b02      	ldr	r3, [pc, #8]	; (d5bec <HAL_USART_Peek_Data+0xc>)
   d5be4:	681b      	ldr	r3, [r3, #0]
   d5be6:	699b      	ldr	r3, [r3, #24]
   d5be8:	9301      	str	r3, [sp, #4]
   d5bea:	bd08      	pop	{r3, pc}
   d5bec:	0003023c 	.word	0x0003023c

000d5bf0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5bf0:	b508      	push	{r3, lr}
   d5bf2:	4b02      	ldr	r3, [pc, #8]	; (d5bfc <HAL_USART_Flush_Data+0xc>)
   d5bf4:	681b      	ldr	r3, [r3, #0]
   d5bf6:	69db      	ldr	r3, [r3, #28]
   d5bf8:	9301      	str	r3, [sp, #4]
   d5bfa:	bd08      	pop	{r3, pc}
   d5bfc:	0003023c 	.word	0x0003023c

000d5c00 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5c00:	b508      	push	{r3, lr}
   d5c02:	4b02      	ldr	r3, [pc, #8]	; (d5c0c <HAL_USART_Is_Enabled+0xc>)
   d5c04:	681b      	ldr	r3, [r3, #0]
   d5c06:	6a1b      	ldr	r3, [r3, #32]
   d5c08:	9301      	str	r3, [sp, #4]
   d5c0a:	bd08      	pop	{r3, pc}
   d5c0c:	0003023c 	.word	0x0003023c

000d5c10 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5c10:	b508      	push	{r3, lr}
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <HAL_USART_Available_Data_For_Write+0xc>)
   d5c14:	681b      	ldr	r3, [r3, #0]
   d5c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c18:	9301      	str	r3, [sp, #4]
   d5c1a:	bd08      	pop	{r3, pc}
   d5c1c:	0003023c 	.word	0x0003023c

000d5c20 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5c20:	b508      	push	{r3, lr}
   d5c22:	4b02      	ldr	r3, [pc, #8]	; (d5c2c <HAL_USART_BeginConfig+0xc>)
   d5c24:	681b      	ldr	r3, [r3, #0]
   d5c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	bd08      	pop	{r3, pc}
   d5c2c:	0003023c 	.word	0x0003023c

000d5c30 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5c30:	b508      	push	{r3, lr}
   d5c32:	4b02      	ldr	r3, [pc, #8]	; (d5c3c <HAL_I2C_Write_Data+0xc>)
   d5c34:	681b      	ldr	r3, [r3, #0]
   d5c36:	6a1b      	ldr	r3, [r3, #32]
   d5c38:	9301      	str	r3, [sp, #4]
   d5c3a:	bd08      	pop	{r3, pc}
   d5c3c:	00030228 	.word	0x00030228

000d5c40 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5c40:	b508      	push	{r3, lr}
   d5c42:	4b02      	ldr	r3, [pc, #8]	; (d5c4c <HAL_I2C_Available_Data+0xc>)
   d5c44:	681b      	ldr	r3, [r3, #0]
   d5c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c48:	9301      	str	r3, [sp, #4]
   d5c4a:	bd08      	pop	{r3, pc}
   d5c4c:	00030228 	.word	0x00030228

000d5c50 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5c50:	b508      	push	{r3, lr}
   d5c52:	4b02      	ldr	r3, [pc, #8]	; (d5c5c <HAL_I2C_Read_Data+0xc>)
   d5c54:	681b      	ldr	r3, [r3, #0]
   d5c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c58:	9301      	str	r3, [sp, #4]
   d5c5a:	bd08      	pop	{r3, pc}
   d5c5c:	00030228 	.word	0x00030228

000d5c60 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5c60:	b508      	push	{r3, lr}
   d5c62:	4b02      	ldr	r3, [pc, #8]	; (d5c6c <HAL_I2C_Peek_Data+0xc>)
   d5c64:	681b      	ldr	r3, [r3, #0]
   d5c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c68:	9301      	str	r3, [sp, #4]
   d5c6a:	bd08      	pop	{r3, pc}
   d5c6c:	00030228 	.word	0x00030228

000d5c70 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b02      	ldr	r3, [pc, #8]	; (d5c7c <HAL_I2C_Flush_Data+0xc>)
   d5c74:	681b      	ldr	r3, [r3, #0]
   d5c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c78:	9301      	str	r3, [sp, #4]
   d5c7a:	bd08      	pop	{r3, pc}
   d5c7c:	00030228 	.word	0x00030228

000d5c80 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5c80:	b508      	push	{r3, lr}
   d5c82:	4b02      	ldr	r3, [pc, #8]	; (d5c8c <HAL_I2C_Is_Enabled+0xc>)
   d5c84:	681b      	ldr	r3, [r3, #0]
   d5c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c88:	9301      	str	r3, [sp, #4]
   d5c8a:	bd08      	pop	{r3, pc}
   d5c8c:	00030228 	.word	0x00030228

000d5c90 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5c90:	b508      	push	{r3, lr}
   d5c92:	4b02      	ldr	r3, [pc, #8]	; (d5c9c <HAL_I2C_Init+0xc>)
   d5c94:	681b      	ldr	r3, [r3, #0]
   d5c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	bd08      	pop	{r3, pc}
   d5c9c:	00030228 	.word	0x00030228

000d5ca0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5ca0:	b508      	push	{r3, lr}
   d5ca2:	4b02      	ldr	r3, [pc, #8]	; (d5cac <HAL_USB_USART_Init+0xc>)
   d5ca4:	681b      	ldr	r3, [r3, #0]
   d5ca6:	681b      	ldr	r3, [r3, #0]
   d5ca8:	9301      	str	r3, [sp, #4]
   d5caa:	bd08      	pop	{r3, pc}
   d5cac:	0003024c 	.word	0x0003024c

000d5cb0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b02      	ldr	r3, [pc, #8]	; (d5cbc <HAL_USB_USART_Begin+0xc>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	685b      	ldr	r3, [r3, #4]
   d5cb8:	9301      	str	r3, [sp, #4]
   d5cba:	bd08      	pop	{r3, pc}
   d5cbc:	0003024c 	.word	0x0003024c

000d5cc0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <HAL_USB_USART_Available_Data+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	691b      	ldr	r3, [r3, #16]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	0003024c 	.word	0x0003024c

000d5cd0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	695b      	ldr	r3, [r3, #20]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	0003024c 	.word	0x0003024c

000d5ce0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <HAL_USB_USART_Receive_Data+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	699b      	ldr	r3, [r3, #24]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	0003024c 	.word	0x0003024c

000d5cf0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <HAL_USB_USART_Send_Data+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	69db      	ldr	r3, [r3, #28]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	0003024c 	.word	0x0003024c

000d5d00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <HAL_USB_USART_Flush_Data+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	6a1b      	ldr	r3, [r3, #32]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	0003024c 	.word	0x0003024c

000d5d10 <wlan_get_credentials>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <wlan_get_credentials+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030274 	.word	0x00030274

000d5d20 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <panic_+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030260 	.word	0x00030260

000d5d30 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <system_mode+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	681b      	ldr	r3, [r3, #0]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	00030220 	.word	0x00030220

000d5d40 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <set_system_mode+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	685b      	ldr	r3, [r3, #4]
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	00030220 	.word	0x00030220

000d5d50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <system_delay_ms+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	695b      	ldr	r3, [r3, #20]
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030220 	.word	0x00030220

000d5d60 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <system_thread_set_state+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030220 	.word	0x00030220

000d5d70 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <application_thread_current+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030220 	.word	0x00030220

000d5d80 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <application_thread_invoke+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030220 	.word	0x00030220

000d5d90 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <system_thread_get_state+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	00030220 	.word	0x00030220

000d5da0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b03      	ldr	r3, [pc, #12]	; (d5db0 <system_ctrl_set_app_request_handler+0x10>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5daa:	9301      	str	r3, [sp, #4]
   d5dac:	bd08      	pop	{r3, pc}
   d5dae:	0000      	.short	0x0000
   d5db0:	00030220 	.word	0x00030220

000d5db4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b03      	ldr	r3, [pc, #12]	; (d5dc4 <system_ctrl_set_result+0x10>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5dbe:	9301      	str	r3, [sp, #4]
   d5dc0:	bd08      	pop	{r3, pc}
   d5dc2:	0000      	.short	0x0000
   d5dc4:	00030220 	.word	0x00030220

000d5dc8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <network_connect+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	685b      	ldr	r3, [r3, #4]
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030240 	.word	0x00030240

000d5dd8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <network_connecting+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	689b      	ldr	r3, [r3, #8]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030240 	.word	0x00030240

000d5de8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <network_disconnect+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	68db      	ldr	r3, [r3, #12]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030240 	.word	0x00030240

000d5df8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <network_ready+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	691b      	ldr	r3, [r3, #16]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030240 	.word	0x00030240

000d5e08 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <network_on+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	695b      	ldr	r3, [r3, #20]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	00030240 	.word	0x00030240

000d5e18 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <network_off+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	699b      	ldr	r3, [r3, #24]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	00030240 	.word	0x00030240

000d5e28 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <network_listen+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	69db      	ldr	r3, [r3, #28]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	00030240 	.word	0x00030240

000d5e38 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <network_listening+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	6a1b      	ldr	r3, [r3, #32]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	00030240 	.word	0x00030240

000d5e48 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <network_set_credentials+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	00030240 	.word	0x00030240

000d5e58 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <network_clear_credentials+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	00030240 	.word	0x00030240

000d5e68 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <network_set_listen_timeout+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	00030240 	.word	0x00030240

000d5e78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <network_get_listen_timeout+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	00030240 	.word	0x00030240

000d5e88 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <spark_process+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	689b      	ldr	r3, [r3, #8]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030244 	.word	0x00030244

000d5e98 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <spark_cloud_flag_connected+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	695b      	ldr	r3, [r3, #20]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030244 	.word	0x00030244

000d5ea8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <spark_send_event+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	6a1b      	ldr	r3, [r3, #32]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030244 	.word	0x00030244

000d5eb8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <spark_subscribe+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030244 	.word	0x00030244

000d5ec8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <spark_sync_time_pending+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030244 	.word	0x00030244

000d5ed8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030244 	.word	0x00030244

000d5ee8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <malloc+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	681b      	ldr	r3, [r3, #0]
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	0003021c 	.word	0x0003021c

000d5ef8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <free+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	685b      	ldr	r3, [r3, #4]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	0003021c 	.word	0x0003021c

000d5f08 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <realloc+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	689b      	ldr	r3, [r3, #8]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	0003021c 	.word	0x0003021c

000d5f18 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <sprintf+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	68db      	ldr	r3, [r3, #12]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	0003021c 	.word	0x0003021c

000d5f28 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <sscanf+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	695b      	ldr	r3, [r3, #20]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	0003021c 	.word	0x0003021c

000d5f38 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <siscanf+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	699b      	ldr	r3, [r3, #24]
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	0003021c 	.word	0x0003021c

000d5f48 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <vsnprintf+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	0003021c 	.word	0x0003021c

000d5f58 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b02      	ldr	r3, [pc, #8]	; (d5f64 <abort+0xc>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f60:	9301      	str	r3, [sp, #4]
   d5f62:	bd08      	pop	{r3, pc}
   d5f64:	0003021c 	.word	0x0003021c

000d5f68 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5f68:	b508      	push	{r3, lr}
   d5f6a:	4b02      	ldr	r3, [pc, #8]	; (d5f74 <_malloc_r+0xc>)
   d5f6c:	681b      	ldr	r3, [r3, #0]
   d5f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f70:	9301      	str	r3, [sp, #4]
   d5f72:	bd08      	pop	{r3, pc}
   d5f74:	0003021c 	.word	0x0003021c

000d5f78 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f78:	2200      	movs	r2, #0
   d5f7a:	4611      	mov	r1, r2
   d5f7c:	6840      	ldr	r0, [r0, #4]
   d5f7e:	f7ff bf5b 	b.w	d5e38 <network_listening>

000d5f82 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f82:	2200      	movs	r2, #0
   d5f84:	4611      	mov	r1, r2
   d5f86:	6840      	ldr	r0, [r0, #4]
   d5f88:	f7ff bf76 	b.w	d5e78 <network_get_listen_timeout>

000d5f8c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f8c:	2200      	movs	r2, #0
   d5f8e:	6840      	ldr	r0, [r0, #4]
   d5f90:	f7ff bf6a 	b.w	d5e68 <network_set_listen_timeout>

000d5f94 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f94:	2200      	movs	r2, #0
   d5f96:	f081 0101 	eor.w	r1, r1, #1
   d5f9a:	6840      	ldr	r0, [r0, #4]
   d5f9c:	f7ff bf44 	b.w	d5e28 <network_listen>

000d5fa0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5fa0:	2300      	movs	r3, #0
   d5fa2:	461a      	mov	r2, r3
   d5fa4:	4619      	mov	r1, r3
   d5fa6:	6840      	ldr	r0, [r0, #4]
   d5fa8:	f7ff bf36 	b.w	d5e18 <network_off>

000d5fac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5fac:	2300      	movs	r3, #0
   d5fae:	461a      	mov	r2, r3
   d5fb0:	4619      	mov	r1, r3
   d5fb2:	6840      	ldr	r0, [r0, #4]
   d5fb4:	f7ff bf28 	b.w	d5e08 <network_on>

000d5fb8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5fb8:	2200      	movs	r2, #0
   d5fba:	4611      	mov	r1, r2
   d5fbc:	6840      	ldr	r0, [r0, #4]
   d5fbe:	f7ff bf1b 	b.w	d5df8 <network_ready>

000d5fc2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5fc2:	2200      	movs	r2, #0
   d5fc4:	4611      	mov	r1, r2
   d5fc6:	6840      	ldr	r0, [r0, #4]
   d5fc8:	f7ff bf06 	b.w	d5dd8 <network_connecting>

000d5fcc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fcc:	2200      	movs	r2, #0
   d5fce:	2102      	movs	r1, #2
   d5fd0:	6840      	ldr	r0, [r0, #4]
   d5fd2:	f7ff bf09 	b.w	d5de8 <network_disconnect>

000d5fd6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5fd6:	2300      	movs	r3, #0
   d5fd8:	461a      	mov	r2, r3
   d5fda:	6840      	ldr	r0, [r0, #4]
   d5fdc:	f7ff bef4 	b.w	d5dc8 <network_connect>

000d5fe0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5fe0:	4b02      	ldr	r3, [pc, #8]	; (d5fec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5fe2:	2203      	movs	r2, #3
   d5fe4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5fe6:	4a02      	ldr	r2, [pc, #8]	; (d5ff0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5fe8:	601a      	str	r2, [r3, #0]
   d5fea:	4770      	bx	lr
   d5fec:	2003e348 	.word	0x2003e348
   d5ff0:	000d9f5c 	.word	0x000d9f5c

000d5ff4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5ff4:	4770      	bx	lr

000d5ff6 <_ZN8SPIClassD0Ev>:
   d5ff6:	b510      	push	{r4, lr}
   d5ff8:	2110      	movs	r1, #16
   d5ffa:	4604      	mov	r4, r0
   d5ffc:	f002 faa4 	bl	d8548 <_ZdlPvj>
   d6000:	4620      	mov	r0, r4
   d6002:	bd10      	pop	{r4, pc}

000d6004 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6004:	b570      	push	{r4, r5, r6, lr}
   d6006:	4b08      	ldr	r3, [pc, #32]	; (d6028 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d6008:	6003      	str	r3, [r0, #0]
   d600a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d600c:	2500      	movs	r5, #0
   d600e:	460e      	mov	r6, r1
   d6010:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6014:	f7ff fd94 	bl	d5b40 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6018:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d601a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d601c:	f7ff fcf4 	bl	d5a08 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6020:	60a5      	str	r5, [r4, #8]
}
   d6022:	4620      	mov	r0, r4
   d6024:	bd70      	pop	{r4, r5, r6, pc}
   d6026:	bf00      	nop
   d6028:	000d9f90 	.word	0x000d9f90

000d602c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d602c:	7900      	ldrb	r0, [r0, #4]
   d602e:	f7ff bcf3 	b.w	d5a18 <HAL_SPI_Is_Enabled>
	...

000d6034 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6034:	4b04      	ldr	r3, [pc, #16]	; (d6048 <_GLOBAL__sub_I_System+0x14>)
   d6036:	2000      	movs	r0, #0
   d6038:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d603c:	7018      	strb	r0, [r3, #0]
   d603e:	8058      	strh	r0, [r3, #2]
   d6040:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6042:	f7ff be7d 	b.w	d5d40 <set_system_mode>
   d6046:	bf00      	nop
   d6048:	2003e350 	.word	0x2003e350

000d604c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d604c:	b510      	push	{r4, lr}
   d604e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6050:	f003 f989 	bl	d9366 <strlen>
   d6054:	3801      	subs	r0, #1
   d6056:	1823      	adds	r3, r4, r0
   d6058:	4620      	mov	r0, r4
	while(i<j){
   d605a:	4298      	cmp	r0, r3
   d605c:	d206      	bcs.n	d606c <_Z11str_reversePc+0x20>
		c = *i;
   d605e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6060:	7819      	ldrb	r1, [r3, #0]
   d6062:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6066:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d606a:	e7f6      	b.n	d605a <_Z11str_reversePc+0xe>
   d606c:	bd10      	pop	{r4, pc}

000d606e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d606e:	b570      	push	{r4, r5, r6, lr}
   d6070:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6072:	1e91      	subs	r1, r2, #2
   d6074:	2922      	cmp	r1, #34	; 0x22
   d6076:	d820      	bhi.n	d60ba <ultoa+0x4c>
   d6078:	4625      	mov	r5, r4
   d607a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d607c:	b910      	cbnz	r0, d6084 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d607e:	4423      	add	r3, r4
            *ptr++ = '0';
   d6080:	2230      	movs	r2, #48	; 0x30
   d6082:	e00e      	b.n	d60a2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6084:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6088:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d608c:	b2c1      	uxtb	r1, r0
   d608e:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6092:	2809      	cmp	r0, #9
                *ptr += '0';
   d6094:	bf94      	ite	ls
   d6096:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6098:	3157      	addhi	r1, #87	; 0x57
   d609a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d609e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d60a0:	e7eb      	b.n	d607a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d60a2:	4299      	cmp	r1, r3
   d60a4:	d202      	bcs.n	d60ac <ultoa+0x3e>
            *ptr++ = '0';
   d60a6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d60aa:	e7fa      	b.n	d60a2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d60ac:	2300      	movs	r3, #0
	str_reverse(buffer);
   d60ae:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d60b0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d60b2:	f7ff ffcb 	bl	d604c <_Z11str_reversePc>
	return buffer;
   d60b6:	4620      	mov	r0, r4
   d60b8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d60ba:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d60bc:	bd70      	pop	{r4, r5, r6, pc}

000d60be <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d60be:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d60c0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d60c2:	460c      	mov	r4, r1
   d60c4:	4615      	mov	r5, r2
	if(a<0){
   d60c6:	da0b      	bge.n	d60e0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d60c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d60cc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d60d0:	bf14      	ite	ne
   d60d2:	4258      	negne	r0, r3
   d60d4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d60d6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d60d8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d60da:	462a      	mov	r2, r5
   d60dc:	4419      	add	r1, r3
   d60de:	e000      	b.n	d60e2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d60e0:	2301      	movs	r3, #1
   d60e2:	f7ff ffc4 	bl	d606e <ultoa>
	}
	return buffer;
}
   d60e6:	4620      	mov	r0, r4
   d60e8:	bd38      	pop	{r3, r4, r5, pc}

000d60ea <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d60ea:	b510      	push	{r4, lr}
   d60ec:	4604      	mov	r4, r0
{
	free(buffer);
   d60ee:	6800      	ldr	r0, [r0, #0]
   d60f0:	f7ff ff02 	bl	d5ef8 <free>
}
   d60f4:	4620      	mov	r0, r4
   d60f6:	bd10      	pop	{r4, pc}

000d60f8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d60f8:	b510      	push	{r4, lr}
   d60fa:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d60fc:	6800      	ldr	r0, [r0, #0]
   d60fe:	b108      	cbz	r0, d6104 <_ZN6String10invalidateEv+0xc>
   d6100:	f7ff fefa 	bl	d5ef8 <free>
	buffer = NULL;
   d6104:	2300      	movs	r3, #0
   d6106:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6108:	60a3      	str	r3, [r4, #8]
   d610a:	6063      	str	r3, [r4, #4]
   d610c:	bd10      	pop	{r4, pc}

000d610e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d610e:	b538      	push	{r3, r4, r5, lr}
   d6110:	4604      	mov	r4, r0
   d6112:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6114:	6800      	ldr	r0, [r0, #0]
   d6116:	3101      	adds	r1, #1
   d6118:	f7ff fef6 	bl	d5f08 <realloc>
	if (newbuffer) {
   d611c:	b110      	cbz	r0, d6124 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d611e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6122:	2001      	movs	r0, #1
	}
	return 0;
}
   d6124:	bd38      	pop	{r3, r4, r5, pc}

000d6126 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6126:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6128:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d612a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d612c:	b113      	cbz	r3, d6134 <_ZN6String7reserveEj+0xe>
   d612e:	6843      	ldr	r3, [r0, #4]
   d6130:	428b      	cmp	r3, r1
   d6132:	d207      	bcs.n	d6144 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6134:	4620      	mov	r0, r4
   d6136:	f7ff ffea 	bl	d610e <_ZN6String12changeBufferEj>
   d613a:	b120      	cbz	r0, d6146 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d613c:	68a3      	ldr	r3, [r4, #8]
   d613e:	b90b      	cbnz	r3, d6144 <_ZN6String7reserveEj+0x1e>
   d6140:	6822      	ldr	r2, [r4, #0]
   d6142:	7013      	strb	r3, [r2, #0]
   d6144:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6146:	bd10      	pop	{r4, pc}

000d6148 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6148:	b570      	push	{r4, r5, r6, lr}
   d614a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d614c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d614e:	4604      	mov	r4, r0
   d6150:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6152:	f7ff ffe8 	bl	d6126 <_ZN6String7reserveEj>
   d6156:	b918      	cbnz	r0, d6160 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6158:	4620      	mov	r0, r4
   d615a:	f7ff ffcd 	bl	d60f8 <_ZN6String10invalidateEv>
		return *this;
   d615e:	e009      	b.n	d6174 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6160:	462a      	mov	r2, r5
   d6162:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6164:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6166:	6820      	ldr	r0, [r4, #0]
   d6168:	f003 f879 	bl	d925e <memcpy>
	buffer[len] = 0;
   d616c:	6822      	ldr	r2, [r4, #0]
   d616e:	68a3      	ldr	r3, [r4, #8]
   d6170:	2100      	movs	r1, #0
   d6172:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6174:	4620      	mov	r0, r4
   d6176:	bd70      	pop	{r4, r5, r6, pc}

000d6178 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6178:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d617a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d617c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d617e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6180:	6043      	str	r3, [r0, #4]
	len = 0;
   d6182:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6184:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6186:	460d      	mov	r5, r1
   d6188:	b139      	cbz	r1, d619a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d618a:	4608      	mov	r0, r1
   d618c:	f003 f8eb 	bl	d9366 <strlen>
   d6190:	4629      	mov	r1, r5
   d6192:	4602      	mov	r2, r0
   d6194:	4620      	mov	r0, r4
   d6196:	f7ff ffd7 	bl	d6148 <_ZN6String4copyEPKcj>
}
   d619a:	4620      	mov	r0, r4
   d619c:	bd38      	pop	{r3, r4, r5, pc}

000d619e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d619e:	b538      	push	{r3, r4, r5, lr}
   d61a0:	4605      	mov	r5, r0
	if (buffer) {
   d61a2:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d61a4:	460c      	mov	r4, r1
	if (buffer) {
   d61a6:	b160      	cbz	r0, d61c2 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d61a8:	686a      	ldr	r2, [r5, #4]
   d61aa:	688b      	ldr	r3, [r1, #8]
   d61ac:	429a      	cmp	r2, r3
   d61ae:	d306      	bcc.n	d61be <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d61b0:	6809      	ldr	r1, [r1, #0]
   d61b2:	f003 f8b5 	bl	d9320 <strcpy>
			len = rhs.len;
   d61b6:	68a3      	ldr	r3, [r4, #8]
   d61b8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d61ba:	2300      	movs	r3, #0
   d61bc:	e00a      	b.n	d61d4 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d61be:	f7ff fe9b 	bl	d5ef8 <free>
		}
	}
	buffer = rhs.buffer;
   d61c2:	6823      	ldr	r3, [r4, #0]
   d61c4:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d61c6:	6863      	ldr	r3, [r4, #4]
   d61c8:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d61ca:	68a3      	ldr	r3, [r4, #8]
   d61cc:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d61ce:	2300      	movs	r3, #0
   d61d0:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d61d2:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d61d4:	60a3      	str	r3, [r4, #8]
   d61d6:	bd38      	pop	{r3, r4, r5, pc}

000d61d8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d61d8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d61da:	b510      	push	{r4, lr}
   d61dc:	460b      	mov	r3, r1
   d61de:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d61e0:	d007      	beq.n	d61f2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d61e2:	6809      	ldr	r1, [r1, #0]
   d61e4:	b119      	cbz	r1, d61ee <_ZN6StringaSERKS_+0x16>
   d61e6:	689a      	ldr	r2, [r3, #8]
   d61e8:	f7ff ffae 	bl	d6148 <_ZN6String4copyEPKcj>
   d61ec:	e001      	b.n	d61f2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d61ee:	f7ff ff83 	bl	d60f8 <_ZN6String10invalidateEv>

	return *this;
}
   d61f2:	4620      	mov	r0, r4
   d61f4:	bd10      	pop	{r4, pc}

000d61f6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61f6:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61f8:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d61fa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d61fc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d61fe:	6043      	str	r3, [r0, #4]
	len = 0;
   d6200:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6202:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6204:	f7ff ffe8 	bl	d61d8 <_ZN6StringaSERKS_>
}
   d6208:	4620      	mov	r0, r4
   d620a:	bd10      	pop	{r4, pc}

000d620c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d620c:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d620e:	b510      	push	{r4, lr}
   d6210:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6212:	d001      	beq.n	d6218 <_ZN6StringaSEOS_+0xc>
   d6214:	f7ff ffc3 	bl	d619e <_ZN6String4moveERS_>
	return *this;
}
   d6218:	4620      	mov	r0, r4
   d621a:	bd10      	pop	{r4, pc}

000d621c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d621c:	b538      	push	{r3, r4, r5, lr}
   d621e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6220:	460c      	mov	r4, r1
   d6222:	b141      	cbz	r1, d6236 <_ZN6StringaSEPKc+0x1a>
   d6224:	4608      	mov	r0, r1
   d6226:	f003 f89e 	bl	d9366 <strlen>
   d622a:	4621      	mov	r1, r4
   d622c:	4602      	mov	r2, r0
   d622e:	4628      	mov	r0, r5
   d6230:	f7ff ff8a 	bl	d6148 <_ZN6String4copyEPKcj>
   d6234:	e001      	b.n	d623a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6236:	f7ff ff5f 	bl	d60f8 <_ZN6String10invalidateEv>

	return *this;
}
   d623a:	4628      	mov	r0, r5
   d623c:	bd38      	pop	{r3, r4, r5, pc}

000d623e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d623e:	b510      	push	{r4, lr}
   d6240:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6242:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d6244:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6246:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d6248:	6063      	str	r3, [r4, #4]
	len = 0;
   d624a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d624c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d624e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d6250:	a901      	add	r1, sp, #4
   d6252:	f7ff ff34 	bl	d60be <itoa>
	*this = buf;
   d6256:	a901      	add	r1, sp, #4
   d6258:	4620      	mov	r0, r4
   d625a:	f7ff ffdf 	bl	d621c <_ZN6StringaSEPKc>
}
   d625e:	4620      	mov	r0, r4
   d6260:	b00a      	add	sp, #40	; 0x28
   d6262:	bd10      	pop	{r4, pc}

000d6264 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6264:	b570      	push	{r4, r5, r6, lr}
   d6266:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6268:	460e      	mov	r6, r1
   d626a:	b909      	cbnz	r1, d6270 <_ZN6String6concatEPKcj+0xc>
   d626c:	2000      	movs	r0, #0
   d626e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6270:	b16a      	cbz	r2, d628e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6272:	6883      	ldr	r3, [r0, #8]
   d6274:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6276:	4629      	mov	r1, r5
   d6278:	f7ff ff55 	bl	d6126 <_ZN6String7reserveEj>
   d627c:	2800      	cmp	r0, #0
   d627e:	d0f5      	beq.n	d626c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6280:	6820      	ldr	r0, [r4, #0]
   d6282:	68a3      	ldr	r3, [r4, #8]
   d6284:	4631      	mov	r1, r6
   d6286:	4418      	add	r0, r3
   d6288:	f003 f84a 	bl	d9320 <strcpy>
	len = newlen;
   d628c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d628e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6290:	bd70      	pop	{r4, r5, r6, pc}

000d6292 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6292:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6294:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d6296:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d629a:	2201      	movs	r2, #1
   d629c:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d629e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d62a2:	f7ff ffdf 	bl	d6264 <_ZN6String6concatEPKcj>
}
   d62a6:	b003      	add	sp, #12
   d62a8:	f85d fb04 	ldr.w	pc, [sp], #4

000d62ac <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d62ac:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d62ae:	688a      	ldr	r2, [r1, #8]
   d62b0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d62b2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d62b4:	f7ff ffd6 	bl	d6264 <_ZN6String6concatEPKcj>
   d62b8:	b910      	cbnz	r0, d62c0 <_ZplRK15StringSumHelperRK6String+0x14>
   d62ba:	4620      	mov	r0, r4
   d62bc:	f7ff ff1c 	bl	d60f8 <_ZN6String10invalidateEv>
	return a;
}
   d62c0:	4620      	mov	r0, r4
   d62c2:	bd10      	pop	{r4, pc}

000d62c4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d62c4:	b538      	push	{r3, r4, r5, lr}
   d62c6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d62c8:	460d      	mov	r5, r1
   d62ca:	b141      	cbz	r1, d62de <_ZplRK15StringSumHelperPKc+0x1a>
   d62cc:	4608      	mov	r0, r1
   d62ce:	f003 f84a 	bl	d9366 <strlen>
   d62d2:	4629      	mov	r1, r5
   d62d4:	4602      	mov	r2, r0
   d62d6:	4620      	mov	r0, r4
   d62d8:	f7ff ffc4 	bl	d6264 <_ZN6String6concatEPKcj>
   d62dc:	b910      	cbnz	r0, d62e4 <_ZplRK15StringSumHelperPKc+0x20>
   d62de:	4620      	mov	r0, r4
   d62e0:	f7ff ff0a 	bl	d60f8 <_ZN6String10invalidateEv>
	return a;
}
   d62e4:	4620      	mov	r0, r4
   d62e6:	bd38      	pop	{r3, r4, r5, pc}

000d62e8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62e8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62ea:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62ec:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62ee:	b912      	cbnz	r2, d62f6 <_ZNK6String6equalsEPKc+0xe>
   d62f0:	b919      	cbnz	r1, d62fa <_ZNK6String6equalsEPKc+0x12>
   d62f2:	2001      	movs	r0, #1
   d62f4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d62f6:	b911      	cbnz	r1, d62fe <_ZNK6String6equalsEPKc+0x16>
   d62f8:	6803      	ldr	r3, [r0, #0]
   d62fa:	7818      	ldrb	r0, [r3, #0]
   d62fc:	e002      	b.n	d6304 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d62fe:	6800      	ldr	r0, [r0, #0]
   d6300:	f003 f804 	bl	d930c <strcmp>
   d6304:	fab0 f080 	clz	r0, r0
   d6308:	0940      	lsrs	r0, r0, #5
}
   d630a:	bd08      	pop	{r3, pc}

000d630c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d630c:	b40e      	push	{r1, r2, r3}
   d630e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d6310:	ac09      	add	r4, sp, #36	; 0x24
   d6312:	4605      	mov	r5, r0
   d6314:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d6318:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d631a:	4623      	mov	r3, r4
   d631c:	463a      	mov	r2, r7
   d631e:	2105      	movs	r1, #5
   d6320:	a802      	add	r0, sp, #8
   d6322:	f7ff fe11 	bl	d5f48 <vsnprintf>
    va_end(marker);

    String result;
   d6326:	490c      	ldr	r1, [pc, #48]	; (d6358 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6328:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d632a:	4628      	mov	r0, r5
   d632c:	f7ff ff24 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d6330:	4631      	mov	r1, r6
   d6332:	4628      	mov	r0, r5
   d6334:	f7ff fef7 	bl	d6126 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6338:	6828      	ldr	r0, [r5, #0]
   d633a:	b130      	cbz	r0, d634a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d633c:	4623      	mov	r3, r4
   d633e:	463a      	mov	r2, r7
   d6340:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d6342:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6344:	f7ff fe00 	bl	d5f48 <vsnprintf>
        va_end(marker);
        result.len = n;
   d6348:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d634a:	4628      	mov	r0, r5
   d634c:	b004      	add	sp, #16
   d634e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6352:	b003      	add	sp, #12
   d6354:	4770      	bx	lr
   d6356:	bf00      	nop
   d6358:	000da0a6 	.word	0x000da0a6

000d635c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d635c:	4770      	bx	lr

000d635e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d635e:	2000      	movs	r0, #0
   d6360:	4770      	bx	lr

000d6362 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6362:	4770      	bx	lr

000d6364 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6364:	2000      	movs	r0, #0
   d6366:	4770      	bx	lr

000d6368 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6368:	4770      	bx	lr

000d636a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d636a:	2000      	movs	r0, #0
   d636c:	4770      	bx	lr

000d636e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d636e:	b510      	push	{r4, lr}
   d6370:	2114      	movs	r1, #20
   d6372:	4604      	mov	r4, r0
   d6374:	f002 f8e8 	bl	d8548 <_ZdlPvj>
   d6378:	4620      	mov	r0, r4
   d637a:	bd10      	pop	{r4, pc}

000d637c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d637c:	b510      	push	{r4, lr}
   d637e:	2114      	movs	r1, #20
   d6380:	4604      	mov	r4, r0
   d6382:	f002 f8e1 	bl	d8548 <_ZdlPvj>
   d6386:	4620      	mov	r0, r4
   d6388:	bd10      	pop	{r4, pc}

000d638a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d638a:	b510      	push	{r4, lr}
   d638c:	2114      	movs	r1, #20
   d638e:	4604      	mov	r4, r0
   d6390:	f002 f8da 	bl	d8548 <_ZdlPvj>
   d6394:	4620      	mov	r0, r4
   d6396:	bd10      	pop	{r4, pc}

000d6398 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6398:	f7fd be7f 	b.w	d409a <_ZdlPv>

000d639c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d639c:	f7fd be7d 	b.w	d409a <_ZdlPv>

000d63a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d63a0:	f7fd be7b 	b.w	d409a <_ZdlPv>

000d63a4 <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d63a4:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d63a6:	7982      	ldrb	r2, [r0, #6]
   d63a8:	798b      	ldrb	r3, [r1, #6]
   d63aa:	429a      	cmp	r2, r3
   d63ac:	d106      	bne.n	d63bc <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d63ae:	2206      	movs	r2, #6
   d63b0:	f002 ff46 	bl	d9240 <memcmp>
   d63b4:	fab0 f080 	clz	r0, r0
   d63b8:	0940      	lsrs	r0, r0, #5
   d63ba:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d63bc:	2000      	movs	r0, #0
    }
   d63be:	bd08      	pop	{r3, pc}

000d63c0 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d63c0:	b510      	push	{r4, lr}
            : uuid_() {
   d63c2:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d63c4:	4604      	mov	r4, r0
            : uuid_() {
   d63c6:	2100      	movs	r1, #0
   d63c8:	f002 ff6f 	bl	d92aa <memset>
    }
   d63cc:	4620      	mov	r0, r4
   d63ce:	bd10      	pop	{r4, pc}

000d63d0 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d63d0:	b510      	push	{r4, lr}
            locked_(false) {
   d63d2:	2300      	movs	r3, #0
   d63d4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d63d6:	4b04      	ldr	r3, [pc, #16]	; (d63e8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d63d8:	4604      	mov	r4, r0
   d63da:	6818      	ldr	r0, [r3, #0]
   d63dc:	f7ff fbc0 	bl	d5b60 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d63e0:	2301      	movs	r3, #1
   d63e2:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d63e4:	4620      	mov	r0, r4
   d63e6:	bd10      	pop	{r4, pc}
   d63e8:	2003e380 	.word	0x2003e380

000d63ec <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d63ec:	b510      	push	{r4, lr}
        if (locked_) {
   d63ee:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d63f0:	4604      	mov	r4, r0
        if (locked_) {
   d63f2:	b11b      	cbz	r3, d63fc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d63f4:	4b02      	ldr	r3, [pc, #8]	; (d6400 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d63f6:	6818      	ldr	r0, [r3, #0]
   d63f8:	f7ff fbba 	bl	d5b70 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d63fc:	4620      	mov	r0, r4
   d63fe:	bd10      	pop	{r4, pc}
   d6400:	2003e380 	.word	0x2003e380

000d6404 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
 */
BleUuid::BleUuid(const BleUuid& uuid)
        : uuid_(uuid.uuid_) {
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d6404:	b570      	push	{r4, r5, r6, lr}
   d6406:	460c      	mov	r4, r1
   d6408:	4605      	mov	r5, r0
   d640a:	4616      	mov	r6, r2
        : BleUuid() {
   d640c:	f7ff ffd8 	bl	d63c0 <_ZN8particle7BleUuidC1Ev>
    if (uuid128 == nullptr) {
   d6410:	b92c      	cbnz	r4, d641e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6412:	2210      	movs	r2, #16
   d6414:	4621      	mov	r1, r4
   d6416:	4628      	mov	r0, r5
   d6418:	f002 ff47 	bl	d92aa <memset>
   d641c:	e016      	b.n	d644c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d641e:	2e01      	cmp	r6, #1
   d6420:	d109      	bne.n	d6436 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6422:	462b      	mov	r3, r5
   d6424:	f104 0210 	add.w	r2, r4, #16
   d6428:	f854 1b04 	ldr.w	r1, [r4], #4
   d642c:	f843 1b04 	str.w	r1, [r3], #4
   d6430:	4294      	cmp	r4, r2
   d6432:	d1f9      	bne.n	d6428 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d6434:	e008      	b.n	d6448 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d6436:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (uuid128 == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d6438:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d643a:	5ce1      	ldrb	r1, [r4, r3]
   d643c:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6440:	3b01      	subs	r3, #1
   d6442:	b2db      	uxtb	r3, r3
   d6444:	2bff      	cmp	r3, #255	; 0xff
   d6446:	d1f8      	bne.n	d643a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d6448:	2301      	movs	r3, #1
   d644a:	742b      	strb	r3, [r5, #16]
    }
}
   d644c:	4628      	mov	r0, r5
   d644e:	bd70      	pop	{r4, r5, r6, pc}

000d6450 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6450:	b538      	push	{r3, r4, r5, lr}
   d6452:	4604      	mov	r4, r0
   d6454:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6456:	461a      	mov	r2, r3
   d6458:	f7ff ffd4 	bl	d6404 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d645c:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d645e:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6460:	0a2d      	lsrs	r5, r5, #8
   d6462:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d6464:	7423      	strb	r3, [r4, #16]
}
   d6466:	4620      	mov	r0, r4
   d6468:	bd38      	pop	{r3, r4, r5, pc}

000d646a <_ZN8particle7BleUuidC1EPKc>:

BleUuid::BleUuid(const char* uuid)
   d646a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d646e:	4688      	mov	r8, r1
   d6470:	4607      	mov	r7, r0
        : BleUuid() {
   d6472:	f7ff ffa5 	bl	d63c0 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d6476:	f1b8 0f00 	cmp.w	r8, #0
   d647a:	d002      	beq.n	d6482 <_ZN8particle7BleUuidC1EPKc+0x18>
   d647c:	2600      	movs	r6, #0
   d647e:	2510      	movs	r5, #16
   d6480:	e00f      	b.n	d64a2 <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6482:	2210      	movs	r2, #16
   d6484:	4641      	mov	r1, r8
   d6486:	4638      	mov	r0, r7
   d6488:	f002 ff0f 	bl	d92aa <memset>
   d648c:	e04a      	b.n	d6524 <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d648e:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6492:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d6496:	b2d1      	uxtb	r1, r2
   d6498:	2909      	cmp	r1, #9
   d649a:	d808      	bhi.n	d64ae <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d649c:	1c53      	adds	r3, r2, #1
   d649e:	d114      	bne.n	d64ca <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d64a0:	3601      	adds	r6, #1
   d64a2:	4640      	mov	r0, r8
   d64a4:	f002 ff5f 	bl	d9366 <strlen>
   d64a8:	4286      	cmp	r6, r0
   d64aa:	d3f0      	bcc.n	d648e <_ZN8particle7BleUuidC1EPKc+0x24>
   d64ac:	e033      	b.n	d6516 <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d64ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d64b2:	2a05      	cmp	r2, #5
   d64b4:	d802      	bhi.n	d64bc <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d64b6:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d64ba:	e7ef      	b.n	d649c <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d64bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d64c0:	2a05      	cmp	r2, #5
   d64c2:	d8ed      	bhi.n	d64a0 <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d64c4:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d64c8:	e7e8      	b.n	d649c <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d64ca:	0112      	lsls	r2, r2, #4
   d64cc:	3d01      	subs	r5, #1
   d64ce:	b2d4      	uxtb	r4, r2
   d64d0:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d64d2:	4640      	mov	r0, r8
   d64d4:	f002 ff47 	bl	d9366 <strlen>
   d64d8:	3601      	adds	r6, #1
   d64da:	4286      	cmp	r6, r0
   d64dc:	d2e0      	bcs.n	d64a0 <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d64de:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d64e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d64e6:	b2d9      	uxtb	r1, r3
   d64e8:	2909      	cmp	r1, #9
   d64ea:	d90e      	bls.n	d650a <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d64ec:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d64f0:	2b05      	cmp	r3, #5
   d64f2:	d802      	bhi.n	d64fa <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d64f4:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d64f8:	e007      	b.n	d650a <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d64fa:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d64fe:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6500:	bf94      	ite	ls
   d6502:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d6506:	f04f 33ff 	movhi.w	r3, #4294967295
   d650a:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d650c:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d650e:	bf1c      	itt	ne
   d6510:	4314      	orrne	r4, r2
   d6512:	557c      	strbne	r4, [r7, r5]
   d6514:	e7c4      	b.n	d64a0 <_ZN8particle7BleUuidC1EPKc+0x36>
   d6516:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d6518:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d651a:	42bb      	cmp	r3, r7
   d651c:	d002      	beq.n	d6524 <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d651e:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d6522:	e7fa      	b.n	d651a <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d6524:	2301      	movs	r3, #1
   d6526:	743b      	strb	r3, [r7, #16]
}
   d6528:	4638      	mov	r0, r7
   d652a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d652e <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d652e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6530:	7c03      	ldrb	r3, [r0, #16]
   d6532:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d6536:	4604      	mov	r4, r0
   d6538:	d00a      	beq.n	d6550 <_ZNK8particle7BleUuid7isValidEv+0x22>
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d653a:	2210      	movs	r2, #16
   d653c:	2100      	movs	r1, #0
   d653e:	4668      	mov	r0, sp
   d6540:	f002 feb3 	bl	d92aa <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d6544:	2210      	movs	r2, #16
   d6546:	4669      	mov	r1, sp
   d6548:	4620      	mov	r0, r4
   d654a:	f002 fe79 	bl	d9240 <memcmp>
   d654e:	e000      	b.n	d6552 <_ZNK8particle7BleUuid7isValidEv+0x24>
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
   d6550:	8800      	ldrh	r0, [r0, #0]
   d6552:	3000      	adds	r0, #0
   d6554:	bf18      	it	ne
   d6556:	2001      	movne	r0, #1
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d6558:	b004      	add	sp, #16
   d655a:	bd10      	pop	{r4, pc}

000d655c <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d655c:	b510      	push	{r4, lr}
   d655e:	7c04      	ldrb	r4, [r0, #16]
   d6560:	f014 0ffd 	tst.w	r4, #253	; 0xfd
   d6564:	d006      	beq.n	d6574 <_ZNK8particle7BleUuideqERKS0_+0x18>
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6566:	2210      	movs	r2, #16
   d6568:	f002 fe6a 	bl	d9240 <memcmp>
   d656c:	fab0 f080 	clz	r0, r0
   d6570:	0940      	lsrs	r0, r0, #5
   d6572:	bd10      	pop	{r4, pc}
    }
}

bool BleUuid::operator==(const BleUuid& uuid) const {
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d6574:	8803      	ldrh	r3, [r0, #0]
   d6576:	8808      	ldrh	r0, [r1, #0]
   d6578:	1a1b      	subs	r3, r3, r0
   d657a:	4258      	negs	r0, r3
   d657c:	4158      	adcs	r0, r3
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d657e:	bd10      	pop	{r4, pc}

000d6580 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6580:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d6582:	b18b      	cbz	r3, d65a8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d6584:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d6586:	1ce5      	adds	r5, r4, #3
   d6588:	428d      	cmp	r5, r1
   d658a:	d80f      	bhi.n	d65ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d658c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d658e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d6590:	5d87      	ldrb	r7, [r0, r6]
   d6592:	4297      	cmp	r7, r2
   d6594:	d105      	bne.n	d65a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d6596:	442e      	add	r6, r5
   d6598:	42b1      	cmp	r1, r6
   d659a:	d307      	bcc.n	d65ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d659c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d659e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d65a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d65a2:	3501      	adds	r5, #1
   d65a4:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d65a6:	e7ee      	b.n	d6586 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d65a8:	4618      	mov	r0, r3
   d65aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d65ac:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d65ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d65b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d65b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d65b4:	4604      	mov	r4, r0
   d65b6:	460e      	mov	r6, r1
   d65b8:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d65ba:	4617      	mov	r7, r2
   d65bc:	2a00      	cmp	r2, #0
   d65be:	d03a      	beq.n	d6636 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d65c0:	460a      	mov	r2, r1
   d65c2:	ab01      	add	r3, sp, #4
   d65c4:	6a01      	ldr	r1, [r0, #32]
   d65c6:	f7ff ffdb 	bl	d6580 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d65ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d65ce:	6a22      	ldr	r2, [r4, #32]
   d65d0:	bb03      	cbnz	r3, d6614 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d65d2:	b1f8      	cbz	r0, d6614 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d65d4:	1c96      	adds	r6, r2, #2
   d65d6:	442e      	add	r6, r5
   d65d8:	1a36      	subs	r6, r6, r0
   d65da:	2e1f      	cmp	r6, #31
   d65dc:	d82b      	bhi.n	d6636 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d65de:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d65e2:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d65e6:	ebc8 0202 	rsb	r2, r8, r2
   d65ea:	1a12      	subs	r2, r2, r0
   d65ec:	eb00 0108 	add.w	r1, r0, r8
   d65f0:	eb05 0009 	add.w	r0, r5, r9
   d65f4:	b292      	uxth	r2, r2
   d65f6:	4421      	add	r1, r4
   d65f8:	4420      	add	r0, r4
   d65fa:	f002 fe3b 	bl	d9274 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d65fe:	1c6b      	adds	r3, r5, #1
   d6600:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d6604:	462a      	mov	r2, r5
   d6606:	4639      	mov	r1, r7
   d6608:	eb04 0009 	add.w	r0, r4, r9
   d660c:	f002 fe27 	bl	d925e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d6610:	6226      	str	r6, [r4, #32]
   d6612:	e010      	b.n	d6636 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d6614:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6616:	182b      	adds	r3, r5, r0
   d6618:	2b1f      	cmp	r3, #31
   d661a:	d80c      	bhi.n	d6636 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d661c:	1c6b      	adds	r3, r5, #1
   d661e:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6620:	4422      	add	r2, r4
   d6622:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6624:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6626:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d6628:	4420      	add	r0, r4
   d662a:	462a      	mov	r2, r5
   d662c:	f002 fe17 	bl	d925e <memcpy>
        selfLen_ += len;
   d6630:	6a22      	ldr	r2, [r4, #32]
   d6632:	442a      	add	r2, r5
   d6634:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d6636:	6a20      	ldr	r0, [r4, #32]
}
   d6638:	b003      	add	sp, #12
   d663a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d663e <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d663e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6640:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d6642:	4603      	mov	r3, r0
   d6644:	f100 021f 	add.w	r2, r0, #31
   d6648:	2000      	movs	r0, #0
   d664a:	f803 0b01 	strb.w	r0, [r3], #1
   d664e:	4293      	cmp	r3, r2
   d6650:	f04f 0100 	mov.w	r1, #0
   d6654:	d1f9      	bne.n	d664a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6656:	aa04      	add	r2, sp, #16
   d6658:	2306      	movs	r3, #6
   d665a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d665e:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d6660:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6662:	9100      	str	r1, [sp, #0]
   d6664:	4620      	mov	r0, r4
   d6666:	4619      	mov	r1, r3
   d6668:	f7ff ffa2 	bl	d65b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d666c:	4620      	mov	r0, r4
   d666e:	b004      	add	sp, #16
   d6670:	bd10      	pop	{r4, pc}

000d6672 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d6672:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6674:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d6676:	4608      	mov	r0, r1
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d6678:	460c      	mov	r4, r1
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d667a:	f002 fe74 	bl	d9366 <strlen>
   d667e:	2300      	movs	r3, #0
   d6680:	9300      	str	r3, [sp, #0]
   d6682:	4622      	mov	r2, r4
   d6684:	4603      	mov	r3, r0
   d6686:	2109      	movs	r1, #9
   d6688:	4628      	mov	r0, r5
   d668a:	f7ff ff91 	bl	d65b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d668e:	b003      	add	sp, #12
   d6690:	bd30      	pop	{r4, r5, pc}

000d6692 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6692:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d6694:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6696:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d6698:	ab01      	add	r3, sp, #4
   d669a:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d669c:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d669e:	f7ff ff6f 	bl	d6580 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d66a2:	4605      	mov	r5, r0
   d66a4:	b178      	cbz	r0, d66c6 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d66a6:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d66a8:	6a22      	ldr	r2, [r4, #32]
   d66aa:	1829      	adds	r1, r5, r0
   d66ac:	1a12      	subs	r2, r2, r0
   d66ae:	1b52      	subs	r2, r2, r5
   d66b0:	4421      	add	r1, r4
   d66b2:	4420      	add	r0, r4
   d66b4:	f002 fdd3 	bl	d925e <memcpy>
        selfLen_ -= len;
   d66b8:	6a23      	ldr	r3, [r4, #32]
   d66ba:	1b5d      	subs	r5, r3, r5
   d66bc:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d66be:	4631      	mov	r1, r6
   d66c0:	4620      	mov	r0, r4
   d66c2:	f7ff ffe6 	bl	d6692 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d66c6:	b002      	add	sp, #8
   d66c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d66cc <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d66cc:	b538      	push	{r3, r4, r5, lr}
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d66ce:	2500      	movs	r5, #0
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d66d0:	4604      	mov	r4, r0
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d66d2:	f800 5b02 	strb.w	r5, [r0], #2
   d66d6:	f7ff fe73 	bl	d63c0 <_ZN8particle7BleUuidC1Ev>
   d66da:	f104 0016 	add.w	r0, r4, #22
   d66de:	f7ff fe6f 	bl	d63c0 <_ZN8particle7BleUuidC1Ev>
   d66e2:	4909      	ldr	r1, [pc, #36]	; (d6708 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d66e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d66e8:	f7ff fd46 	bl	d6178 <_ZN6StringC1EPK19__FlashStringHelper>
   d66ec:	2301      	movs	r3, #1
   d66ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d66f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d66f6:	64e5      	str	r5, [r4, #76]	; 0x4c
   d66f8:	6525      	str	r5, [r4, #80]	; 0x50
   d66fa:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   d66fe:	65a5      	str	r5, [r4, #88]	; 0x58
   d6700:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    }
   d6704:	4620      	mov	r0, r4
   d6706:	bd38      	pop	{r3, r4, r5, pc}
   d6708:	000da0a6 	.word	0x000da0a6

000d670c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d670c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6710:	e890 0050 	ldmia.w	r0, {r4, r6}
   d6714:	460d      	mov	r5, r1
   d6716:	4617      	mov	r7, r2
   d6718:	4698      	mov	r8, r3
   d671a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d671e:	42a6      	cmp	r6, r4
   d6720:	d033      	beq.n	d678a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d6722:	6823      	ldr	r3, [r4, #0]
   d6724:	699a      	ldr	r2, [r3, #24]
   d6726:	69d9      	ldr	r1, [r3, #28]
   d6728:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d672c:	4291      	cmp	r1, r2
   d672e:	d01b      	beq.n	d6768 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d6730:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d6732:	b19b      	cbz	r3, d675c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d6734:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d6738:	42a8      	cmp	r0, r5
   d673a:	d011      	beq.n	d6760 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d673c:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d6740:	42a8      	cmp	r0, r5
   d6742:	d00d      	beq.n	d6760 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d6744:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d6748:	42a8      	cmp	r0, r5
   d674a:	d009      	beq.n	d6760 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d674c:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d6750:	42a8      	cmp	r0, r5
   d6752:	d005      	beq.n	d6760 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d6754:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d6758:	42a8      	cmp	r0, r5
   d675a:	d001      	beq.n	d6760 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d675c:	3208      	adds	r2, #8
   d675e:	e7e5      	b.n	d672c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d6760:	b117      	cbz	r7, d6768 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d6762:	f1b8 0f00 	cmp.w	r8, #0
   d6766:	d101      	bne.n	d676c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d6768:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d676a:	e7d8      	b.n	d671e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d676c:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d6770:	f1b9 0f00 	cmp.w	r9, #0
   d6774:	d0f8      	beq.n	d6768 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d6776:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d677a:	42aa      	cmp	r2, r5
   d677c:	d1f4      	bne.n	d6768 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6780:	9a08      	ldr	r2, [sp, #32]
   d6782:	4641      	mov	r1, r8
   d6784:	4638      	mov	r0, r7
   d6786:	47c8      	blx	r9
   d6788:	e7ee      	b.n	d6768 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d678a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d678e <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>:
            }
        }
    }

private:
    BleService* getService(const BleUuid& uuid) {
   d678e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6790:	e890 0050 	ldmia.w	r0, {r4, r6}
   d6794:	460f      	mov	r7, r1
   d6796:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d679a:	42b4      	cmp	r4, r6
   d679c:	4625      	mov	r5, r4
   d679e:	d008      	beq.n	d67b2 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0x24>
            if (service.impl()->uuid == uuid) {
   d67a0:	4639      	mov	r1, r7
   d67a2:	f854 0b08 	ldr.w	r0, [r4], #8
   d67a6:	f7ff fed9 	bl	d655c <_ZNK8particle7BleUuideqERKS0_>
   d67aa:	2800      	cmp	r0, #0
   d67ac:	d0f5      	beq.n	d679a <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0xc>
   d67ae:	4628      	mov	r0, r5
   d67b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return &service;
            }
        }
        return nullptr;
   d67b2:	2000      	movs	r0, #0
    }
   d67b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67b6 <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d67b6:	b508      	push	{r3, lr}
   d67b8:	6800      	ldr	r0, [r0, #0]
   d67ba:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d67bc:	8ac2      	ldrh	r2, [r0, #22]
   d67be:	8acb      	ldrh	r3, [r1, #22]
   d67c0:	429a      	cmp	r2, r3
   d67c2:	d104      	bne.n	d67ce <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d67c4:	3101      	adds	r1, #1
   d67c6:	3001      	adds	r0, #1
   d67c8:	f7ff fdec 	bl	d63a4 <_ZNK8particle10BleAddresseqERKS0_>
   d67cc:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d67ce:	2000      	movs	r0, #0
}
   d67d0:	bd08      	pop	{r3, pc}

000d67d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d67d2:	4608      	mov	r0, r1
   d67d4:	b909      	cbnz	r1, d67da <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d67d6:	460a      	mov	r2, r1
   d67d8:	e001      	b.n	d67de <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d67da:	6a09      	ldr	r1, [r1, #32]
   d67dc:	2200      	movs	r2, #0
   d67de:	f7ff b95b 	b.w	d5a98 <hal_ble_gap_set_advertising_data>

000d67e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d67e2:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d67e4:	460c      	mov	r4, r1
   d67e6:	b911      	cbnz	r1, d67ee <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d67e8:	460a      	mov	r2, r1
   d67ea:	4608      	mov	r0, r1
   d67ec:	e006      	b.n	d67fc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d67ee:	2101      	movs	r1, #1
   d67f0:	4620      	mov	r0, r4
   d67f2:	f7ff ff4e 	bl	d6692 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d67f6:	6a21      	ldr	r1, [r4, #32]
   d67f8:	2200      	movs	r2, #0
   d67fa:	4620      	mov	r0, r4
    }
}
   d67fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6800:	f7ff b952 	b.w	d5aa8 <hal_ble_gap_set_scan_response_data>

000d6804 <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d6804:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6806:	a801      	add	r0, sp, #4
   d6808:	f7ff fde2 	bl	d63d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d680c:	2000      	movs	r0, #0
   d680e:	f7ff f953 	bl	d5ab8 <hal_ble_gap_start_advertising>
   d6812:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d6814:	a801      	add	r0, sp, #4
   d6816:	f7ff fde9 	bl	d63ec <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d681a:	4620      	mov	r0, r4
   d681c:	b002      	add	sp, #8
   d681e:	bd10      	pop	{r4, pc}

000d6820 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6820:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6822:	4605      	mov	r5, r0
   d6824:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6826:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6828:	4616      	mov	r6, r2
    WiringBleLock lk;
   d682a:	f7ff fdd1 	bl	d63d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d682e:	4621      	mov	r1, r4
   d6830:	4628      	mov	r0, r5
   d6832:	f7ff ffce 	bl	d67d2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6836:	2800      	cmp	r0, #0
   d6838:	db08      	blt.n	d684c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d683a:	4631      	mov	r1, r6
   d683c:	4628      	mov	r0, r5
   d683e:	f7ff ffd0 	bl	d67e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6842:	2800      	cmp	r0, #0
   d6844:	db02      	blt.n	d684c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d6846:	4628      	mov	r0, r5
   d6848:	f7ff ffdc 	bl	d6804 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d684c:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d684e:	a801      	add	r0, sp, #4
   d6850:	f7ff fdcc 	bl	d63ec <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d6854:	4620      	mov	r0, r4
   d6856:	b002      	add	sp, #8
   d6858:	bd70      	pop	{r4, r5, r6, pc}

000d685a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d685a:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d685c:	6983      	ldr	r3, [r0, #24]
   d685e:	e893 0014 	ldmia.w	r3, {r2, r4}
   d6862:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d6866:	42a2      	cmp	r2, r4
   d6868:	4613      	mov	r3, r2
   d686a:	d007      	beq.n	d687c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d686c:	681d      	ldr	r5, [r3, #0]
   d686e:	8aed      	ldrh	r5, [r5, #22]
   d6870:	428d      	cmp	r5, r1
   d6872:	f102 0208 	add.w	r2, r2, #8
   d6876:	d1f6      	bne.n	d6866 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d6878:	4618      	mov	r0, r3
   d687a:	bd30      	pop	{r4, r5, pc}
   d687c:	69c2      	ldr	r2, [r0, #28]
   d687e:	6813      	ldr	r3, [r2, #0]
   d6880:	6852      	ldr	r2, [r2, #4]
   d6882:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d6886:	429a      	cmp	r2, r3
   d6888:	4618      	mov	r0, r3
   d688a:	d006      	beq.n	d689a <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d688c:	6804      	ldr	r4, [r0, #0]
   d688e:	8ae4      	ldrh	r4, [r4, #22]
   d6890:	428c      	cmp	r4, r1
   d6892:	f103 0308 	add.w	r3, r3, #8
   d6896:	d1f6      	bne.n	d6886 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d6898:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d689a:	2000      	movs	r0, #0
}
   d689c:	bd30      	pop	{r4, r5, pc}

000d689e <_ZN8particle17BleCharacteristicD1Ev>:
    }
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d689e:	b510      	push	{r4, lr}
   d68a0:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d68a2:	3004      	adds	r0, #4
   d68a4:	f7fe f92c 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d68a8:	4620      	mov	r0, r4
   d68aa:	bd10      	pop	{r4, pc}

000d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d68ac:	680b      	ldr	r3, [r1, #0]
   d68ae:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d68b0:	b113      	cbz	r3, d68b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d68b2:	685a      	ldr	r2, [r3, #4]
   d68b4:	3201      	adds	r2, #1
   d68b6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d68b8:	4770      	bx	lr

000d68ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d68ba:	b510      	push	{r4, lr}
   d68bc:	f851 3b04 	ldr.w	r3, [r1], #4
   d68c0:	4604      	mov	r4, r0
   d68c2:	f840 3b04 	str.w	r3, [r0], #4
   d68c6:	f7ff fff1 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d68ca:	4620      	mov	r0, r4
   d68cc:	bd10      	pop	{r4, pc}

000d68ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d68ce:	b510      	push	{r4, lr}
   d68d0:	f851 3b04 	ldr.w	r3, [r1], #4
   d68d4:	4604      	mov	r4, r0
   d68d6:	f840 3b04 	str.w	r3, [r0], #4
   d68da:	f7ff ffe7 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d68de:	4620      	mov	r0, r4
   d68e0:	bd10      	pop	{r4, pc}

000d68e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d68e2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d68e4:	6804      	ldr	r4, [r0, #0]
   d68e6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d68e8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d68ea:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d68ee:	42a6      	cmp	r6, r4
   d68f0:	d004      	beq.n	d68fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d68f2:	1d20      	adds	r0, r4, #4
   d68f4:	f7fe f904 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68f8:	3408      	adds	r4, #8
   d68fa:	e7f8      	b.n	d68ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d68fc:	6828      	ldr	r0, [r5, #0]
   d68fe:	f7ff fafb 	bl	d5ef8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6902:	4628      	mov	r0, r5
   d6904:	bd70      	pop	{r4, r5, r6, pc}

000d6906 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d6906:	b538      	push	{r3, r4, r5, lr}
   d6908:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d690a:	2010      	movs	r0, #16
   d690c:	780d      	ldrb	r5, [r1, #0]
   d690e:	f7fd fbc2 	bl	d4096 <_Znwj>
   d6912:	b120      	cbz	r0, d691e <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6914:	2300      	movs	r3, #0
   d6916:	6003      	str	r3, [r0, #0]
   d6918:	6043      	str	r3, [r0, #4]
   d691a:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d691c:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d691e:	6020      	str	r0, [r4, #0]
   d6920:	4620      	mov	r0, r4
   d6922:	bd38      	pop	{r3, r4, r5, pc}

000d6924 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d6924:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6926:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d6928:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d692a:	b134      	cbz	r4, d693a <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d692c:	4620      	mov	r0, r4
   d692e:	f7ff ffd8 	bl	d68e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6932:	2110      	movs	r1, #16
   d6934:	4620      	mov	r0, r4
   d6936:	f001 fe07 	bl	d8548 <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d693a:	4628      	mov	r0, r5
   d693c:	bd38      	pop	{r3, r4, r5, pc}

000d693e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d693e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6940:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d6942:	f104 001c 	add.w	r0, r4, #28
   d6946:	f7ff ffed 	bl	d6924 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d694a:	4620      	mov	r0, r4
   d694c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6950:	f7fd bba3 	b.w	d409a <_ZdlPv>

000d6954 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d6954:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6956:	6804      	ldr	r4, [r0, #0]
   d6958:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d695a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d695c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6960:	42a6      	cmp	r6, r4
   d6962:	d004      	beq.n	d696e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6964:	1d20      	adds	r0, r4, #4
   d6966:	f7fe f8cb 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d696a:	3408      	adds	r4, #8
   d696c:	e7f8      	b.n	d6960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d696e:	2300      	movs	r3, #0
   d6970:	606b      	str	r3, [r5, #4]
   d6972:	bd70      	pop	{r4, r5, r6, pc}

000d6974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6974:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6978:	4606      	mov	r6, r0
   d697a:	460c      	mov	r4, r1
   d697c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d697e:	d914      	bls.n	d69aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6980:	4290      	cmp	r0, r2
   d6982:	d213      	bcs.n	d69ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6984:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6988:	1a6c      	subs	r4, r5, r1
   d698a:	f1a1 0708 	sub.w	r7, r1, #8
   d698e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6990:	42af      	cmp	r7, r5
   d6992:	d018      	beq.n	d69c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6994:	b11c      	cbz	r4, d699e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6996:	4629      	mov	r1, r5
   d6998:	4620      	mov	r0, r4
   d699a:	f7ff ff98 	bl	d68ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d699e:	1d28      	adds	r0, r5, #4
   d69a0:	f7fe f8ae 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d69a4:	3d08      	subs	r5, #8
   d69a6:	3c08      	subs	r4, #8
   d69a8:	e7f2      	b.n	d6990 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d69aa:	d00c      	beq.n	d69c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d69ac:	42ac      	cmp	r4, r5
   d69ae:	d00a      	beq.n	d69c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d69b0:	b11e      	cbz	r6, d69ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d69b2:	4621      	mov	r1, r4
   d69b4:	4630      	mov	r0, r6
   d69b6:	f7ff ff8a 	bl	d68ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d69ba:	1d20      	adds	r0, r4, #4
   d69bc:	f7fe f8a0 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d69c0:	3408      	adds	r4, #8
   d69c2:	3608      	adds	r6, #8
   d69c4:	e7f2      	b.n	d69ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d69c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69c8 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d69c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d69ca:	680b      	ldr	r3, [r1, #0]
   d69cc:	69da      	ldr	r2, [r3, #28]
   d69ce:	460e      	mov	r6, r1
   d69d0:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d69d2:	6851      	ldr	r1, [r2, #4]
   d69d4:	4605      	mov	r5, r0
   d69d6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d69da:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d69dc:	4299      	cmp	r1, r3
   d69de:	d00d      	beq.n	d69fc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d69e0:	6818      	ldr	r0, [r3, #0]
   d69e2:	6982      	ldr	r2, [r0, #24]
   d69e4:	69c0      	ldr	r0, [r0, #28]
   d69e6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d69ea:	4290      	cmp	r0, r2
   d69ec:	d004      	beq.n	d69f8 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d69ee:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d69f2:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d69f6:	e7f8      	b.n	d69ea <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d69f8:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d69fa:	e7ef      	b.n	d69dc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d69fc:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d69fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d6a02:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d6a04:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d6a06:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d6a08:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d6a0a:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d6a0c:	f8c3 200a 	str.w	r2, [r3, #10]
   d6a10:	f8c3 200e 	str.w	r2, [r3, #14]
   d6a14:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d6a18:	682c      	ldr	r4, [r5, #0]
   d6a1a:	686b      	ldr	r3, [r5, #4]
   d6a1c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6a20:	42bc      	cmp	r4, r7
   d6a22:	d016      	beq.n	d6a52 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d6a24:	4631      	mov	r1, r6
   d6a26:	4620      	mov	r0, r4
   d6a28:	f7ff fec5 	bl	d67b6 <_ZN8particle13BlePeerDeviceeqERKS0_>
   d6a2c:	b908      	cbnz	r0, d6a32 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6a2e:	3408      	adds	r4, #8
   d6a30:	e7f6      	b.n	d6a20 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6a32:	b174      	cbz	r4, d6a52 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d6a34:	1d20      	adds	r0, r4, #4
   d6a36:	f7fe f863 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6a3a:	682b      	ldr	r3, [r5, #0]
   d6a3c:	686a      	ldr	r2, [r5, #4]
   d6a3e:	f104 0108 	add.w	r1, r4, #8
   d6a42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6a46:	4620      	mov	r0, r4
   d6a48:	f7ff ff94 	bl	d6974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6a4c:	686b      	ldr	r3, [r5, #4]
   d6a4e:	3b01      	subs	r3, #1
   d6a50:	606b      	str	r3, [r5, #4]
   d6a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6a56:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6a58:	6846      	ldr	r6, [r0, #4]
   d6a5a:	4668      	mov	r0, sp
   d6a5c:	f7ff ff37 	bl	d68ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a60:	6867      	ldr	r7, [r4, #4]
   d6a62:	68a3      	ldr	r3, [r4, #8]
   d6a64:	429f      	cmp	r7, r3
   d6a66:	db14      	blt.n	d6a92 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d6a68:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6a6a:	2f00      	cmp	r7, #0
   d6a6c:	dd0b      	ble.n	d6a86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6a6e:	00f8      	lsls	r0, r7, #3
   d6a70:	f7ff fa3a 	bl	d5ee8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6a74:	4605      	mov	r5, r0
   d6a76:	b300      	cbz	r0, d6aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d6a78:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6a7c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6a80:	f7ff ff78 	bl	d6974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6a84:	e000      	b.n	d6a88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6a86:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a88:	6820      	ldr	r0, [r4, #0]
   d6a8a:	f7ff fa35 	bl	d5ef8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6a8e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6a90:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a92:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6a94:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a96:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6a9a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6a9e:	4629      	mov	r1, r5
   d6aa0:	f105 0008 	add.w	r0, r5, #8
   d6aa4:	f7ff ff66 	bl	d6974 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6aa8:	b11d      	cbz	r5, d6ab2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d6aaa:	4669      	mov	r1, sp
   d6aac:	4628      	mov	r0, r5
   d6aae:	f7ff ff0e 	bl	d68ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6ab2:	6863      	ldr	r3, [r4, #4]
   d6ab4:	3301      	adds	r3, #1
   d6ab6:	6063      	str	r3, [r4, #4]
   d6ab8:	2501      	movs	r5, #1
   d6aba:	a801      	add	r0, sp, #4
   d6abc:	f7fe f820 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6ac0:	4628      	mov	r0, r5
   d6ac2:	b003      	add	sp, #12
   d6ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ac6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6ac6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6ac8:	6804      	ldr	r4, [r0, #0]
   d6aca:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6acc:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6ace:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6ad2:	42a6      	cmp	r6, r4
   d6ad4:	d004      	beq.n	d6ae0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6ad6:	1d20      	adds	r0, r4, #4
   d6ad8:	f7fe f812 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6adc:	3408      	adds	r4, #8
   d6ade:	e7f8      	b.n	d6ad2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6ae0:	6828      	ldr	r0, [r5, #0]
   d6ae2:	f7ff fa09 	bl	d5ef8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6ae6:	4628      	mov	r0, r5
   d6ae8:	bd70      	pop	{r4, r5, r6, pc}

000d6aea <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6aea:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6aec:	4604      	mov	r4, r0
   d6aee:	b138      	cbz	r0, d6b00 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d6af0:	f7ff ffe9 	bl	d6ac6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d6af4:	4620      	mov	r0, r4
   d6af6:	210c      	movs	r1, #12
      }
   d6af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6afc:	f001 bd24 	b.w	d8548 <_ZdlPvj>
   d6b00:	bd10      	pop	{r4, pc}

000d6b02 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6b02:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b04:	4604      	mov	r4, r0
   d6b06:	b138      	cbz	r0, d6b18 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d6b08:	f7ff ffdd 	bl	d6ac6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d6b0c:	4620      	mov	r0, r4
   d6b0e:	210c      	movs	r1, #12
      }
   d6b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b14:	f001 bd18 	b.w	d8548 <_ZdlPvj>
   d6b18:	bd10      	pop	{r4, pc}
	...

000d6b1c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d6b1e:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6b20:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d6b22:	6005      	str	r5, [r0, #0]
   d6b24:	6045      	str	r5, [r0, #4]
   d6b26:	6085      	str	r5, [r0, #8]
   d6b28:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6b2a:	6105      	str	r5, [r0, #16]
   d6b2c:	6145      	str	r5, [r0, #20]
   d6b2e:	6185      	str	r5, [r0, #24]
   d6b30:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6b32:	4628      	mov	r0, r5
   d6b34:	f7fe ffa0 	bl	d5a78 <hal_ble_stack_init>
   d6b38:	b120      	cbz	r0, d6b44 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d6b3a:	4a25      	ldr	r2, [pc, #148]	; (d6bd0 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d6b3c:	4629      	mov	r1, r5
   d6b3e:	200a      	movs	r0, #10
   d6b40:	f7ff f8ee 	bl	d5d20 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d6b44:	2301      	movs	r3, #1
   d6b46:	f10d 0103 	add.w	r1, sp, #3
   d6b4a:	a801      	add	r0, sp, #4
   d6b4c:	f88d 3003 	strb.w	r3, [sp, #3]
   d6b50:	f7ff fed9 	bl	d6906 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b54:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b56:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6b58:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d6b5a:	2200      	movs	r2, #0
   d6b5c:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b5e:	b135      	cbz	r5, d6b6e <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d6b60:	4628      	mov	r0, r5
   d6b62:	f7ff febe 	bl	d68e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b66:	2110      	movs	r1, #16
   d6b68:	4628      	mov	r0, r5
   d6b6a:	f001 fced 	bl	d8548 <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d6b6e:	a801      	add	r0, sp, #4
   d6b70:	f7ff fed8 	bl	d6924 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6b74:	2001      	movs	r0, #1
   d6b76:	f7fd fa8e 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b7a:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b7c:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b7e:	b11b      	cbz	r3, d6b88 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b80:	2101      	movs	r1, #1
   d6b82:	4618      	mov	r0, r3
   d6b84:	f001 fce0 	bl	d8548 <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6b88:	200c      	movs	r0, #12
   d6b8a:	f7fd fa84 	bl	d4096 <_Znwj>
   d6b8e:	4603      	mov	r3, r0
   d6b90:	b118      	cbz	r0, d6b9a <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d6b92:	2200      	movs	r2, #0
   d6b94:	6002      	str	r2, [r0, #0]
   d6b96:	6042      	str	r2, [r0, #4]
   d6b98:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b9a:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6b9c:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b9e:	b108      	cbz	r0, d6ba4 <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d6ba0:	f7ff ffa3 	bl	d6aea <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6ba4:	200c      	movs	r0, #12
   d6ba6:	f7fd fa76 	bl	d4096 <_Znwj>
   d6baa:	4603      	mov	r3, r0
   d6bac:	b118      	cbz	r0, d6bb6 <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d6bae:	2200      	movs	r2, #0
   d6bb0:	6002      	str	r2, [r0, #0]
   d6bb2:	6042      	str	r2, [r0, #4]
   d6bb4:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bb6:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6bb8:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6bba:	b108      	cbz	r0, d6bc0 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d6bbc:	f7ff ffa1 	bl	d6b02 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d6bc0:	2200      	movs	r2, #0
   d6bc2:	4621      	mov	r1, r4
   d6bc4:	4803      	ldr	r0, [pc, #12]	; (d6bd4 <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d6bc6:	f7fe ff5f 	bl	d5a88 <hal_ble_set_callback_on_events>
}
   d6bca:	4620      	mov	r0, r4
   d6bcc:	b003      	add	sp, #12
   d6bce:	bd30      	pop	{r4, r5, pc}
   d6bd0:	000d5a39 	.word	0x000d5a39
   d6bd4:	000d6ff9 	.word	0x000d6ff9

000d6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6bd8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6bda:	4c0a      	ldr	r4, [pc, #40]	; (d6c04 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d6bdc:	6823      	ldr	r3, [r4, #0]
   d6bde:	07db      	lsls	r3, r3, #31
   d6be0:	d40e      	bmi.n	d6c00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6be2:	4620      	mov	r0, r4
   d6be4:	f7fd fa5d 	bl	d40a2 <__cxa_guard_acquire>
   d6be8:	b150      	cbz	r0, d6c00 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6bea:	4807      	ldr	r0, [pc, #28]	; (d6c08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6bec:	f7ff ff96 	bl	d6b1c <_ZN8particle14BleLocalDeviceC1Ev>
   d6bf0:	4620      	mov	r0, r4
   d6bf2:	f7fd fa5b 	bl	d40ac <__cxa_guard_release>
   d6bf6:	4a05      	ldr	r2, [pc, #20]	; (d6c0c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6bf8:	4905      	ldr	r1, [pc, #20]	; (d6c10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6bfa:	4803      	ldr	r0, [pc, #12]	; (d6c08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6bfc:	f001 fc96 	bl	d852c <__aeabi_atexit>
    return instance;
}
   d6c00:	4801      	ldr	r0, [pc, #4]	; (d6c08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6c02:	bd10      	pop	{r4, pc}
   d6c04:	2003e378 	.word	0x2003e378
   d6c08:	2003e358 	.word	0x2003e358
   d6c0c:	2003dc84 	.word	0x2003dc84
   d6c10:	000d6c15 	.word	0x000d6c15

000d6c14 <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6c14:	b510      	push	{r4, lr}
   d6c16:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c18:	69c0      	ldr	r0, [r0, #28]
   d6c1a:	b108      	cbz	r0, d6c20 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d6c1c:	f7ff ff71 	bl	d6b02 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c20:	69a0      	ldr	r0, [r4, #24]
   d6c22:	b108      	cbz	r0, d6c28 <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d6c24:	f7ff ff61 	bl	d6aea <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c28:	6960      	ldr	r0, [r4, #20]
   d6c2a:	b110      	cbz	r0, d6c32 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c2c:	2101      	movs	r1, #1
   d6c2e:	f001 fc8b 	bl	d8548 <_ZdlPvj>
   d6c32:	f104 0010 	add.w	r0, r4, #16
   d6c36:	f7ff fe75 	bl	d6924 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d6c3a:	4620      	mov	r0, r4
   d6c3c:	bd10      	pop	{r4, pc}

000d6c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6c3e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c42:	4606      	mov	r6, r0
   d6c44:	460c      	mov	r4, r1
   d6c46:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6c48:	d914      	bls.n	d6c74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6c4a:	4290      	cmp	r0, r2
   d6c4c:	d213      	bcs.n	d6c76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6c4e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6c52:	1a6c      	subs	r4, r5, r1
   d6c54:	f1a1 0708 	sub.w	r7, r1, #8
   d6c58:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6c5a:	42af      	cmp	r7, r5
   d6c5c:	d018      	beq.n	d6c90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6c5e:	b11c      	cbz	r4, d6c68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6c60:	4629      	mov	r1, r5
   d6c62:	4620      	mov	r0, r4
   d6c64:	f7ff fe29 	bl	d68ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c68:	1d28      	adds	r0, r5, #4
   d6c6a:	f7fd ff49 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6c6e:	3d08      	subs	r5, #8
   d6c70:	3c08      	subs	r4, #8
   d6c72:	e7f2      	b.n	d6c5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6c74:	d00c      	beq.n	d6c90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6c76:	42ac      	cmp	r4, r5
   d6c78:	d00a      	beq.n	d6c90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6c7a:	b11e      	cbz	r6, d6c84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6c7c:	4621      	mov	r1, r4
   d6c7e:	4630      	mov	r0, r6
   d6c80:	f7ff fe1b 	bl	d68ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c84:	1d20      	adds	r0, r4, #4
   d6c86:	f7fd ff3b 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6c8a:	3408      	adds	r4, #8
   d6c8c:	3608      	adds	r6, #8
   d6c8e:	e7f2      	b.n	d6c76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6c94:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6c96:	6846      	ldr	r6, [r0, #4]
   d6c98:	4668      	mov	r0, sp
   d6c9a:	f7ff fe0e 	bl	d68ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c9e:	6867      	ldr	r7, [r4, #4]
   d6ca0:	68a3      	ldr	r3, [r4, #8]
   d6ca2:	429f      	cmp	r7, r3
   d6ca4:	db14      	blt.n	d6cd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d6ca6:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6ca8:	2f00      	cmp	r7, #0
   d6caa:	dd0b      	ble.n	d6cc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6cac:	00f8      	lsls	r0, r7, #3
   d6cae:	f7ff f91b 	bl	d5ee8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6cb2:	4605      	mov	r5, r0
   d6cb4:	b300      	cbz	r0, d6cf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d6cb6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6cba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6cbe:	f7ff ffbe 	bl	d6c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6cc2:	e000      	b.n	d6cc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6cc4:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6cc6:	6820      	ldr	r0, [r4, #0]
   d6cc8:	f7ff f916 	bl	d5ef8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6ccc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6cce:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6cd0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6cd2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6cd4:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6cd8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6cdc:	4629      	mov	r1, r5
   d6cde:	f105 0008 	add.w	r0, r5, #8
   d6ce2:	f7ff ffac 	bl	d6c3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6ce6:	b11d      	cbz	r5, d6cf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d6ce8:	4669      	mov	r1, sp
   d6cea:	4628      	mov	r0, r5
   d6cec:	f7ff fde5 	bl	d68ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6cf0:	6863      	ldr	r3, [r4, #4]
   d6cf2:	3301      	adds	r3, #1
   d6cf4:	6063      	str	r3, [r4, #4]
   d6cf6:	2501      	movs	r5, #1
   d6cf8:	a801      	add	r0, sp, #4
   d6cfa:	f7fd ff01 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6cfe:	4628      	mov	r0, r5
   d6d00:	b003      	add	sp, #12
   d6d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6d04 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>:
            }
        }
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d6d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d08:	680c      	ldr	r4, [r1, #0]
   d6d0a:	b08b      	sub	sp, #44	; 0x2c
   d6d0c:	4606      	mov	r6, r0
   d6d0e:	460f      	mov	r7, r1
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d6d10:	b314      	cbz	r4, d6d58 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
   d6d12:	6985      	ldr	r5, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6d14:	69c3      	ldr	r3, [r0, #28]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d6d16:	f104 0a02 	add.w	sl, r4, #2
   d6d1a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
                && svcUuid == impl.svcUuid
   d6d1e:	f104 0b16 	add.w	fp, r4, #22
    BleAttributeHandle endHandle;

private:
    bool contains(const BleCharacteristic& characteristic) {
        if (characteristic.impl() != nullptr) {
            for (const auto& stubChar : characteristics_) {
   d6d22:	45a8      	cmp	r8, r5
   d6d24:	d016      	beq.n	d6d54 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x50>
   d6d26:	f8d5 9000 	ldr.w	r9, [r5]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d6d2a:	4650      	mov	r0, sl
   d6d2c:	f109 0102 	add.w	r1, r9, #2
   d6d30:	f7ff fc14 	bl	d655c <_ZNK8particle7BleUuideqERKS0_>
                && svcUuid == impl.svcUuid
                && isLocal == impl.isLocal) {
   d6d34:	2800      	cmp	r0, #0
   d6d36:	d06b      	beq.n	d6e10 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
                && svcUuid == impl.svcUuid
   d6d38:	f109 0116 	add.w	r1, r9, #22
   d6d3c:	4658      	mov	r0, fp
   d6d3e:	f7ff fc0d 	bl	d655c <_ZNK8particle7BleUuideqERKS0_>
   d6d42:	2800      	cmp	r0, #0
   d6d44:	d064      	beq.n	d6e10 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
                && isLocal == impl.isLocal) {
   d6d46:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d6d4a:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
   d6d4e:	429a      	cmp	r2, r3
   d6d50:	d15e      	bne.n	d6e10 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
   d6d52:	e001      	b.n	d6d58 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d6d54:	7823      	ldrb	r3, [r4, #0]
   d6d56:	b90b      	cbnz	r3, d6d5c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x58>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6d58:	4830      	ldr	r0, [pc, #192]	; (d6e1c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x118>)
   d6d5a:	e05b      	b.n	d6e14 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
        }
        if (characteristic.impl()->isLocal) {
   d6d5c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d6d60:	2b00      	cmp	r3, #0
   d6d62:	d041      	beq.n	d6de8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xe4>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
   d6d64:	3402      	adds	r4, #2
   d6d66:	4620      	mov	r0, r4
   d6d68:	f7ff fbe1 	bl	d652e <_ZNK8particle7BleUuid7isValidEv>
   d6d6c:	b9b0      	cbnz	r0, d6d9c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x98>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6d6e:	4b2c      	ldr	r3, [pc, #176]	; (d6e20 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x11c>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6d70:	492c      	ldr	r1, [pc, #176]	; (d6e24 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x120>)
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6d72:	881a      	ldrh	r2, [r3, #0]
   d6d74:	3201      	adds	r2, #1
   d6d76:	b292      	uxth	r2, r2
   d6d78:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6d7a:	a801      	add	r0, sp, #4
   d6d7c:	2301      	movs	r3, #1
   d6d7e:	f7ff fb67 	bl	d6450 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            uuid = newUuid;
   d6d82:	ad05      	add	r5, sp, #20
   d6d84:	aa01      	add	r2, sp, #4
   d6d86:	4613      	mov	r3, r2
   d6d88:	cb03      	ldmia	r3!, {r0, r1}
   d6d8a:	42ab      	cmp	r3, r5
   d6d8c:	6020      	str	r0, [r4, #0]
   d6d8e:	6061      	str	r1, [r4, #4]
   d6d90:	461a      	mov	r2, r3
   d6d92:	f104 0408 	add.w	r4, r4, #8
   d6d96:	d1f6      	bne.n	d6d86 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x82>
   d6d98:	6818      	ldr	r0, [r3, #0]
   d6d9a:	6020      	str	r0, [r4, #0]
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (characteristic.impl()->isLocal) {
            characteristic.impl()->assignUuidIfNeeded();
            hal_ble_char_init_t char_init = {};
   d6d9c:	2424      	movs	r4, #36	; 0x24
   d6d9e:	4622      	mov	r2, r4
   d6da0:	2100      	movs	r1, #0
   d6da2:	a801      	add	r0, sp, #4
   d6da4:	f002 fa81 	bl	d92aa <memset>
            char_init.size = sizeof(hal_ble_char_init_t);
   d6da8:	f8ad 4006 	strh.w	r4, [sp, #6]
   d6dac:	683c      	ldr	r4, [r7, #0]
            char_init.uuid = characteristic.impl()->uuid.UUID();
   d6dae:	aa04      	add	r2, sp, #16
   d6db0:	1ca3      	adds	r3, r4, #2
   d6db2:	f104 0e12 	add.w	lr, r4, #18
   d6db6:	6818      	ldr	r0, [r3, #0]
   d6db8:	6859      	ldr	r1, [r3, #4]
   d6dba:	4615      	mov	r5, r2
   d6dbc:	c503      	stmia	r5!, {r0, r1}
   d6dbe:	3308      	adds	r3, #8
   d6dc0:	4573      	cmp	r3, lr
   d6dc2:	462a      	mov	r2, r5
   d6dc4:	d1f7      	bne.n	d6db6 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xb2>
   d6dc6:	6818      	ldr	r0, [r3, #0]
   d6dc8:	6028      	str	r0, [r5, #0]
            char_init.properties = static_cast<uint8_t>(characteristic.impl()->properties);
   d6dca:	7823      	ldrb	r3, [r4, #0]
   d6dcc:	f88d 3008 	strb.w	r3, [sp, #8]
            char_init.service_handle = startHandle;
   d6dd0:	8ab3      	ldrh	r3, [r6, #20]
   d6dd2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            char_init.description = characteristic.impl()->description.c_str();
   d6dd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6dd8:	9303      	str	r3, [sp, #12]
            int ret = hal_ble_gatt_server_add_characteristic(&char_init, &characteristic.impl()->attrHandles, nullptr);
   d6dda:	2200      	movs	r2, #0
   d6ddc:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   d6de0:	a801      	add	r0, sp, #4
   d6de2:	f7fe fe7b 	bl	d5adc <hal_ble_gatt_server_add_characteristic>
            if (ret != SYSTEM_ERROR_NONE) {
   d6de6:	b9a8      	cbnz	r0, d6e14 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d6de8:	683b      	ldr	r3, [r7, #0]
                return ret;
            }
        }
        characteristic.impl()->svcImpl = this;
   d6dea:	659e      	str	r6, [r3, #88]	; 0x58
   d6dec:	683b      	ldr	r3, [r7, #0]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d6dee:	2201      	movs	r2, #1
   d6df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   d6df4:	4639      	mov	r1, r7
   d6df6:	a801      	add	r0, sp, #4
   d6df8:	f7ff fd5f 	bl	d68ba <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            }
        }
        characteristic.impl()->svcImpl = this;
        characteristic.impl()->setValid(true);
        LOG_DEBUG(TRACE, "characteristics.append(characteristic)");
        characteristics_.append(characteristic);
   d6dfc:	a901      	add	r1, sp, #4
   d6dfe:	f106 0018 	add.w	r0, r6, #24
   d6e02:	f7ff ff46 	bl	d6c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6e06:	a802      	add	r0, sp, #8
   d6e08:	f7fd fe7a 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return SYSTEM_ERROR_NONE;
   d6e0c:	2000      	movs	r0, #0
   d6e0e:	e001      	b.n	d6e14 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d6e10:	3508      	adds	r5, #8
   d6e12:	e786      	b.n	d6d22 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x1e>
    }
   d6e14:	b00b      	add	sp, #44	; 0x2c
   d6e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6e1a:	bf00      	nop
   d6e1c:	fffffef2 	.word	0xfffffef2
   d6e20:	2003e37c 	.word	0x2003e37c
   d6e24:	000d9fec 	.word	0x000d9fec

000d6e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6e28:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6e2a:	b570      	push	{r4, r5, r6, lr}
   d6e2c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6e2e:	d91a      	bls.n	d6e66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6e30:	4290      	cmp	r0, r2
   d6e32:	d219      	bcs.n	d6e68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6e34:	f1a1 0608 	sub.w	r6, r1, #8
   d6e38:	1a51      	subs	r1, r2, r1
   d6e3a:	3904      	subs	r1, #4
   d6e3c:	1f15      	subs	r5, r2, #4
   d6e3e:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6e40:	1f2b      	subs	r3, r5, #4
   d6e42:	429e      	cmp	r6, r3
   d6e44:	d025      	beq.n	d6e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6e46:	2c04      	cmp	r4, #4
   d6e48:	d007      	beq.n	d6e5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e4a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d6e4e:	f844 3c04 	str.w	r3, [r4, #-4]
   d6e52:	4629      	mov	r1, r5
   d6e54:	4620      	mov	r0, r4
   d6e56:	f7ff fd29 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6e5a:	4628      	mov	r0, r5
   d6e5c:	f7fd fe50 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e60:	3d08      	subs	r5, #8
   d6e62:	3c08      	subs	r4, #8
   d6e64:	e7ec      	b.n	d6e40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6e66:	d014      	beq.n	d6e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6e68:	1d0c      	adds	r4, r1, #4
   d6e6a:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6e6c:	1f23      	subs	r3, r4, #4
   d6e6e:	429d      	cmp	r5, r3
   d6e70:	d00f      	beq.n	d6e92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6e72:	2e04      	cmp	r6, #4
   d6e74:	d007      	beq.n	d6e86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e76:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6e7a:	f846 3c04 	str.w	r3, [r6, #-4]
   d6e7e:	4621      	mov	r1, r4
   d6e80:	4630      	mov	r0, r6
   d6e82:	f7ff fd13 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6e86:	4620      	mov	r0, r4
   d6e88:	f7fd fe3a 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e8c:	3408      	adds	r4, #8
   d6e8e:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6e90:	e7ec      	b.n	d6e6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6e92:	bd70      	pop	{r4, r5, r6, pc}

000d6e94 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>:

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d6e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e96:	680f      	ldr	r7, [r1, #0]
   d6e98:	b089      	sub	sp, #36	; 0x24
   d6e9a:	460d      	mov	r5, r1
        if (getService(svc.impl()->uuid) != nullptr) {
   d6e9c:	4639      	mov	r1, r7

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d6e9e:	4604      	mov	r4, r0
        if (getService(svc.impl()->uuid) != nullptr) {
   d6ea0:	f7ff fc75 	bl	d678e <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
   d6ea4:	2800      	cmp	r0, #0
   d6ea6:	d15e      	bne.n	d6f66 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd2>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (local_) {
   d6ea8:	7b23      	ldrb	r3, [r4, #12]
   d6eaa:	b1bb      	cbz	r3, d6edc <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x48>
            hal_ble_uuid_t halUuid = svc.impl()->uuid.UUID();
   d6eac:	ae03      	add	r6, sp, #12
   d6eae:	463b      	mov	r3, r7
   d6eb0:	f107 0c10 	add.w	ip, r7, #16
   d6eb4:	46b6      	mov	lr, r6
   d6eb6:	6818      	ldr	r0, [r3, #0]
   d6eb8:	6859      	ldr	r1, [r3, #4]
   d6eba:	4632      	mov	r2, r6
   d6ebc:	c203      	stmia	r2!, {r0, r1}
   d6ebe:	3308      	adds	r3, #8
   d6ec0:	4563      	cmp	r3, ip
   d6ec2:	4616      	mov	r6, r2
   d6ec4:	d1f7      	bne.n	d6eb6 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x22>
   d6ec6:	6818      	ldr	r0, [r3, #0]
   d6ec8:	6010      	str	r0, [r2, #0]
            int ret = hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle, nullptr);
   d6eca:	2300      	movs	r3, #0
   d6ecc:	f107 0214 	add.w	r2, r7, #20
   d6ed0:	4671      	mov	r1, lr
   d6ed2:	2001      	movs	r0, #1
   d6ed4:	f7fe fdf8 	bl	d5ac8 <hal_ble_gatt_server_add_service>
            if (ret != SYSTEM_ERROR_NONE) {
   d6ed8:	2800      	cmp	r0, #0
   d6eda:	d145      	bne.n	d6f68 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6edc:	4629      	mov	r1, r5
   d6ede:	a802      	add	r0, sp, #8
   d6ee0:	f851 3b04 	ldr.w	r3, [r1], #4
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	f7ff fce1 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6eea:	9b01      	ldr	r3, [sp, #4]
   d6eec:	9303      	str	r3, [sp, #12]
   d6eee:	a902      	add	r1, sp, #8
   d6ef0:	a804      	add	r0, sp, #16
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ef2:	6867      	ldr	r7, [r4, #4]
   d6ef4:	f7ff fcda 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6ef8:	6865      	ldr	r5, [r4, #4]
   d6efa:	68a3      	ldr	r3, [r4, #8]
   d6efc:	429d      	cmp	r5, r3
   d6efe:	db14      	blt.n	d6f2a <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x96>
   d6f00:	3501      	adds	r5, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6f02:	2d00      	cmp	r5, #0
   d6f04:	dd0b      	ble.n	d6f1e <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8a>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6f06:	00e8      	lsls	r0, r5, #3
   d6f08:	f7fe ffee 	bl	d5ee8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6f0c:	4606      	mov	r6, r0
   d6f0e:	b310      	cbz	r0, d6f56 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xc2>
                return false;
            }
            move(d, data_, data_ + size_);
   d6f10:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6f14:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6f18:	f7ff ff86 	bl	d6e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6f1c:	e000      	b.n	d6f20 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8c>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6f1e:	2600      	movs	r6, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f20:	6820      	ldr	r0, [r4, #0]
   d6f22:	f7fe ffe9 	bl	d5ef8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6f26:	6026      	str	r6, [r4, #0]
        capacity_ = n;
   d6f28:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f2a:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6f2c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f2e:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6f32:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6f36:	4629      	mov	r1, r5
   d6f38:	f105 0008 	add.w	r0, r5, #8
   d6f3c:	f7ff ff74 	bl	d6e28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6f40:	b135      	cbz	r5, d6f50 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xbc>
   d6f42:	9b03      	ldr	r3, [sp, #12]
   d6f44:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6f48:	a904      	add	r1, sp, #16
   d6f4a:	1d28      	adds	r0, r5, #4
   d6f4c:	f7ff fcae 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6f50:	6863      	ldr	r3, [r4, #4]
   d6f52:	3301      	adds	r3, #1
   d6f54:	6063      	str	r3, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f56:	a804      	add	r0, sp, #16
   d6f58:	f7fd fdd2 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f5c:	a802      	add	r0, sp, #8
   d6f5e:	f7fd fdcf 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                return ret;
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
   d6f62:	2000      	movs	r0, #0
   d6f64:	e000      	b.n	d6f68 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
        return services_;
    }

    int addService(BleService& svc) {
        if (getService(svc.impl()->uuid) != nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6f66:	4801      	ldr	r0, [pc, #4]	; (d6f6c <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd8>)
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }
   d6f68:	b009      	add	sp, #36	; 0x24
   d6f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f6c:	fffffef2 	.word	0xfffffef2

000d6f70 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d6f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6f72:	2500      	movs	r5, #0
   d6f74:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6f76:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d6f78:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f7a:	2020      	movs	r0, #32
   d6f7c:	f7fd f88b 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6f80:	4604      	mov	r4, r0
   d6f82:	b1b0      	cbz	r0, d6fb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d6f84:	4603      	mov	r3, r0
   d6f86:	a901      	add	r1, sp, #4
   d6f88:	f803 5b01 	strb.w	r5, [r3], #1
   d6f8c:	f8c0 5001 	str.w	r5, [r0, #1]
   d6f90:	605d      	str	r5, [r3, #4]
   d6f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6f96:	82c3      	strh	r3, [r0, #22]
   d6f98:	237f      	movs	r3, #127	; 0x7f
   d6f9a:	f8c0 500a 	str.w	r5, [r0, #10]
   d6f9e:	f8c0 500e 	str.w	r5, [r0, #14]
   d6fa2:	f8c0 5012 	str.w	r5, [r0, #18]
   d6fa6:	7603      	strb	r3, [r0, #24]
   d6fa8:	301c      	adds	r0, #28
   d6faa:	f88d 5004 	strb.w	r5, [sp, #4]
   d6fae:	f7ff fcaa 	bl	d6906 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6fb2:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6fb4:	2014      	movs	r0, #20
   d6fb6:	9301      	str	r3, [sp, #4]
   d6fb8:	f7fd f86d 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6fbc:	b128      	cbz	r0, d6fca <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6fbe:	2301      	movs	r3, #1
   d6fc0:	6043      	str	r3, [r0, #4]
   d6fc2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6fc4:	4b06      	ldr	r3, [pc, #24]	; (d6fe0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d6fc6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6fc8:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6fca:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6fcc:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6fce:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6fd0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6fd2:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6fd4:	f7fd fd94 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d6fd8:	4630      	mov	r0, r6
   d6fda:	b002      	add	sp, #8
   d6fdc:	bd70      	pop	{r4, r5, r6, pc}
   d6fde:	bf00      	nop
   d6fe0:	000d9fd8 	.word	0x000d9fd8

000d6fe4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6fe4:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d6fe6:	f04f 0100 	mov.w	r1, #0
   d6fea:	aa01      	add	r2, sp, #4
   d6fec:	4604      	mov	r4, r0
   d6fee:	f7ff ffbf 	bl	d6f70 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d6ff2:	4620      	mov	r0, r4
   d6ff4:	b002      	add	sp, #8
   d6ff6:	bd10      	pop	{r4, pc}

000d6ff8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d6ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6ffa:	4604      	mov	r4, r0
   d6ffc:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d6ffe:	460d      	mov	r5, r1
   d7000:	2900      	cmp	r1, #0
   d7002:	f000 80a5 	beq.w	d7150 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d7006:	a803      	add	r0, sp, #12
   d7008:	f7ff f9e2 	bl	d63d0 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d700c:	6863      	ldr	r3, [r4, #4]
   d700e:	3b03      	subs	r3, #3
   d7010:	2b07      	cmp	r3, #7
   d7012:	f200 809a 	bhi.w	d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d7016:	e8df f003 	tbb	[pc, r3]
   d701a:	4404      	.short	0x4404
   d701c:	98989898 	.word	0x98989898
   d7020:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d7022:	a806      	add	r0, sp, #24
   d7024:	f7ff ffde 	bl	d6fe4 <_ZN8particle13BlePeerDeviceC1Ev>
   d7028:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d702a:	89a2      	ldrh	r2, [r4, #12]
   d702c:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d702e:	8962      	ldrh	r2, [r4, #10]
   d7030:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d7032:	8922      	ldrh	r2, [r4, #8]
   d7034:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d7036:	8922      	ldrh	r2, [r4, #8]
   d7038:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d703a:	8b22      	ldrh	r2, [r4, #24]
   d703c:	82da      	strh	r2, [r3, #22]
   d703e:	4622      	mov	r2, r4
   d7040:	7da1      	ldrb	r1, [r4, #22]
   d7042:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d7046:	9004      	str	r0, [sp, #16]
   d7048:	8892      	ldrh	r2, [r2, #4]
   d704a:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d704e:	9804      	ldr	r0, [sp, #16]
   d7050:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d7054:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d7056:	f8c3 0001 	str.w	r0, [r3, #1]
   d705a:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d705e:	682b      	ldr	r3, [r5, #0]
   d7060:	b113      	cbz	r3, d7068 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d7062:	68a9      	ldr	r1, [r5, #8]
   d7064:	a806      	add	r0, sp, #24
   d7066:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d7068:	7ba3      	ldrb	r3, [r4, #14]
   d706a:	2b01      	cmp	r3, #1
   d706c:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d706e:	bf0b      	itete	eq
   d7070:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d7072:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d7074:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d7076:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7078:	bf0c      	ite	eq
   d707a:	69ac      	ldreq	r4, [r5, #24]
   d707c:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d707e:	6863      	ldr	r3, [r4, #4]
   d7080:	2b00      	cmp	r3, #0
   d7082:	dc0a      	bgt.n	d709a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7084:	a906      	add	r1, sp, #24
   d7086:	a808      	add	r0, sp, #32
   d7088:	f7ff fc21 	bl	d68ce <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d708c:	a908      	add	r1, sp, #32
   d708e:	4620      	mov	r0, r4
   d7090:	f7ff fce0 	bl	d6a54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7094:	a809      	add	r0, sp, #36	; 0x24
   d7096:	f7fd fd33 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d709a:	a807      	add	r0, sp, #28
   d709c:	f7fd fd30 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d70a0:	e053      	b.n	d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d70a2:	89a1      	ldrh	r1, [r4, #12]
   d70a4:	4628      	mov	r0, r5
   d70a6:	f7ff fbd8 	bl	d685a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d70aa:	4604      	mov	r4, r0
   d70ac:	2800      	cmp	r0, #0
   d70ae:	d04c      	beq.n	d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d70b0:	686b      	ldr	r3, [r5, #4]
   d70b2:	b10b      	cbz	r3, d70b8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d70b4:	68e9      	ldr	r1, [r5, #12]
   d70b6:	4798      	blx	r3
   d70b8:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d70ba:	781a      	ldrb	r2, [r3, #0]
   d70bc:	2a01      	cmp	r2, #1
   d70be:	d104      	bne.n	d70ca <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d70c0:	4621      	mov	r1, r4
   d70c2:	69e8      	ldr	r0, [r5, #28]
   d70c4:	f7ff fc80 	bl	d69c8 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d70c8:	e03f      	b.n	d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d70ca:	69da      	ldr	r2, [r3, #28]
   d70cc:	69a8      	ldr	r0, [r5, #24]
   d70ce:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d70d0:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d70d2:	2600      	movs	r6, #0
   d70d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d70d8:	4299      	cmp	r1, r3
   d70da:	d00d      	beq.n	d70f8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d70dc:	681d      	ldr	r5, [r3, #0]
   d70de:	69aa      	ldr	r2, [r5, #24]
   d70e0:	69ed      	ldr	r5, [r5, #28]
   d70e2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d70e6:	4295      	cmp	r5, r2
   d70e8:	d004      	beq.n	d70f4 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d70ea:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d70ee:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d70f2:	e7f8      	b.n	d70e6 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d70f4:	3308      	adds	r3, #8
   d70f6:	e7ef      	b.n	d70d8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d70f8:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d70fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d70fe:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d7100:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d7102:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d7104:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d7106:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d7108:	f8c3 200a 	str.w	r2, [r3, #10]
   d710c:	f8c3 200e 	str.w	r2, [r3, #14]
   d7110:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d7114:	f7ff fc1e 	bl	d6954 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d7118:	e017      	b.n	d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d711a:	8aa1      	ldrh	r1, [r4, #20]
   d711c:	4628      	mov	r0, r5
   d711e:	f7ff fb9c 	bl	d685a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d7122:	b190      	cbz	r0, d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d7124:	8ae1      	ldrh	r1, [r4, #22]
   d7126:	9000      	str	r0, [sp, #0]
   d7128:	68e3      	ldr	r3, [r4, #12]
   d712a:	6922      	ldr	r2, [r4, #16]
   d712c:	6928      	ldr	r0, [r5, #16]
   d712e:	e00a      	b.n	d7146 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d7130:	8aa1      	ldrh	r1, [r4, #20]
   d7132:	4628      	mov	r0, r5
   d7134:	f7ff fb91 	bl	d685a <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d7138:	b138      	cbz	r0, d714a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d713a:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d713c:	8ae1      	ldrh	r1, [r4, #22]
   d713e:	9000      	str	r0, [sp, #0]
   d7140:	68e3      	ldr	r3, [r4, #12]
   d7142:	6922      	ldr	r2, [r4, #16]
   d7144:	69e8      	ldr	r0, [r5, #28]
   d7146:	f7ff fae1 	bl	d670c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d714a:	a803      	add	r0, sp, #12
   d714c:	f7ff f94e 	bl	d63ec <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d7150:	b00b      	add	sp, #44	; 0x2c
   d7152:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7154 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d7154:	b510      	push	{r4, lr}
   d7156:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d7158:	6840      	ldr	r0, [r0, #4]
   d715a:	b108      	cbz	r0, d7160 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d715c:	f7fc ff9d 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d7160:	4620      	mov	r0, r4
   d7162:	bd10      	pop	{r4, pc}

000d7164 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7164:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7166:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d7168:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d716a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
        this->svcUuid = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d716e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   d7172:	f7fe ffba 	bl	d60ea <_ZN6StringD1Ev>
   d7176:	4668      	mov	r0, sp
   d7178:	f7ff ffec 	bl	d7154 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d717c:	b003      	add	sp, #12
   d717e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7184:	b538      	push	{r3, r4, r5, lr}
   d7186:	2300      	movs	r3, #0
   d7188:	4604      	mov	r4, r0
   d718a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d718c:	2014      	movs	r0, #20
   d718e:	460d      	mov	r5, r1
   d7190:	f7fc ff81 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7194:	b128      	cbz	r0, d71a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7196:	2301      	movs	r3, #1
   d7198:	6043      	str	r3, [r0, #4]
   d719a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d719c:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d719e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d71a0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d71a2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d71a4:	4620      	mov	r0, r4
   d71a6:	bd38      	pop	{r3, r4, r5, pc}
   d71a8:	000d9fa0 	.word	0x000d9fa0

000d71ac <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
BleCharacteristic::BleCharacteristic(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
        : impl_(std::make_shared<BleCharacteristicImpl>(desc, properties, callback, context)) {
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d71b0:	b088      	sub	sp, #32
   d71b2:	4606      	mov	r6, r0
   d71b4:	461d      	mov	r5, r3
   d71b6:	2060      	movs	r0, #96	; 0x60
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d71b8:	2300      	movs	r3, #0
   d71ba:	4688      	mov	r8, r1
   d71bc:	4617      	mov	r7, r2
   d71be:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d71c0:	9305      	str	r3, [sp, #20]
   d71c2:	f7fc ff68 	bl	d4096 <_Znwj>
   d71c6:	f8cd d018 	str.w	sp, [sp, #24]
   d71ca:	4604      	mov	r4, r0
   d71cc:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d71ce:	b300      	cbz	r0, d7212 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x66>
              svcImpl(nullptr),
              valid_(false) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d71d0:	f7ff fa7c 	bl	d66cc <_ZN8particle21BleCharacteristicImplC1Ev>
        this->description = desc;
   d71d4:	4641      	mov	r1, r8
   d71d6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d71da:	f7ff f81f 	bl	d621c <_ZN6StringaSEPKc>
        this->properties = properties;
        this->dataCb = callback;
   d71de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d71e0:	64e3      	str	r3, [r4, #76]	; 0x4c
        this->context = context;
   d71e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d71e4:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        this->description = desc;
        this->properties = properties;
   d71e6:	7027      	strb	r7, [r4, #0]
        this->context = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
   d71e8:	462b      	mov	r3, r5
   d71ea:	1ca2      	adds	r2, r4, #2
   d71ec:	f105 0114 	add.w	r1, r5, #20
   d71f0:	f853 0b04 	ldr.w	r0, [r3], #4
   d71f4:	f842 0b04 	str.w	r0, [r2], #4
   d71f8:	428b      	cmp	r3, r1
   d71fa:	d1f9      	bne.n	d71f0 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x44>
        this->svcUuid = svcUuid;
   d71fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d71fe:	f104 0216 	add.w	r2, r4, #22
   d7202:	f103 0114 	add.w	r1, r3, #20
   d7206:	f853 0b04 	ldr.w	r0, [r3], #4
   d720a:	f842 0b04 	str.w	r0, [r2], #4
   d720e:	428b      	cmp	r3, r1
   d7210:	d1f9      	bne.n	d7206 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x5a>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7212:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d7214:	2500      	movs	r5, #0
   d7216:	ab01      	add	r3, sp, #4
   d7218:	aa02      	add	r2, sp, #8
   d721a:	a803      	add	r0, sp, #12
   d721c:	9507      	str	r5, [sp, #28]
   d721e:	f7ff ffb1 	bl	d7184 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7222:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d7224:	9a05      	ldr	r2, [sp, #20]
   d7226:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7228:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d722a:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d722c:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d722e:	f7fd fc67 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d7232:	a806      	add	r0, sp, #24
   d7234:	f7ff ff8e 	bl	d7154 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7238:	9b04      	ldr	r3, [sp, #16]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d723a:	9a05      	ldr	r2, [sp, #20]
   d723c:	6831      	ldr	r1, [r6, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d723e:	6033      	str	r3, [r6, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7240:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7242:	6873      	ldr	r3, [r6, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7244:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d7246:	6072      	str	r2, [r6, #4]
	_M_pi = __tmp;
   d7248:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d724c:	9505      	str	r5, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d724e:	9504      	str	r5, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7250:	f7fd fc56 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7254:	a805      	add	r0, sp, #20
   d7256:	f7fd fc53 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d725a:	b008      	add	sp, #32
   d725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7260 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d7260:	b510      	push	{r4, lr}
   d7262:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d7264:	6840      	ldr	r0, [r0, #4]
   d7266:	b108      	cbz	r0, d726c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7268:	f7fc ff17 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d726c:	4620      	mov	r0, r4
   d726e:	bd10      	pop	{r4, pc}

000d7270 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7270:	b573      	push	{r0, r1, r4, r5, r6, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7272:	6905      	ldr	r5, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d7274:	300c      	adds	r0, #12
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7276:	69ac      	ldr	r4, [r5, #24]
   d7278:	69eb      	ldr	r3, [r5, #28]
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d727a:	e88d 0021 	stmia.w	sp, {r0, r5}
   d727e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7282:	42a6      	cmp	r6, r4
   d7284:	d004      	beq.n	d7290 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x20>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7286:	1d20      	adds	r0, r4, #4
   d7288:	f7fd fc3a 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d728c:	3408      	adds	r4, #8
   d728e:	e7f8      	b.n	d7282 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7290:	69a8      	ldr	r0, [r5, #24]
   d7292:	f7fe fe31 	bl	d5ef8 <free>
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d7296:	4668      	mov	r0, sp
   d7298:	f7ff ffe2 	bl	d7260 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d729c:	b002      	add	sp, #8
   d729e:	bd70      	pop	{r4, r5, r6, pc}

000d72a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d72a0:	b538      	push	{r3, r4, r5, lr}
   d72a2:	2300      	movs	r3, #0
   d72a4:	4604      	mov	r4, r0
   d72a6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d72a8:	2014      	movs	r0, #20
   d72aa:	460d      	mov	r5, r1
   d72ac:	f7fc fef3 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d72b0:	b128      	cbz	r0, d72be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d72b2:	2301      	movs	r3, #1
   d72b4:	6043      	str	r3, [r0, #4]
   d72b6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d72b8:	4b02      	ldr	r3, [pc, #8]	; (d72c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d72ba:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d72bc:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d72be:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d72c0:	4620      	mov	r0, r4
   d72c2:	bd38      	pop	{r3, r4, r5, pc}
   d72c4:	000d9fbc 	.word	0x000d9fbc

000d72c8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
   d72c8:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d72ca:	2600      	movs	r6, #0
   d72cc:	b087      	sub	sp, #28
   d72ce:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d72d0:	6046      	str	r6, [r0, #4]
   d72d2:	4607      	mov	r7, r0
   d72d4:	2024      	movs	r0, #36	; 0x24
   d72d6:	460d      	mov	r5, r1
   d72d8:	f7fc fedd 	bl	d4096 <_Znwj>
   d72dc:	f8cd d010 	str.w	sp, [sp, #16]
   d72e0:	4604      	mov	r4, r0
   d72e2:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d72e4:	b1a0      	cbz	r0, d7310 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x48>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid(),
              startHandle(BLE_INVALID_ATTR_HANDLE),
              endHandle(BLE_INVALID_ATTR_HANDLE) {
   d72e6:	f7ff f86b 	bl	d63c0 <_ZN8particle7BleUuidC1Ev>
   d72ea:	82a6      	strh	r6, [r4, #20]
   d72ec:	82e6      	strh	r6, [r4, #22]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d72ee:	61a6      	str	r6, [r4, #24]
   d72f0:	61e6      	str	r6, [r4, #28]
   d72f2:	6226      	str	r6, [r4, #32]
    }
    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid = svcUuid;
   d72f4:	462b      	mov	r3, r5
   d72f6:	4622      	mov	r2, r4
   d72f8:	f105 0610 	add.w	r6, r5, #16
   d72fc:	6818      	ldr	r0, [r3, #0]
   d72fe:	6859      	ldr	r1, [r3, #4]
   d7300:	4615      	mov	r5, r2
   d7302:	c503      	stmia	r5!, {r0, r1}
   d7304:	3308      	adds	r3, #8
   d7306:	42b3      	cmp	r3, r6
   d7308:	462a      	mov	r2, r5
   d730a:	d1f7      	bne.n	d72fc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x34>
   d730c:	6818      	ldr	r0, [r3, #0]
   d730e:	6028      	str	r0, [r5, #0]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d7310:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7312:	4621      	mov	r1, r4
   d7314:	9305      	str	r3, [sp, #20]
   d7316:	aa02      	add	r2, sp, #8
   d7318:	ab01      	add	r3, sp, #4
   d731a:	a803      	add	r0, sp, #12
   d731c:	f7ff ffc0 	bl	d72a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7320:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d7322:	687a      	ldr	r2, [r7, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7324:	603c      	str	r4, [r7, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7326:	607b      	str	r3, [r7, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7328:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d732a:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d732c:	f7fd fbe8 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d7330:	a804      	add	r0, sp, #16
   d7332:	f7ff ff95 	bl	d7260 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
}
   d7336:	4638      	mov	r0, r7
   d7338:	b007      	add	sp, #28
   d733a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d733c <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>:
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d733c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d733e:	680b      	ldr	r3, [r1, #0]
   d7340:	b087      	sub	sp, #28
   d7342:	4605      	mov	r5, r0
   d7344:	460c      	mov	r4, r1
        if (characteristic.impl() == nullptr) {
   d7346:	2b00      	cmp	r3, #0
   d7348:	d046      	beq.n	d73d8 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x9c>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        characteristic.impl()->isLocal = local_;
   d734a:	7b02      	ldrb	r2, [r0, #12]
   d734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        if (local_) {
   d7350:	7b03      	ldrb	r3, [r0, #12]
   d7352:	b1c3      	cbz	r3, d7386 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
            LOG_DEBUG(TRACE, "< LOCAL CHARACTERISTIC >");
            if (!characteristic.impl()->svcUuid.isValid()) {
   d7354:	6808      	ldr	r0, [r1, #0]
   d7356:	3016      	adds	r0, #22
   d7358:	f7ff f8e9 	bl	d652e <_ZNK8particle7BleUuid7isValidEv>
   d735c:	b998      	cbnz	r0, d7386 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
                BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID);
   d735e:	2201      	movs	r2, #1
   d7360:	4921      	ldr	r1, [pc, #132]	; (d73e8 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xac>)
   d7362:	a801      	add	r0, sp, #4
   d7364:	f7ff f84e 	bl	d6404 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7368:	6823      	ldr	r3, [r4, #0]
                LOG_DEBUG(TRACE, "Assign default service UUID.");
                characteristic.impl()->svcUuid = newUuid;
   d736a:	aa01      	add	r2, sp, #4
   d736c:	3316      	adds	r3, #22
   d736e:	af05      	add	r7, sp, #20
   d7370:	4616      	mov	r6, r2
   d7372:	ce03      	ldmia	r6!, {r0, r1}
   d7374:	42be      	cmp	r6, r7
   d7376:	6018      	str	r0, [r3, #0]
   d7378:	6059      	str	r1, [r3, #4]
   d737a:	4632      	mov	r2, r6
   d737c:	f103 0308 	add.w	r3, r3, #8
   d7380:	d1f6      	bne.n	d7370 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x34>
   d7382:	6830      	ldr	r0, [r6, #0]
   d7384:	6018      	str	r0, [r3, #0]
            }
        }
        BleService* service = getService(characteristic.impl()->svcUuid);
   d7386:	6826      	ldr	r6, [r4, #0]
   d7388:	3616      	adds	r6, #22
   d738a:	4631      	mov	r1, r6
   d738c:	4628      	mov	r0, r5
   d738e:	f7ff f9fe 	bl	d678e <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
        if (service != nullptr) {
   d7392:	b130      	cbz	r0, d73a2 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x66>
   d7394:	6800      	ldr	r0, [r0, #0]
            if (service->impl() != nullptr) {
   d7396:	b308      	cbz	r0, d73dc <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa0>
                return service->impl()->addCharacteristic(characteristic);
   d7398:	4621      	mov	r1, r4
   d739a:	f7ff fcb3 	bl	d6d04 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d739e:	4604      	mov	r4, r0
   d73a0:	e01e      	b.n	d73e0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
            }
            return SYSTEM_ERROR_INTERNAL;
        } else {
            BleService service(characteristic.impl()->svcUuid);
   d73a2:	4631      	mov	r1, r6
   d73a4:	a801      	add	r0, sp, #4
   d73a6:	f7ff ff8f 	bl	d72c8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
            if (addService(service) == SYSTEM_ERROR_NONE) {
   d73aa:	a901      	add	r1, sp, #4
   d73ac:	4628      	mov	r0, r5
   d73ae:	f7ff fd71 	bl	d6e94 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>
   d73b2:	b958      	cbnz	r0, d73cc <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x90>
   d73b4:	686b      	ldr	r3, [r5, #4]
   d73b6:	682a      	ldr	r2, [r5, #0]
   d73b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d73bc:	3b01      	subs	r3, #1
                return services_.last().impl()->addCharacteristic(characteristic);
   d73be:	4621      	mov	r1, r4
   d73c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   d73c4:	f7ff fc9e 	bl	d6d04 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d73c8:	4604      	mov	r4, r0
   d73ca:	e001      	b.n	d73d0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x94>
            }
            return SYSTEM_ERROR_INTERNAL;
   d73cc:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73d0:	a802      	add	r0, sp, #8
   d73d2:	f7fd fb95 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73d6:	e003      	b.n	d73e0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        if (characteristic.impl() == nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d73d8:	4c04      	ldr	r4, [pc, #16]	; (d73ec <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xb0>)
   d73da:	e001      	b.n	d73e0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        BleService* service = getService(characteristic.impl()->svcUuid);
        if (service != nullptr) {
            if (service->impl() != nullptr) {
                return service->impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
   d73dc:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
            if (addService(service) == SYSTEM_ERROR_NONE) {
                return services_.last().impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
        }
    }
   d73e0:	4620      	mov	r0, r4
   d73e2:	b007      	add	sp, #28
   d73e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d73e6:	bf00      	nop
   d73e8:	000d9fec 	.word	0x000d9fec
   d73ec:	fffffef2 	.word	0xfffffef2

000d73f0 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>:
int BleLocalDevice::disconnect(const BlePeerDevice& peripheral) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
   d73f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73f2:	4604      	mov	r4, r0
   d73f4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d73f6:	a801      	add	r0, sp, #4
   d73f8:	f7fe ffea 	bl	d63d0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
   d73fc:	4629      	mov	r1, r5
   d73fe:	6920      	ldr	r0, [r4, #16]
   d7400:	f7ff ff9c 	bl	d733c <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>
   d7404:	4604      	mov	r4, r0
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
    WiringBleLock lk;
   d7406:	a801      	add	r0, sp, #4
   d7408:	f7fe fff0 	bl	d63ec <_ZN8particle3ble13WiringBleLockD1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
}
   d740c:	4620      	mov	r0, r4
   d740e:	b003      	add	sp, #12
   d7410:	bd30      	pop	{r4, r5, pc}
	...

000d7414 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7414:	4802      	ldr	r0, [pc, #8]	; (d7420 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7416:	2300      	movs	r3, #0
   d7418:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d741a:	f7fe bb99 	b.w	d5b50 <os_mutex_recursive_create>
   d741e:	bf00      	nop
   d7420:	2003e380 	.word	0x2003e380

000d7424 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7426:	4606      	mov	r6, r0
   d7428:	460d      	mov	r5, r1
   d742a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d742c:	2400      	movs	r4, #0
  while (size--) {
   d742e:	42bd      	cmp	r5, r7
   d7430:	d00c      	beq.n	d744c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7432:	6833      	ldr	r3, [r6, #0]
   d7434:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7438:	689b      	ldr	r3, [r3, #8]
   d743a:	4630      	mov	r0, r6
   d743c:	4798      	blx	r3
     if (chunk>=0)
   d743e:	2800      	cmp	r0, #0
   d7440:	db01      	blt.n	d7446 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7442:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7444:	e7f3      	b.n	d742e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7446:	2c00      	cmp	r4, #0
   d7448:	bf08      	it	eq
   d744a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d744c:	4620      	mov	r0, r4
   d744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7450 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7450:	b570      	push	{r4, r5, r6, lr}
   d7452:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7454:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7456:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7458:	b149      	cbz	r1, d746e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d745a:	f001 ff84 	bl	d9366 <strlen>
   d745e:	682b      	ldr	r3, [r5, #0]
   d7460:	4602      	mov	r2, r0
   d7462:	4621      	mov	r1, r4
   d7464:	4628      	mov	r0, r5
   d7466:	68db      	ldr	r3, [r3, #12]
    }
   d7468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d746c:	4718      	bx	r3
    }
   d746e:	bd70      	pop	{r4, r5, r6, pc}

000d7470 <_ZN5Print5printEPKc>:
   d7470:	b508      	push	{r3, lr}
   d7472:	f7ff ffed 	bl	d7450 <_ZN5Print5writeEPKc>
   d7476:	bd08      	pop	{r3, pc}

000d7478 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7478:	6803      	ldr	r3, [r0, #0]
   d747a:	689b      	ldr	r3, [r3, #8]
   d747c:	4718      	bx	r3

000d747e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d747e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7480:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7482:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7484:	f7ff fff8 	bl	d7478 <_ZN5Print5printEc>
  n += print('\n');
   d7488:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d748a:	4604      	mov	r4, r0
  n += print('\n');
   d748c:	4628      	mov	r0, r5
   d748e:	f7ff fff3 	bl	d7478 <_ZN5Print5printEc>
  return n;
}
   d7492:	4420      	add	r0, r4
   d7494:	bd38      	pop	{r3, r4, r5, pc}

000d7496 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7496:	b538      	push	{r3, r4, r5, lr}
   d7498:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d749a:	f7ff ffd9 	bl	d7450 <_ZN5Print5writeEPKc>
   d749e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d74a0:	4628      	mov	r0, r5
   d74a2:	f7ff ffec 	bl	d747e <_ZN5Print7printlnEv>
  return n;
}
   d74a6:	4420      	add	r0, r4
   d74a8:	bd38      	pop	{r3, r4, r5, pc}

000d74aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d74aa:	b530      	push	{r4, r5, lr}
   d74ac:	b08b      	sub	sp, #44	; 0x2c
   d74ae:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d74b0:	2100      	movs	r1, #0
   d74b2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d74b6:	2a01      	cmp	r2, #1
   d74b8:	bf98      	it	ls
   d74ba:	220a      	movls	r2, #10
   d74bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d74c0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d74c4:	fb05 3312 	mls	r3, r5, r2, r3
   d74c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d74cc:	2b09      	cmp	r3, #9
   d74ce:	bf94      	ite	ls
   d74d0:	3330      	addls	r3, #48	; 0x30
   d74d2:	3337      	addhi	r3, #55	; 0x37
   d74d4:	b2db      	uxtb	r3, r3
   d74d6:	4621      	mov	r1, r4
   d74d8:	f804 3901 	strb.w	r3, [r4], #-1
   d74dc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d74de:	2d00      	cmp	r5, #0
   d74e0:	d1ee      	bne.n	d74c0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d74e2:	f7ff ffb5 	bl	d7450 <_ZN5Print5writeEPKc>
}
   d74e6:	b00b      	add	sp, #44	; 0x2c
   d74e8:	bd30      	pop	{r4, r5, pc}

000d74ea <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d74ea:	b410      	push	{r4}
  if (base == 0) return write(n);
   d74ec:	b92a      	cbnz	r2, d74fa <_ZN5Print5printEmi+0x10>
   d74ee:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d74f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d74f4:	689b      	ldr	r3, [r3, #8]
   d74f6:	b2c9      	uxtb	r1, r1
   d74f8:	4718      	bx	r3
  else return printNumber(n, base);
   d74fa:	b2d2      	uxtb	r2, r2
}
   d74fc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7500:	f7ff bfd3 	b.w	d74aa <_ZN5Print11printNumberEmh>

000d7504 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7504:	f7ff bff1 	b.w	d74ea <_ZN5Print5printEmi>

000d7508 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d7508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d750c:	4607      	mov	r7, r0
   d750e:	460e      	mov	r6, r1
  if (base == 0) {
   d7510:	4615      	mov	r5, r2
   d7512:	b92a      	cbnz	r2, d7520 <_ZN5Print5printEli+0x18>
    return write(n);
   d7514:	6803      	ldr	r3, [r0, #0]
   d7516:	b2c9      	uxtb	r1, r1
   d7518:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d751e:	4718      	bx	r3
  } else if (base == 10) {
   d7520:	2a0a      	cmp	r2, #10
   d7522:	d102      	bne.n	d752a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d7524:	2900      	cmp	r1, #0
   d7526:	da01      	bge.n	d752c <_ZN5Print5printEli+0x24>
   d7528:	e004      	b.n	d7534 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d752a:	b2d2      	uxtb	r2, r2
  }
}
   d752c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7530:	f7ff bfbb 	b.w	d74aa <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7534:	212d      	movs	r1, #45	; 0x2d
   d7536:	f7ff ff9f 	bl	d7478 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d753a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d753c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d753e:	4271      	negs	r1, r6
   d7540:	4638      	mov	r0, r7
   d7542:	f7ff ffb2 	bl	d74aa <_ZN5Print11printNumberEmh>
   d7546:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d754c <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d754c:	f7ff bfdc 	b.w	d7508 <_ZN5Print5printEli>

000d7550 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d7550:	b538      	push	{r3, r4, r5, lr}
   d7552:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7554:	f7ff ffd8 	bl	d7508 <_ZN5Print5printEli>
   d7558:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d755a:	4628      	mov	r0, r5
   d755c:	f7ff ff8f 	bl	d747e <_ZN5Print7printlnEv>
  return n;
}
   d7560:	4420      	add	r0, r4
   d7562:	bd38      	pop	{r3, r4, r5, pc}

000d7564 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7564:	b40c      	push	{r2, r3}
   d7566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d756a:	b087      	sub	sp, #28
   d756c:	af00      	add	r7, sp, #0
   d756e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7572:	4605      	mov	r5, r0
   d7574:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7578:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d757a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d757c:	4623      	mov	r3, r4
   d757e:	464a      	mov	r2, r9
   d7580:	2114      	movs	r1, #20
   d7582:	1d38      	adds	r0, r7, #4
   d7584:	f7fe fce0 	bl	d5f48 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7588:	2813      	cmp	r0, #19
   d758a:	d805      	bhi.n	d7598 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d758c:	1d39      	adds	r1, r7, #4
   d758e:	4628      	mov	r0, r5
   d7590:	f7ff ff5e 	bl	d7450 <_ZN5Print5writeEPKc>
   d7594:	4604      	mov	r4, r0
   d7596:	e013      	b.n	d75c0 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7598:	f100 0308 	add.w	r3, r0, #8
   d759c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d75a0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d75a2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d75a6:	1c41      	adds	r1, r0, #1
   d75a8:	4623      	mov	r3, r4
   d75aa:	464a      	mov	r2, r9
   d75ac:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d75ae:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d75b0:	f7fe fcca 	bl	d5f48 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d75b4:	4669      	mov	r1, sp
   d75b6:	4628      	mov	r0, r5
   d75b8:	f7ff ff4a 	bl	d7450 <_ZN5Print5writeEPKc>
   d75bc:	4604      	mov	r4, r0
   d75be:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d75c0:	b11e      	cbz	r6, d75ca <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d75c2:	4628      	mov	r0, r5
   d75c4:	f7ff ff5b 	bl	d747e <_ZN5Print7printlnEv>
   d75c8:	4404      	add	r4, r0
    return n;
}
   d75ca:	4620      	mov	r0, r4
   d75cc:	371c      	adds	r7, #28
   d75ce:	46bd      	mov	sp, r7
   d75d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d75d4:	b002      	add	sp, #8
   d75d6:	4770      	bx	lr

000d75d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d75d8:	4b01      	ldr	r3, [pc, #4]	; (d75e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d75da:	4a02      	ldr	r2, [pc, #8]	; (d75e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d75dc:	601a      	str	r2, [r3, #0]
   d75de:	4770      	bx	lr
   d75e0:	2003e384 	.word	0x2003e384
   d75e4:	000da145 	.word	0x000da145

000d75e8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d75e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d75ea:	4b14      	ldr	r3, [pc, #80]	; (d763c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d75ec:	4f14      	ldr	r7, [pc, #80]	; (d7640 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d75ee:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d75f0:	4b14      	ldr	r3, [pc, #80]	; (d7644 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d75f2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d75f4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d75f6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d75f8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d75fa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d75fc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d75fe:	d01b      	beq.n	d7638 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d7600:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d7602:	ad01      	add	r5, sp, #4
   d7604:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d7608:	f001 fd22 	bl	d9050 <localtime>
	calendar_time->tm_year += 1900;
   d760c:	6943      	ldr	r3, [r0, #20]
   d760e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d7612:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d7614:	4604      	mov	r4, r0
   d7616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d761a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d761c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d761e:	f8d4 e000 	ldr.w	lr, [r4]
   d7622:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7626:	ad01      	add	r5, sp, #4
   d7628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d762a:	4c07      	ldr	r4, [pc, #28]	; (d7648 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d762c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d762e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7632:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7634:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7638:	b00b      	add	sp, #44	; 0x2c
   d763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d763c:	2003e3b8 	.word	0x2003e3b8
   d7640:	2003e3b4 	.word	0x2003e3b4
   d7644:	2003e3b0 	.word	0x2003e3b0
   d7648:	2003e388 	.word	0x2003e388

000d764c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d764c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d764e:	2000      	movs	r0, #0
   d7650:	f7fe fc3a 	bl	d5ec8 <spark_sync_time_pending>
   d7654:	b128      	cbz	r0, d7662 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7656:	f7fe fc1f 	bl	d5e98 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d765a:	f080 0001 	eor.w	r0, r0, #1
   d765e:	b2c0      	uxtb	r0, r0
   d7660:	bd08      	pop	{r3, pc}
   d7662:	2001      	movs	r0, #1
    }
   d7664:	bd08      	pop	{r3, pc}
	...

000d7668 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d7668:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d766a:	f7ff ffbd 	bl	d75e8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d766e:	4b01      	ldr	r3, [pc, #4]	; (d7674 <_ZN9TimeClass4hourEl+0xc>)
   d7670:	6898      	ldr	r0, [r3, #8]
   d7672:	bd08      	pop	{r3, pc}
   d7674:	2003e388 	.word	0x2003e388

000d7678 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d7678:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d767a:	f7ff ffb5 	bl	d75e8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d767e:	4b01      	ldr	r3, [pc, #4]	; (d7684 <_ZN9TimeClass6minuteEl+0xc>)
   d7680:	6858      	ldr	r0, [r3, #4]
   d7682:	bd08      	pop	{r3, pc}
   d7684:	2003e388 	.word	0x2003e388

000d7688 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   d7688:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d768a:	f7ff ffad 	bl	d75e8 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   d768e:	4b01      	ldr	r3, [pc, #4]	; (d7694 <_ZN9TimeClass6secondEl+0xc>)
   d7690:	6818      	ldr	r0, [r3, #0]
   d7692:	bd08      	pop	{r3, pc}
   d7694:	2003e388 	.word	0x2003e388

000d7698 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7698:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d769a:	2000      	movs	r0, #0
   d769c:	f7fe f9e4 	bl	d5a68 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d76a0:	4604      	mov	r4, r0
   d76a2:	b968      	cbnz	r0, d76c0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d76a4:	f7fe fb44 	bl	d5d30 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d76a8:	2801      	cmp	r0, #1
   d76aa:	d10b      	bne.n	d76c4 <_ZN9TimeClass7isValidEv+0x2c>
   d76ac:	4620      	mov	r0, r4
   d76ae:	f7fe fb6f 	bl	d5d90 <system_thread_get_state>
   d76b2:	b938      	cbnz	r0, d76c4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d76b4:	f7ff ffca 	bl	d764c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d76b8:	b930      	cbnz	r0, d76c8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d76ba:	f7fe fbe5 	bl	d5e88 <spark_process>
   d76be:	e7f9      	b.n	d76b4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d76c0:	2001      	movs	r0, #1
   d76c2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d76c4:	2000      	movs	r0, #0
   d76c6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d76c8:	f7ff ffc0 	bl	d764c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d76cc:	2000      	movs	r0, #0
   d76ce:	f7fe f9cb 	bl	d5a68 <HAL_RTC_Time_Is_Valid>
   d76d2:	3000      	adds	r0, #0
   d76d4:	bf18      	it	ne
   d76d6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d76d8:	bd10      	pop	{r4, pc}

000d76da <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d76da:	b508      	push	{r3, lr}
    (void)isValid();
   d76dc:	f7ff ffdc 	bl	d7698 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d76e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d76e4:	f7fe b9b8 	b.w	d5a58 <HAL_RTC_Get_UnixTime>

000d76e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d76e8:	4b02      	ldr	r3, [pc, #8]	; (d76f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d76ea:	681a      	ldr	r2, [r3, #0]
   d76ec:	4b02      	ldr	r3, [pc, #8]	; (d76f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d76ee:	601a      	str	r2, [r3, #0]
   d76f0:	4770      	bx	lr
   d76f2:	bf00      	nop
   d76f4:	2003dbcc 	.word	0x2003dbcc
   d76f8:	2003e3ac 	.word	0x2003e3ac

000d76fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d76fc:	2100      	movs	r1, #0
   d76fe:	f7fe bb27 	b.w	d5d50 <system_delay_ms>

000d7702 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7702:	b510      	push	{r4, lr}
   d7704:	4604      	mov	r4, r0
   d7706:	f7fc fe29 	bl	d435c <_ZNSt14_Function_baseD1Ev>
   d770a:	4620      	mov	r0, r4
   d770c:	bd10      	pop	{r4, pc}

000d770e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d770e:	b513      	push	{r0, r1, r4, lr}
   d7710:	460b      	mov	r3, r1
   d7712:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7714:	c803      	ldmia	r0, {r0, r1}
   d7716:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d771a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d771e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7722:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d7726:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d772a:	b002      	add	sp, #8
   d772c:	bd10      	pop	{r4, pc}
	...

000d7730 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7730:	4803      	ldr	r0, [pc, #12]	; (d7740 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7732:	4a04      	ldr	r2, [pc, #16]	; (d7744 <_GLOBAL__sub_I_RGB+0x14>)
   d7734:	4904      	ldr	r1, [pc, #16]	; (d7748 <_GLOBAL__sub_I_RGB+0x18>)
   d7736:	2300      	movs	r3, #0
   d7738:	6083      	str	r3, [r0, #8]
   d773a:	f000 bef7 	b.w	d852c <__aeabi_atexit>
   d773e:	bf00      	nop
   d7740:	2003e3bc 	.word	0x2003e3bc
   d7744:	2003dc84 	.word	0x2003dc84
   d7748:	000d7703 	.word	0x000d7703

000d774c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d774c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d774e:	4b0c      	ldr	r3, [pc, #48]	; (d7780 <serialEventRun+0x34>)
   d7750:	b133      	cbz	r3, d7760 <serialEventRun+0x14>
   d7752:	f000 fbc3 	bl	d7edc <_Z16_fetch_usbserialv>
   d7756:	6803      	ldr	r3, [r0, #0]
   d7758:	691b      	ldr	r3, [r3, #16]
   d775a:	4798      	blx	r3
   d775c:	2800      	cmp	r0, #0
   d775e:	dc09      	bgt.n	d7774 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7760:	4b08      	ldr	r3, [pc, #32]	; (d7784 <serialEventRun+0x38>)
   d7762:	b163      	cbz	r3, d777e <serialEventRun+0x32>
   d7764:	f000 fc42 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d7768:	6803      	ldr	r3, [r0, #0]
   d776a:	691b      	ldr	r3, [r3, #16]
   d776c:	4798      	blx	r3
   d776e:	2800      	cmp	r0, #0
   d7770:	dc03      	bgt.n	d777a <serialEventRun+0x2e>
   d7772:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7774:	f3af 8000 	nop.w
   d7778:	e7f2      	b.n	d7760 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d777a:	f3af 8000 	nop.w
   d777e:	bd08      	pop	{r3, pc}
	...

000d7788 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7788:	b508      	push	{r3, lr}
	serialEventRun();
   d778a:	f7ff ffdf 	bl	d774c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d778e:	f7fe f95b 	bl	d5a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7792:	4b01      	ldr	r3, [pc, #4]	; (d7798 <_post_loop+0x10>)
   d7794:	6018      	str	r0, [r3, #0]
   d7796:	bd08      	pop	{r3, pc}
   d7798:	2003e708 	.word	0x2003e708

000d779c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d779c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d779e:	2300      	movs	r3, #0
   d77a0:	9300      	str	r3, [sp, #0]
   d77a2:	461a      	mov	r2, r3
   d77a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77a8:	f7fe fb04 	bl	d5db4 <system_ctrl_set_result>
}
   d77ac:	b003      	add	sp, #12
   d77ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d77b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d77b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d77b6:	8843      	ldrh	r3, [r0, #2]
   d77b8:	2b0a      	cmp	r3, #10
   d77ba:	d008      	beq.n	d77ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d77bc:	2b50      	cmp	r3, #80	; 0x50
   d77be:	d109      	bne.n	d77d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d77c0:	4b09      	ldr	r3, [pc, #36]	; (d77e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d77c2:	681b      	ldr	r3, [r3, #0]
   d77c4:	b13b      	cbz	r3, d77d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d77c6:	b003      	add	sp, #12
   d77c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d77cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d77ce:	f7ff ffe5 	bl	d779c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d77d2:	e006      	b.n	d77e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77d4:	2300      	movs	r3, #0
   d77d6:	9300      	str	r3, [sp, #0]
   d77d8:	461a      	mov	r2, r3
   d77da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77de:	f7fe fae9 	bl	d5db4 <system_ctrl_set_result>
        break;
    }
}
   d77e2:	b003      	add	sp, #12
   d77e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d77e8:	2003e3cc 	.word	0x2003e3cc

000d77ec <module_user_init_hook>:

void module_user_init_hook()
{
   d77ec:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d77ee:	f7fe f91b 	bl	d5a28 <HAL_RNG_GetRandomNumber>
   d77f2:	4604      	mov	r4, r0
    srand(seed);
   d77f4:	f001 fd62 	bl	d92bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d77f8:	4b07      	ldr	r3, [pc, #28]	; (d7818 <module_user_init_hook+0x2c>)
   d77fa:	b113      	cbz	r3, d7802 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d77fc:	4620      	mov	r0, r4
   d77fe:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7802:	2100      	movs	r1, #0
   d7804:	4804      	ldr	r0, [pc, #16]	; (d7818 <module_user_init_hook+0x2c>)
   d7806:	f7fe fb67 	bl	d5ed8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d780a:	2100      	movs	r1, #0
   d780c:	4803      	ldr	r0, [pc, #12]	; (d781c <module_user_init_hook+0x30>)
}
   d780e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7812:	f7fe bac5 	b.w	d5da0 <system_ctrl_set_app_request_handler>
   d7816:	bf00      	nop
   d7818:	00000000 	.word	0x00000000
   d781c:	000d77b5 	.word	0x000d77b5

000d7820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7820:	4770      	bx	lr

000d7822 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d7822:	2000      	movs	r0, #0
   d7824:	4770      	bx	lr

000d7826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7826:	b510      	push	{r4, lr}
   d7828:	2110      	movs	r1, #16
   d782a:	4604      	mov	r4, r0
   d782c:	f000 fe8c 	bl	d8548 <_ZdlPvj>
   d7830:	4620      	mov	r0, r4
   d7832:	bd10      	pop	{r4, pc}

000d7834 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d7834:	b508      	push	{r3, lr}
      { delete this; }
   d7836:	b108      	cbz	r0, d783c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d7838:	f7ff fff5 	bl	d7826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d783c:	bd08      	pop	{r3, pc}

000d783e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d783e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7840:	68c4      	ldr	r4, [r0, #12]
   d7842:	b1ec      	cbz	r4, d7880 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7844:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7846:	2b02      	cmp	r3, #2
   d7848:	d102      	bne.n	d7850 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d784a:	68e0      	ldr	r0, [r4, #12]
   d784c:	f7fe fb54 	bl	d5ef8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7850:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7852:	b135      	cbz	r5, d7862 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7854:	4628      	mov	r0, r5
   d7856:	f7fc fd81 	bl	d435c <_ZNSt14_Function_baseD1Ev>
   d785a:	2110      	movs	r1, #16
   d785c:	4628      	mov	r0, r5
   d785e:	f000 fe73 	bl	d8548 <_ZdlPvj>
   d7862:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7864:	b135      	cbz	r5, d7874 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d7866:	4628      	mov	r0, r5
   d7868:	f7fc fd78 	bl	d435c <_ZNSt14_Function_baseD1Ev>
   d786c:	2110      	movs	r1, #16
   d786e:	4628      	mov	r0, r5
   d7870:	f000 fe6a 	bl	d8548 <_ZdlPvj>
   d7874:	4620      	mov	r0, r4
   d7876:	2114      	movs	r1, #20
   d7878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d787c:	f000 be64 	b.w	d8548 <_ZdlPvj>
   d7880:	bd38      	pop	{r3, r4, r5, pc}

000d7882 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7882:	b513      	push	{r0, r1, r4, lr}
   d7884:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7886:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d788a:	2300      	movs	r3, #0
   d788c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d788e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7890:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7892:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7894:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7896:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7898:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d789a:	f7fd f931 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d789e:	4620      	mov	r0, r4
   d78a0:	b002      	add	sp, #8
   d78a2:	bd10      	pop	{r4, pc}

000d78a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d78a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d78a6:	460c      	mov	r4, r1
   d78a8:	ad02      	add	r5, sp, #8
   d78aa:	f854 3b04 	ldr.w	r3, [r4], #4
   d78ae:	f845 3d08 	str.w	r3, [r5, #-8]!
   d78b2:	4606      	mov	r6, r0
   d78b4:	460f      	mov	r7, r1
   d78b6:	a801      	add	r0, sp, #4
   d78b8:	4621      	mov	r1, r4
   d78ba:	f7fe fff7 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d78be:	4629      	mov	r1, r5
   d78c0:	4630      	mov	r0, r6
   d78c2:	f7ff ffde 	bl	d7882 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d78c6:	a801      	add	r0, sp, #4
   d78c8:	f7fd f91a 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d78cc:	4620      	mov	r0, r4
   d78ce:	f7fd f917 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d78d2:	4638      	mov	r0, r7
   d78d4:	2108      	movs	r1, #8
   d78d6:	f000 fe37 	bl	d8548 <_ZdlPvj>
        return p;
    }
   d78da:	4630      	mov	r0, r6
   d78dc:	b003      	add	sp, #12
   d78de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d78e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d78e0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d78e2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d78e4:	b90a      	cbnz	r2, d78ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d78e6:	f000 fe40 	bl	d856a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78ea:	68c3      	ldr	r3, [r0, #12]
    }
   d78ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78f0:	4718      	bx	r3

000d78f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d78f2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d78f4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d78f6:	f100 0110 	add.w	r1, r0, #16
   d78fa:	f7ff fff1 	bl	d78e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d78fe:	bd08      	pop	{r3, pc}

000d7900 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7900:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d7902:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7904:	b90a      	cbnz	r2, d790a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7906:	f000 fe30 	bl	d856a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d790a:	68c3      	ldr	r3, [r0, #12]
    }
   d790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7910:	4718      	bx	r3

000d7912 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7912:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7914:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7916:	f100 0110 	add.w	r1, r0, #16
   d791a:	f7ff fff1 	bl	d7900 <_ZNKSt8functionIFvRKbEEclES1_>
   d791e:	bd08      	pop	{r3, pc}

000d7920 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7920:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7922:	2300      	movs	r3, #0
   d7924:	6083      	str	r3, [r0, #8]
   d7926:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7928:	4604      	mov	r4, r0
   d792a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d792c:	b12b      	cbz	r3, d793a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d792e:	2202      	movs	r2, #2
   d7930:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7932:	68eb      	ldr	r3, [r5, #12]
   d7934:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7936:	68ab      	ldr	r3, [r5, #8]
   d7938:	60a3      	str	r3, [r4, #8]
	}
    }
   d793a:	4620      	mov	r0, r4
   d793c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d7944:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d7948:	b086      	sub	sp, #24
   d794a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d794c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7950:	808b      	strh	r3, [r1, #4]
   d7952:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7954:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7956:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d795a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d795c:	f04f 0002 	mov.w	r0, #2
   d7960:	e8d4 1f4f 	ldrexb	r1, [r4]
   d7964:	4299      	cmp	r1, r3
   d7966:	d103      	bne.n	d7970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d7968:	e8c4 0f45 	strexb	r5, r0, [r4]
   d796c:	2d00      	cmp	r5, #0
   d796e:	d1f7      	bne.n	d7960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7970:	d002      	beq.n	d7978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d7972:	f88d 1000 	strb.w	r1, [sp]
   d7976:	e06b      	b.n	d7a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7978:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d797c:	bf1e      	ittt	ne
   d797e:	60e7      	strne	r7, [r4, #12]
   d7980:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7982:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7984:	2301      	movs	r3, #1
   d7986:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d798a:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d798c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d798e:	f104 0308 	add.w	r3, r4, #8
   d7992:	f3bf 8f5f 	dmb	sy
   d7996:	e853 6f00 	ldrex	r6, [r3]
   d799a:	e843 0200 	strex	r2, r0, [r3]
   d799e:	2a00      	cmp	r2, #0
   d79a0:	d1f9      	bne.n	d7996 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d79a2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d79a6:	2e00      	cmp	r6, #0
   d79a8:	d052      	beq.n	d7a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d79aa:	f7fe f9e1 	bl	d5d70 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d79ae:	b120      	cbz	r0, d79ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d79b0:	4629      	mov	r1, r5
   d79b2:	4630      	mov	r0, r6
   d79b4:	f7ff ff94 	bl	d78e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d79b8:	e043      	b.n	d7a42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d79ba:	4631      	mov	r1, r6
   d79bc:	4668      	mov	r0, sp
   d79be:	f7ff ffaf 	bl	d7920 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d79c2:	68e0      	ldr	r0, [r4, #12]
   d79c4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d79c8:	b108      	cbz	r0, d79ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d79ca:	f001 fcb1 	bl	d9330 <strdup>
   d79ce:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d79d0:	2010      	movs	r0, #16
   d79d2:	f8ad 5014 	strh.w	r5, [sp, #20]
   d79d6:	f7fc fb5e 	bl	d4096 <_Znwj>
   d79da:	4605      	mov	r5, r0
   d79dc:	b330      	cbz	r0, d7a2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d79de:	f04f 0800 	mov.w	r8, #0
   d79e2:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d79e6:	2018      	movs	r0, #24
   d79e8:	f7fc fb55 	bl	d4096 <_Znwj>
   d79ec:	4604      	mov	r4, r0
   d79ee:	b1c0      	cbz	r0, d7a22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d79f0:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d79f4:	4601      	mov	r1, r0
   d79f6:	4668      	mov	r0, sp
   d79f8:	f7ff fe89 	bl	d770e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d79fc:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d79fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a00:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7a02:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7a04:	9202      	str	r2, [sp, #8]
   d7a06:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a08:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7a0a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d7a0e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a10:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d7a14:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7a18:	9b04      	ldr	r3, [sp, #16]
   d7a1a:	9203      	str	r2, [sp, #12]
   d7a1c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7a1e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7a22:	4b0e      	ldr	r3, [pc, #56]	; (d7a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d7a24:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7a26:	4b0e      	ldr	r3, [pc, #56]	; (d7a60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7a28:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7a2a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7a2c:	9804      	ldr	r0, [sp, #16]
   d7a2e:	f7fe fa63 	bl	d5ef8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7a32:	4668      	mov	r0, sp
   d7a34:	f7fc fc92 	bl	d435c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7a38:	2200      	movs	r2, #0
   d7a3a:	4629      	mov	r1, r5
   d7a3c:	4809      	ldr	r0, [pc, #36]	; (d7a64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d7a3e:	f7fe f99f 	bl	d5d80 <application_thread_invoke>
   d7a42:	4630      	mov	r0, r6
   d7a44:	f7fc fc8a 	bl	d435c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7a48:	2110      	movs	r1, #16
   d7a4a:	4630      	mov	r0, r6
   d7a4c:	f000 fd7c 	bl	d8548 <_ZdlPvj>
   d7a50:	4638      	mov	r0, r7
   d7a52:	f7fe fa51 	bl	d5ef8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d7a56:	b006      	add	sp, #24
   d7a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7a5c:	000d78f3 	.word	0x000d78f3
   d7a60:	000d7b51 	.word	0x000d7b51
   d7a64:	000d8039 	.word	0x000d8039

000d7a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a6c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7a6e:	ad07      	add	r5, sp, #28
   d7a70:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7a74:	4606      	mov	r6, r0
   d7a76:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7a78:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7a7a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7a7c:	460f      	mov	r7, r1
   d7a7e:	4690      	mov	r8, r2
   d7a80:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7a84:	f8c5 b004 	str.w	fp, [r5, #4]
   d7a88:	f8c5 b008 	str.w	fp, [r5, #8]
   d7a8c:	9307      	str	r3, [sp, #28]
   d7a8e:	f7fc fb02 	bl	d4096 <_Znwj>
   d7a92:	4604      	mov	r4, r0
   d7a94:	b138      	cbz	r0, d7aa6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7a96:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7a9a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7a9e:	f8c0 b004 	str.w	fp, [r0, #4]
   d7aa2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7aa6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7aa8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7aaa:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d7aac:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7aae:	f7fc faf2 	bl	d4096 <_Znwj>
   d7ab2:	b128      	cbz	r0, d7ac0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7ab4:	2301      	movs	r3, #1
   d7ab6:	6043      	str	r3, [r0, #4]
   d7ab8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d7aba:	4b23      	ldr	r3, [pc, #140]	; (d7b48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d7abc:	6003      	str	r3, [r0, #0]
   d7abe:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ac0:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d7ac2:	4b22      	ldr	r3, [pc, #136]	; (d7b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d7ac4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7ac6:	2008      	movs	r0, #8
   d7ac8:	f7fc fae5 	bl	d4096 <_Znwj>
   d7acc:	4604      	mov	r4, r0
   d7ace:	b128      	cbz	r0, d7adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7ad0:	9b03      	ldr	r3, [sp, #12]
   d7ad2:	f840 3b04 	str.w	r3, [r0], #4
   d7ad6:	a904      	add	r1, sp, #16
   d7ad8:	f7fe fee8 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7adc:	9500      	str	r5, [sp, #0]
   d7ade:	fa5f f38a 	uxtb.w	r3, sl
   d7ae2:	464a      	mov	r2, r9
   d7ae4:	4641      	mov	r1, r8
   d7ae6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d7ae8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7aea:	f7fe f9dd 	bl	d5ea8 <spark_send_event>
   d7aee:	b9b8      	cbnz	r0, d7b20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7af0:	9b03      	ldr	r3, [sp, #12]
   d7af2:	785b      	ldrb	r3, [r3, #1]
   d7af4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7af8:	b993      	cbnz	r3, d7b20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7afa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7afe:	a905      	add	r1, sp, #20
   d7b00:	a803      	add	r0, sp, #12
   d7b02:	9205      	str	r2, [sp, #20]
   d7b04:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7b08:	f7ff ff1a 	bl	d7940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7b0c:	9805      	ldr	r0, [sp, #20]
   d7b0e:	f7fe f9f3 	bl	d5ef8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7b12:	a805      	add	r0, sp, #20
   d7b14:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7b16:	f7ff fec5 	bl	d78a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b1a:	a806      	add	r0, sp, #24
   d7b1c:	f7fc fff0 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b20:	9b03      	ldr	r3, [sp, #12]
   d7b22:	9305      	str	r3, [sp, #20]
   d7b24:	a904      	add	r1, sp, #16
   d7b26:	a806      	add	r0, sp, #24
   d7b28:	f7fe fec0 	bl	d68ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7b2c:	a905      	add	r1, sp, #20
   d7b2e:	4630      	mov	r0, r6
   d7b30:	f7ff fea7 	bl	d7882 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b34:	a806      	add	r0, sp, #24
   d7b36:	f7fc ffe3 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b3a:	a804      	add	r0, sp, #16
   d7b3c:	f7fc ffe0 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d7b40:	4630      	mov	r0, r6
   d7b42:	b00b      	add	sp, #44	; 0x2c
   d7b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b48:	000da1a0 	.word	0x000da1a0
   d7b4c:	000d7cbd 	.word	0x000d7cbd

000d7b50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7b50:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b54:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7b56:	d006      	beq.n	d7b66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7b58:	2a03      	cmp	r2, #3
   d7b5a:	d017      	beq.n	d7b8c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7b5c:	2a01      	cmp	r2, #1
   d7b5e:	d121      	bne.n	d7ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7b60:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7b62:	6003      	str	r3, [r0, #0]
	      break;
   d7b64:	e01e      	b.n	d7ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7b66:	2018      	movs	r0, #24
   d7b68:	680e      	ldr	r6, [r1, #0]
   d7b6a:	f7fc fa94 	bl	d4096 <_Znwj>
   d7b6e:	4605      	mov	r5, r0
   d7b70:	b150      	cbz	r0, d7b88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7b72:	4631      	mov	r1, r6
   d7b74:	f7ff fed4 	bl	d7920 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7b78:	6930      	ldr	r0, [r6, #16]
   d7b7a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7b7e:	b108      	cbz	r0, d7b84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7b80:	f001 fbd6 	bl	d9330 <strdup>
   d7b84:	6128      	str	r0, [r5, #16]
   d7b86:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7b88:	6025      	str	r5, [r4, #0]
   d7b8a:	e00b      	b.n	d7ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7b8c:	6804      	ldr	r4, [r0, #0]
   d7b8e:	b14c      	cbz	r4, d7ba4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7b90:	6920      	ldr	r0, [r4, #16]
   d7b92:	f7fe f9b1 	bl	d5ef8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b96:	4620      	mov	r0, r4
   d7b98:	f7fc fbe0 	bl	d435c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7b9c:	2118      	movs	r1, #24
   d7b9e:	4620      	mov	r0, r4
   d7ba0:	f000 fcd2 	bl	d8548 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7ba4:	2000      	movs	r0, #0
   d7ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7ba8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7baa:	2300      	movs	r3, #0
   d7bac:	6083      	str	r3, [r0, #8]
   d7bae:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7bb0:	4604      	mov	r4, r0
   d7bb2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7bb4:	b12b      	cbz	r3, d7bc2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7bb6:	2202      	movs	r2, #2
   d7bb8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7bba:	68eb      	ldr	r3, [r5, #12]
   d7bbc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7bbe:	68ab      	ldr	r3, [r5, #8]
   d7bc0:	60a3      	str	r3, [r4, #8]
	}
    }
   d7bc2:	4620      	mov	r0, r4
   d7bc4:	bd38      	pop	{r3, r4, r5, pc}

000d7bc6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7bc6:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7bc8:	b570      	push	{r4, r5, r6, lr}
   d7bca:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7bcc:	d006      	beq.n	d7bdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7bce:	2a03      	cmp	r2, #3
   d7bd0:	d011      	beq.n	d7bf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7bd2:	2a01      	cmp	r2, #1
   d7bd4:	d118      	bne.n	d7c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7bd6:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7bd8:	6003      	str	r3, [r0, #0]
	      break;
   d7bda:	e015      	b.n	d7c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7bdc:	2014      	movs	r0, #20
   d7bde:	680e      	ldr	r6, [r1, #0]
   d7be0:	f7fc fa59 	bl	d4096 <_Znwj>
   d7be4:	4605      	mov	r5, r0
   d7be6:	b120      	cbz	r0, d7bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7be8:	4631      	mov	r1, r6
   d7bea:	f7ff ffdd 	bl	d7ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7bee:	7c33      	ldrb	r3, [r6, #16]
   d7bf0:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7bf2:	6025      	str	r5, [r4, #0]
   d7bf4:	e008      	b.n	d7c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7bf6:	6804      	ldr	r4, [r0, #0]
   d7bf8:	b134      	cbz	r4, d7c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7bfa:	4620      	mov	r0, r4
   d7bfc:	f7fc fbae 	bl	d435c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7c00:	2114      	movs	r1, #20
   d7c02:	4620      	mov	r0, r4
   d7c04:	f000 fca0 	bl	d8548 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7c08:	2000      	movs	r0, #0
   d7c0a:	bd70      	pop	{r4, r5, r6, pc}

000d7c0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7c0c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7c0e:	2300      	movs	r3, #0
   d7c10:	b087      	sub	sp, #28
   d7c12:	460c      	mov	r4, r1
   d7c14:	f3bf 8f5f 	dmb	sy
   d7c18:	e850 6f00 	ldrex	r6, [r0]
   d7c1c:	e840 3200 	strex	r2, r3, [r0]
   d7c20:	2a00      	cmp	r2, #0
   d7c22:	d1f9      	bne.n	d7c18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7c24:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7c28:	2e00      	cmp	r6, #0
   d7c2a:	d03f      	beq.n	d7cac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7c2c:	4618      	mov	r0, r3
   d7c2e:	f7fe f89f 	bl	d5d70 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7c32:	4607      	mov	r7, r0
   d7c34:	b120      	cbz	r0, d7c40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7c36:	4621      	mov	r1, r4
   d7c38:	4630      	mov	r0, r6
   d7c3a:	f7ff fe61 	bl	d7900 <_ZNKSt8functionIFvRKbEEclES1_>
   d7c3e:	e02e      	b.n	d7c9e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7c40:	4631      	mov	r1, r6
   d7c42:	a801      	add	r0, sp, #4
   d7c44:	f7ff ffb0 	bl	d7ba8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7c48:	7823      	ldrb	r3, [r4, #0]
   d7c4a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7c4e:	2010      	movs	r0, #16
   d7c50:	f7fc fa21 	bl	d4096 <_Znwj>
   d7c54:	4605      	mov	r5, r0
   d7c56:	b1d0      	cbz	r0, d7c8e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c58:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7c5a:	2014      	movs	r0, #20
   d7c5c:	f7fc fa1b 	bl	d4096 <_Znwj>
   d7c60:	4604      	mov	r4, r0
   d7c62:	b178      	cbz	r0, d7c84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c64:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7c66:	4601      	mov	r1, r0
   d7c68:	a801      	add	r0, sp, #4
   d7c6a:	f7ff fd50 	bl	d770e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c6e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7c70:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c72:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7c76:	9203      	str	r2, [sp, #12]
   d7c78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c7a:	60e3      	str	r3, [r4, #12]
   d7c7c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7c80:	9204      	str	r2, [sp, #16]
   d7c82:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7c84:	4b0a      	ldr	r3, [pc, #40]	; (d7cb0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7c86:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7c88:	4b0a      	ldr	r3, [pc, #40]	; (d7cb4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7c8a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7c8c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7c8e:	a801      	add	r0, sp, #4
   d7c90:	f7fc fb64 	bl	d435c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7c94:	2200      	movs	r2, #0
   d7c96:	4629      	mov	r1, r5
   d7c98:	4807      	ldr	r0, [pc, #28]	; (d7cb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7c9a:	f7fe f871 	bl	d5d80 <application_thread_invoke>
   d7c9e:	4630      	mov	r0, r6
   d7ca0:	f7fc fb5c 	bl	d435c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7ca4:	2110      	movs	r1, #16
   d7ca6:	4630      	mov	r0, r6
   d7ca8:	f000 fc4e 	bl	d8548 <_ZdlPvj>
        }
    }
   d7cac:	b007      	add	sp, #28
   d7cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7cb0:	000d7913 	.word	0x000d7913
   d7cb4:	000d7bc7 	.word	0x000d7bc7
   d7cb8:	000d8039 	.word	0x000d8039

000d7cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7cbc:	b530      	push	{r4, r5, lr}
   d7cbe:	b085      	sub	sp, #20
   d7cc0:	4604      	mov	r4, r0
   d7cc2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7cc4:	4668      	mov	r0, sp
   d7cc6:	4611      	mov	r1, r2
   d7cc8:	f7ff fdec 	bl	d78a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7ccc:	b17c      	cbz	r4, d7cee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7cce:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7cd0:	4628      	mov	r0, r5
   d7cd2:	b10d      	cbz	r5, d7cd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7cd4:	f001 fb2c 	bl	d9330 <strdup>
   d7cd8:	9002      	str	r0, [sp, #8]
   d7cda:	a902      	add	r1, sp, #8
   d7cdc:	4668      	mov	r0, sp
   d7cde:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7ce2:	f7ff fe2d 	bl	d7940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d7ce6:	9802      	ldr	r0, [sp, #8]
   d7ce8:	f7fe f906 	bl	d5ef8 <free>
   d7cec:	e01d      	b.n	d7d2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7cee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7cf0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7cf4:	f04f 0201 	mov.w	r2, #1
   d7cf8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7cfc:	42a3      	cmp	r3, r4
   d7cfe:	d103      	bne.n	d7d08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7d00:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7d04:	2900      	cmp	r1, #0
   d7d06:	d1f7      	bne.n	d7cf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7d08:	d002      	beq.n	d7d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7d0a:	f88d 3008 	strb.w	r3, [sp, #8]
   d7d0e:	e00c      	b.n	d7d2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7d10:	f110 010c 	adds.w	r1, r0, #12
   d7d14:	f04f 0301 	mov.w	r3, #1
   d7d18:	bf18      	it	ne
   d7d1a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7d1c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7d20:	3004      	adds	r0, #4
   d7d22:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7d26:	f7ff ff71 	bl	d7c0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7d2a:	a801      	add	r0, sp, #4
   d7d2c:	f7fc fee8 	bl	d4b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7d30:	b005      	add	sp, #20
   d7d32:	bd30      	pop	{r4, r5, pc}

000d7d34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7d34:	4770      	bx	lr

000d7d36 <_ZN9IPAddressD0Ev>:
   d7d36:	b510      	push	{r4, lr}
   d7d38:	2118      	movs	r1, #24
   d7d3a:	4604      	mov	r4, r0
   d7d3c:	f000 fc04 	bl	d8548 <_ZdlPvj>
   d7d40:	4620      	mov	r0, r4
   d7d42:	bd10      	pop	{r4, pc}

000d7d44 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7d44:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7d46:	7d03      	ldrb	r3, [r0, #20]
   d7d48:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7d4a:	b08d      	sub	sp, #52	; 0x34
   d7d4c:	460e      	mov	r6, r1
   d7d4e:	f100 0704 	add.w	r7, r0, #4
   d7d52:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7d56:	d002      	beq.n	d7d5e <_ZNK9IPAddress7printToER5Print+0x1a>
   d7d58:	f100 0508 	add.w	r5, r0, #8
   d7d5c:	e018      	b.n	d7d90 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7d5e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7d60:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7d62:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7d66:	232f      	movs	r3, #47	; 0x2f
   d7d68:	462a      	mov	r2, r5
   d7d6a:	200a      	movs	r0, #10
   d7d6c:	f7fd ff10 	bl	d5b90 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7d70:	4628      	mov	r0, r5
   d7d72:	f001 faf8 	bl	d9366 <strlen>
   d7d76:	6833      	ldr	r3, [r6, #0]
   d7d78:	4602      	mov	r2, r0
   d7d7a:	68db      	ldr	r3, [r3, #12]
   d7d7c:	4629      	mov	r1, r5
   d7d7e:	4630      	mov	r0, r6
   d7d80:	4798      	blx	r3
   d7d82:	e00f      	b.n	d7da4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7d84:	b124      	cbz	r4, d7d90 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7d86:	212e      	movs	r1, #46	; 0x2e
   d7d88:	4630      	mov	r0, r6
   d7d8a:	f7ff fb75 	bl	d7478 <_ZN5Print5printEc>
   d7d8e:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7d90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7d94:	220a      	movs	r2, #10
   d7d96:	4630      	mov	r0, r6
   d7d98:	f7ff fbb4 	bl	d7504 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7d9c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7d9e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7da0:	d1f0      	bne.n	d7d84 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7da2:	4620      	mov	r0, r4
    }
    return n;
}
   d7da4:	b00d      	add	sp, #52	; 0x34
   d7da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7da8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7da8:	b510      	push	{r4, lr}
   d7daa:	4b05      	ldr	r3, [pc, #20]	; (d7dc0 <_ZN9IPAddressC1Ev+0x18>)
   d7dac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7dae:	2211      	movs	r2, #17
   d7db0:	f840 3b04 	str.w	r3, [r0], #4
   d7db4:	2100      	movs	r1, #0
   d7db6:	f001 fa78 	bl	d92aa <memset>
{
    clear();
}
   d7dba:	4620      	mov	r0, r4
   d7dbc:	bd10      	pop	{r4, pc}
   d7dbe:	bf00      	nop
   d7dc0:	000da1bc 	.word	0x000da1bc

000d7dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7dc4:	4603      	mov	r3, r0
   d7dc6:	4a07      	ldr	r2, [pc, #28]	; (d7de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7dc8:	b510      	push	{r4, lr}
   d7dca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7dce:	f101 0210 	add.w	r2, r1, #16
   d7dd2:	f851 4b04 	ldr.w	r4, [r1], #4
   d7dd6:	f843 4b04 	str.w	r4, [r3], #4
   d7dda:	4291      	cmp	r1, r2
   d7ddc:	d1f9      	bne.n	d7dd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7dde:	780a      	ldrb	r2, [r1, #0]
   d7de0:	701a      	strb	r2, [r3, #0]
}
   d7de2:	bd10      	pop	{r4, pc}
   d7de4:	000da1bc 	.word	0x000da1bc

000d7de8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7de8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7dea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7dee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7df2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7df6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7dfa:	2304      	movs	r3, #4
   d7dfc:	6041      	str	r1, [r0, #4]
   d7dfe:	7503      	strb	r3, [r0, #20]
   d7e00:	bd10      	pop	{r4, pc}

000d7e02 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7e02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7e04:	780d      	ldrb	r5, [r1, #0]
   d7e06:	788b      	ldrb	r3, [r1, #2]
   d7e08:	784a      	ldrb	r2, [r1, #1]
   d7e0a:	78c9      	ldrb	r1, [r1, #3]
   d7e0c:	9100      	str	r1, [sp, #0]
   d7e0e:	4629      	mov	r1, r5
   d7e10:	f7ff ffea 	bl	d7de8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7e14:	b003      	add	sp, #12
   d7e16:	bd30      	pop	{r4, r5, pc}

000d7e18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e18:	7441      	strb	r1, [r0, #17]
   d7e1a:	4770      	bx	lr

000d7e1c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7e1c:	4770      	bx	lr

000d7e1e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7e1e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7e20:	2100      	movs	r1, #0
   d7e22:	7c00      	ldrb	r0, [r0, #16]
   d7e24:	f7fd ff5c 	bl	d5ce0 <HAL_USB_USART_Receive_Data>
}
   d7e28:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e2c:	bf28      	it	cs
   d7e2e:	f04f 30ff 	movcs.w	r0, #4294967295
   d7e32:	bd08      	pop	{r3, pc}

000d7e34 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7e34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7e36:	2101      	movs	r1, #1
   d7e38:	7c00      	ldrb	r0, [r0, #16]
   d7e3a:	f7fd ff51 	bl	d5ce0 <HAL_USB_USART_Receive_Data>
}
   d7e3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e42:	bf28      	it	cs
   d7e44:	f04f 30ff 	movcs.w	r0, #4294967295
   d7e48:	bd08      	pop	{r3, pc}

000d7e4a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7e4a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7e4c:	7c00      	ldrb	r0, [r0, #16]
   d7e4e:	f7fd ff3f 	bl	d5cd0 <HAL_USB_USART_Available_Data_For_Write>
}
   d7e52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e56:	bd08      	pop	{r3, pc}

000d7e58 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7e58:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7e5a:	7c00      	ldrb	r0, [r0, #16]
   d7e5c:	f7fd ff30 	bl	d5cc0 <HAL_USB_USART_Available_Data>
}
   d7e60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e64:	bd08      	pop	{r3, pc}

000d7e66 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7e66:	7c00      	ldrb	r0, [r0, #16]
   d7e68:	f7fd bf4a 	b.w	d5d00 <HAL_USB_USART_Flush_Data>

000d7e6c <_ZN9USBSerialD0Ev>:
   d7e6c:	b510      	push	{r4, lr}
   d7e6e:	2114      	movs	r1, #20
   d7e70:	4604      	mov	r4, r0
   d7e72:	f000 fb69 	bl	d8548 <_ZdlPvj>
   d7e76:	4620      	mov	r0, r4
   d7e78:	bd10      	pop	{r4, pc}

000d7e7a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7e7a:	b538      	push	{r3, r4, r5, lr}
   d7e7c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7e7e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7e80:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7e82:	f7fd ff25 	bl	d5cd0 <HAL_USB_USART_Available_Data_For_Write>
   d7e86:	2800      	cmp	r0, #0
   d7e88:	dc01      	bgt.n	d7e8e <_ZN9USBSerial5writeEh+0x14>
   d7e8a:	7c60      	ldrb	r0, [r4, #17]
   d7e8c:	b128      	cbz	r0, d7e9a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7e8e:	4629      	mov	r1, r5
   d7e90:	7c20      	ldrb	r0, [r4, #16]
   d7e92:	f7fd ff2d 	bl	d5cf0 <HAL_USB_USART_Send_Data>
   d7e96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7e9a:	bd38      	pop	{r3, r4, r5, pc}

000d7e9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7e9c:	b510      	push	{r4, lr}
   d7e9e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7ea0:	2300      	movs	r3, #0
   d7ea2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ea8:	60a3      	str	r3, [r4, #8]
   d7eaa:	4b05      	ldr	r3, [pc, #20]	; (d7ec0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7eac:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7eae:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7eb0:	4608      	mov	r0, r1
{
  _serial = serial;
   d7eb2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7eb4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7eb6:	4611      	mov	r1, r2
   d7eb8:	f7fd fef2 	bl	d5ca0 <HAL_USB_USART_Init>
}
   d7ebc:	4620      	mov	r0, r4
   d7ebe:	bd10      	pop	{r4, pc}
   d7ec0:	000da1d0 	.word	0x000da1d0

000d7ec4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7ec4:	2200      	movs	r2, #0
   d7ec6:	7c00      	ldrb	r0, [r0, #16]
   d7ec8:	f7fd bef2 	b.w	d5cb0 <HAL_USB_USART_Begin>

000d7ecc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7ecc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7ece:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7ed0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7ed2:	2100      	movs	r1, #0
   d7ed4:	f001 f9e9 	bl	d92aa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7ed8:	4620      	mov	r0, r4
   d7eda:	bd10      	pop	{r4, pc}

000d7edc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7edc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ede:	4d0e      	ldr	r5, [pc, #56]	; (d7f18 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7ee0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7ee2:	a801      	add	r0, sp, #4
   d7ee4:	f7ff fff2 	bl	d7ecc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ee8:	6829      	ldr	r1, [r5, #0]
   d7eea:	f011 0401 	ands.w	r4, r1, #1
   d7eee:	d110      	bne.n	d7f12 <_Z16_fetch_usbserialv+0x36>
   d7ef0:	4628      	mov	r0, r5
   d7ef2:	f7fc f8d6 	bl	d40a2 <__cxa_guard_acquire>
   d7ef6:	b160      	cbz	r0, d7f12 <_Z16_fetch_usbserialv+0x36>
   d7ef8:	aa01      	add	r2, sp, #4
   d7efa:	4621      	mov	r1, r4
   d7efc:	4807      	ldr	r0, [pc, #28]	; (d7f1c <_Z16_fetch_usbserialv+0x40>)
   d7efe:	f7ff ffcd 	bl	d7e9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7f02:	4628      	mov	r0, r5
   d7f04:	f7fc f8d2 	bl	d40ac <__cxa_guard_release>
   d7f08:	4a05      	ldr	r2, [pc, #20]	; (d7f20 <_Z16_fetch_usbserialv+0x44>)
   d7f0a:	4906      	ldr	r1, [pc, #24]	; (d7f24 <_Z16_fetch_usbserialv+0x48>)
   d7f0c:	4803      	ldr	r0, [pc, #12]	; (d7f1c <_Z16_fetch_usbserialv+0x40>)
   d7f0e:	f000 fb0d 	bl	d852c <__aeabi_atexit>
	return _usbserial;
}
   d7f12:	4802      	ldr	r0, [pc, #8]	; (d7f1c <_Z16_fetch_usbserialv+0x40>)
   d7f14:	b007      	add	sp, #28
   d7f16:	bd30      	pop	{r4, r5, pc}
   d7f18:	2003e3d0 	.word	0x2003e3d0
   d7f1c:	2003e3d4 	.word	0x2003e3d4
   d7f20:	2003dc84 	.word	0x2003dc84
   d7f24:	000d7e1d 	.word	0x000d7e1d

000d7f28 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7f28:	4770      	bx	lr

000d7f2a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f2a:	7441      	strb	r1, [r0, #17]
   d7f2c:	4770      	bx	lr

000d7f2e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7f2e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7f30:	7c00      	ldrb	r0, [r0, #16]
   d7f32:	f7fd fe6d 	bl	d5c10 <HAL_USART_Available_Data_For_Write>
}
   d7f36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f3a:	bd08      	pop	{r3, pc}

000d7f3c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7f3c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7f3e:	7c00      	ldrb	r0, [r0, #16]
   d7f40:	f7fd fe3e 	bl	d5bc0 <HAL_USART_Available_Data>
}
   d7f44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f48:	bd08      	pop	{r3, pc}

000d7f4a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7f4a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7f4c:	7c00      	ldrb	r0, [r0, #16]
   d7f4e:	f7fd fe47 	bl	d5be0 <HAL_USART_Peek_Data>
}
   d7f52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f56:	bf28      	it	cs
   d7f58:	f04f 30ff 	movcs.w	r0, #4294967295
   d7f5c:	bd08      	pop	{r3, pc}

000d7f5e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7f5e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7f60:	7c00      	ldrb	r0, [r0, #16]
   d7f62:	f7fd fe35 	bl	d5bd0 <HAL_USART_Read_Data>
}
   d7f66:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7f6a:	bf28      	it	cs
   d7f6c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7f70:	bd08      	pop	{r3, pc}

000d7f72 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7f72:	7c00      	ldrb	r0, [r0, #16]
   d7f74:	f7fd be3c 	b.w	d5bf0 <HAL_USART_Flush_Data>

000d7f78 <_ZN11USARTSerialD0Ev>:
   d7f78:	b510      	push	{r4, lr}
   d7f7a:	2114      	movs	r1, #20
   d7f7c:	4604      	mov	r4, r0
   d7f7e:	f000 fae3 	bl	d8548 <_ZdlPvj>
   d7f82:	4620      	mov	r0, r4
   d7f84:	bd10      	pop	{r4, pc}

000d7f86 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7f86:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7f88:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7f8a:	4604      	mov	r4, r0
   d7f8c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7f8e:	b925      	cbnz	r5, d7f9a <_ZN11USARTSerial5writeEh+0x14>
   d7f90:	7c00      	ldrb	r0, [r0, #16]
   d7f92:	f7fd fe3d 	bl	d5c10 <HAL_USART_Available_Data_For_Write>
   d7f96:	2800      	cmp	r0, #0
   d7f98:	dd05      	ble.n	d7fa6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7f9a:	4631      	mov	r1, r6
   d7f9c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7fa2:	f7fd be05 	b.w	d5bb0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7fa6:	4628      	mov	r0, r5
   d7fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7fac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7fac:	b510      	push	{r4, lr}
   d7fae:	4604      	mov	r4, r0
   d7fb0:	4608      	mov	r0, r1
   d7fb2:	4611      	mov	r1, r2
   d7fb4:	2200      	movs	r2, #0
   d7fb6:	6062      	str	r2, [r4, #4]
   d7fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7fbc:	60a2      	str	r2, [r4, #8]
   d7fbe:	4a05      	ldr	r2, [pc, #20]	; (d7fd4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7fc0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7fc2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7fc4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7fc6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7fc8:	461a      	mov	r2, r3
   d7fca:	f7fd fde9 	bl	d5ba0 <HAL_USART_Init>
}
   d7fce:	4620      	mov	r0, r4
   d7fd0:	bd10      	pop	{r4, pc}
   d7fd2:	bf00      	nop
   d7fd4:	000da200 	.word	0x000da200

000d7fd8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7fd8:	2300      	movs	r3, #0
   d7fda:	7c00      	ldrb	r0, [r0, #16]
   d7fdc:	f7fd be20 	b.w	d5c20 <HAL_USART_BeginConfig>

000d7fe0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7fe0:	2200      	movs	r2, #0
   d7fe2:	f7ff bff9 	b.w	d7fd8 <_ZN11USARTSerial5beginEmm>

000d7fe6 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7fe6:	7c00      	ldrb	r0, [r0, #16]
   d7fe8:	f7fd be0a 	b.w	d5c00 <HAL_USART_Is_Enabled>

000d7fec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7fec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7fee:	4d0c      	ldr	r5, [pc, #48]	; (d8020 <_Z22__fetch_global_Serial1v+0x34>)
   d7ff0:	6829      	ldr	r1, [r5, #0]
   d7ff2:	f011 0401 	ands.w	r4, r1, #1
   d7ff6:	d111      	bne.n	d801c <_Z22__fetch_global_Serial1v+0x30>
   d7ff8:	4628      	mov	r0, r5
   d7ffa:	f7fc f852 	bl	d40a2 <__cxa_guard_acquire>
   d7ffe:	b168      	cbz	r0, d801c <_Z22__fetch_global_Serial1v+0x30>
   d8000:	4a08      	ldr	r2, [pc, #32]	; (d8024 <_Z22__fetch_global_Serial1v+0x38>)
   d8002:	4b09      	ldr	r3, [pc, #36]	; (d8028 <_Z22__fetch_global_Serial1v+0x3c>)
   d8004:	4809      	ldr	r0, [pc, #36]	; (d802c <_Z22__fetch_global_Serial1v+0x40>)
   d8006:	4621      	mov	r1, r4
   d8008:	f7ff ffd0 	bl	d7fac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d800c:	4628      	mov	r0, r5
   d800e:	f7fc f84d 	bl	d40ac <__cxa_guard_release>
   d8012:	4a07      	ldr	r2, [pc, #28]	; (d8030 <_Z22__fetch_global_Serial1v+0x44>)
   d8014:	4907      	ldr	r1, [pc, #28]	; (d8034 <_Z22__fetch_global_Serial1v+0x48>)
   d8016:	4805      	ldr	r0, [pc, #20]	; (d802c <_Z22__fetch_global_Serial1v+0x40>)
   d8018:	f000 fa88 	bl	d852c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d801c:	4803      	ldr	r0, [pc, #12]	; (d802c <_Z22__fetch_global_Serial1v+0x40>)
   d801e:	bd38      	pop	{r3, r4, r5, pc}
   d8020:	2003e480 	.word	0x2003e480
   d8024:	2003e484 	.word	0x2003e484
   d8028:	2003e3fc 	.word	0x2003e3fc
   d802c:	2003e3e8 	.word	0x2003e3e8
   d8030:	2003dc84 	.word	0x2003dc84
   d8034:	000d7f29 	.word	0x000d7f29

000d8038 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8038:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d803a:	6883      	ldr	r3, [r0, #8]
   d803c:	4604      	mov	r4, r0
   d803e:	b90b      	cbnz	r3, d8044 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8040:	f000 fa93 	bl	d856a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8044:	68c3      	ldr	r3, [r0, #12]
   d8046:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8048:	68a3      	ldr	r3, [r4, #8]
   d804a:	b11b      	cbz	r3, d8054 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d804c:	2203      	movs	r2, #3
   d804e:	4621      	mov	r1, r4
   d8050:	4620      	mov	r0, r4
   d8052:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8054:	4620      	mov	r0, r4
   d8056:	2110      	movs	r1, #16
}
   d8058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d805c:	f000 ba74 	b.w	d8548 <_ZdlPvj>

000d8060 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d8060:	4770      	bx	lr

000d8062 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8064:	4606      	mov	r6, r0
   d8066:	4615      	mov	r5, r2
   d8068:	460c      	mov	r4, r1
   d806a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d806c:	42bc      	cmp	r4, r7
   d806e:	d006      	beq.n	d807e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8070:	6833      	ldr	r3, [r6, #0]
   d8072:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8076:	689b      	ldr	r3, [r3, #8]
   d8078:	4630      	mov	r0, r6
   d807a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d807c:	e7f6      	b.n	d806c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d807e:	4628      	mov	r0, r5
   d8080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8082 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8082:	2200      	movs	r2, #0
   d8084:	7c00      	ldrb	r0, [r0, #16]
   d8086:	f7fd bdd3 	b.w	d5c30 <HAL_I2C_Write_Data>

000d808a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d808a:	2100      	movs	r1, #0
   d808c:	7c00      	ldrb	r0, [r0, #16]
   d808e:	f7fd bdd7 	b.w	d5c40 <HAL_I2C_Available_Data>

000d8092 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8092:	2100      	movs	r1, #0
   d8094:	7c00      	ldrb	r0, [r0, #16]
   d8096:	f7fd bddb 	b.w	d5c50 <HAL_I2C_Read_Data>

000d809a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d809a:	2100      	movs	r1, #0
   d809c:	7c00      	ldrb	r0, [r0, #16]
   d809e:	f7fd bddf 	b.w	d5c60 <HAL_I2C_Peek_Data>

000d80a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d80a2:	2100      	movs	r1, #0
   d80a4:	7c00      	ldrb	r0, [r0, #16]
   d80a6:	f7fd bde3 	b.w	d5c70 <HAL_I2C_Flush_Data>

000d80aa <_ZN7TwoWireD0Ev>:
   d80aa:	b510      	push	{r4, lr}
   d80ac:	2114      	movs	r1, #20
   d80ae:	4604      	mov	r4, r0
   d80b0:	f000 fa4a 	bl	d8548 <_ZdlPvj>
   d80b4:	4620      	mov	r0, r4
   d80b6:	bd10      	pop	{r4, pc}

000d80b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d80b8:	b510      	push	{r4, lr}
   d80ba:	4604      	mov	r4, r0
   d80bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d80c0:	4608      	mov	r0, r1
   d80c2:	60a3      	str	r3, [r4, #8]
   d80c4:	2100      	movs	r1, #0
   d80c6:	4b04      	ldr	r3, [pc, #16]	; (d80d8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d80c8:	7420      	strb	r0, [r4, #16]
   d80ca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d80cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d80ce:	f7fd fddf 	bl	d5c90 <HAL_I2C_Init>

}
   d80d2:	4620      	mov	r0, r4
   d80d4:	bd10      	pop	{r4, pc}
   d80d6:	bf00      	nop
   d80d8:	000da230 	.word	0x000da230

000d80dc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d80dc:	2100      	movs	r1, #0
   d80de:	7c00      	ldrb	r0, [r0, #16]
   d80e0:	f7fd bdce 	b.w	d5c80 <HAL_I2C_Is_Enabled>

000d80e4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d80e4:	2200      	movs	r2, #0
   d80e6:	4611      	mov	r1, r2
   d80e8:	6840      	ldr	r0, [r0, #4]
   d80ea:	f7fd bea5 	b.w	d5e38 <network_listening>

000d80ee <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d80ee:	2200      	movs	r2, #0
   d80f0:	4611      	mov	r1, r2
   d80f2:	6840      	ldr	r0, [r0, #4]
   d80f4:	f7fd bec0 	b.w	d5e78 <network_get_listen_timeout>

000d80f8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d80f8:	2200      	movs	r2, #0
   d80fa:	6840      	ldr	r0, [r0, #4]
   d80fc:	f7fd beb4 	b.w	d5e68 <network_set_listen_timeout>

000d8100 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8100:	2200      	movs	r2, #0
   d8102:	f081 0101 	eor.w	r1, r1, #1
   d8106:	6840      	ldr	r0, [r0, #4]
   d8108:	f7fd be8e 	b.w	d5e28 <network_listen>

000d810c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d810c:	2300      	movs	r3, #0
   d810e:	461a      	mov	r2, r3
   d8110:	4619      	mov	r1, r3
   d8112:	6840      	ldr	r0, [r0, #4]
   d8114:	f7fd be80 	b.w	d5e18 <network_off>

000d8118 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8118:	2300      	movs	r3, #0
   d811a:	461a      	mov	r2, r3
   d811c:	4619      	mov	r1, r3
   d811e:	6840      	ldr	r0, [r0, #4]
   d8120:	f7fd be72 	b.w	d5e08 <network_on>

000d8124 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8124:	2200      	movs	r2, #0
   d8126:	4611      	mov	r1, r2
   d8128:	6840      	ldr	r0, [r0, #4]
   d812a:	f7fd be65 	b.w	d5df8 <network_ready>

000d812e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d812e:	2200      	movs	r2, #0
   d8130:	4611      	mov	r1, r2
   d8132:	6840      	ldr	r0, [r0, #4]
   d8134:	f7fd be50 	b.w	d5dd8 <network_connecting>

000d8138 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8138:	2200      	movs	r2, #0
   d813a:	2102      	movs	r1, #2
   d813c:	6840      	ldr	r0, [r0, #4]
   d813e:	f7fd be53 	b.w	d5de8 <network_disconnect>

000d8142 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8142:	2300      	movs	r3, #0
   d8144:	461a      	mov	r2, r3
   d8146:	6840      	ldr	r0, [r0, #4]
   d8148:	f7fd be3e 	b.w	d5dc8 <network_connect>

000d814c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d814c:	b110      	cbz	r0, d8154 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d814e:	6803      	ldr	r3, [r0, #0]
   d8150:	685b      	ldr	r3, [r3, #4]
   d8152:	4718      	bx	r3
   d8154:	4770      	bx	lr
	...

000d8158 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8158:	b538      	push	{r3, r4, r5, lr}
   d815a:	4b0c      	ldr	r3, [pc, #48]	; (d818c <_ZN5spark9MeshClassD1Ev+0x34>)
   d815c:	6003      	str	r3, [r0, #0]
   d815e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8160:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d8164:	b108      	cbz	r0, d816a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8166:	f7fb ff9a 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d816a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d816e:	b135      	cbz	r5, d817e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8170:	4628      	mov	r0, r5
   d8172:	f7fc f90f 	bl	d4394 <_ZN6ThreadD1Ev>
   d8176:	2104      	movs	r1, #4
   d8178:	4628      	mov	r0, r5
   d817a:	f000 f9e5 	bl	d8548 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d817e:	68a0      	ldr	r0, [r4, #8]
   d8180:	b108      	cbz	r0, d8186 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d8182:	f7ff ffe3 	bl	d814c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d8186:	4620      	mov	r0, r4
   d8188:	bd38      	pop	{r3, r4, r5, pc}
   d818a:	bf00      	nop
   d818c:	000da258 	.word	0x000da258

000d8190 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8190:	b538      	push	{r3, r4, r5, lr}
   d8192:	4c0d      	ldr	r4, [pc, #52]	; (d81c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d8194:	4b0d      	ldr	r3, [pc, #52]	; (d81cc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d8196:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8198:	2500      	movs	r5, #0
   d819a:	2302      	movs	r3, #2
   d819c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d81a0:	6063      	str	r3, [r4, #4]
   d81a2:	60a5      	str	r5, [r4, #8]
   d81a4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d81a8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d81ac:	f7fd fcd0 	bl	d5b50 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d81b0:	4b07      	ldr	r3, [pc, #28]	; (d81d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d81b2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d81b6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d81b8:	4620      	mov	r0, r4
   d81ba:	4a06      	ldr	r2, [pc, #24]	; (d81d4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d81bc:	4906      	ldr	r1, [pc, #24]	; (d81d8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d81be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d81c2:	f000 b9b3 	b.w	d852c <__aeabi_atexit>
   d81c6:	bf00      	nop
   d81c8:	2003e508 	.word	0x2003e508
   d81cc:	000da2c0 	.word	0x000da2c0
   d81d0:	000da258 	.word	0x000da258
   d81d4:	2003dc84 	.word	0x2003dc84
   d81d8:	000d8159 	.word	0x000d8159

000d81dc <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   d81dc:	b530      	push	{r4, r5, lr}
        WiFiAccessPoint* results;

        int index;

        void addResult(WiFiAccessPoint* result) {
            if (index<count) {
   d81de:	684b      	ldr	r3, [r1, #4]
   d81e0:	688a      	ldr	r2, [r1, #8]
   d81e2:	4293      	cmp	r3, r2
   d81e4:	da10      	bge.n	d8208 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   d81e6:	680a      	ldr	r2, [r1, #0]
   d81e8:	1c5c      	adds	r4, r3, #1
   d81ea:	604c      	str	r4, [r1, #4]
   d81ec:	4605      	mov	r5, r0
   d81ee:	2438      	movs	r4, #56	; 0x38
   d81f0:	fb04 2403 	mla	r4, r4, r3, r2
   d81f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d81f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d81f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d81fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d81fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d81fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8200:	e895 0003 	ldmia.w	r5, {r0, r1}
   d8204:	e884 0003 	stmia.w	r4, {r0, r1}
   d8208:	bd30      	pop	{r4, r5, pc}

000d820a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d820a:	2200      	movs	r2, #0
   d820c:	4611      	mov	r1, r2
   d820e:	6840      	ldr	r0, [r0, #4]
   d8210:	f7fd bdf2 	b.w	d5df8 <network_ready>

000d8214 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8214:	2200      	movs	r2, #0
   d8216:	4611      	mov	r1, r2
   d8218:	6840      	ldr	r0, [r0, #4]
   d821a:	f7fd be0d 	b.w	d5e38 <network_listening>

000d821e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d821e:	2200      	movs	r2, #0
   d8220:	4611      	mov	r1, r2
   d8222:	6840      	ldr	r0, [r0, #4]
   d8224:	f7fd be28 	b.w	d5e78 <network_get_listen_timeout>

000d8228 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8228:	2200      	movs	r2, #0
   d822a:	6840      	ldr	r0, [r0, #4]
   d822c:	f7fd be1c 	b.w	d5e68 <network_set_listen_timeout>

000d8230 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8230:	2200      	movs	r2, #0
   d8232:	f081 0101 	eor.w	r1, r1, #1
   d8236:	6840      	ldr	r0, [r0, #4]
   d8238:	f7fd bdf6 	b.w	d5e28 <network_listen>

000d823c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d823c:	2300      	movs	r3, #0
   d823e:	461a      	mov	r2, r3
   d8240:	4619      	mov	r1, r3
   d8242:	6840      	ldr	r0, [r0, #4]
   d8244:	f7fd bde8 	b.w	d5e18 <network_off>

000d8248 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8248:	2200      	movs	r2, #0
   d824a:	4611      	mov	r1, r2
   d824c:	6840      	ldr	r0, [r0, #4]
   d824e:	f7fd bdc3 	b.w	d5dd8 <network_connecting>

000d8252 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8252:	2200      	movs	r2, #0
   d8254:	2102      	movs	r1, #2
   d8256:	6840      	ldr	r0, [r0, #4]
   d8258:	f7fd bdc6 	b.w	d5de8 <network_disconnect>

000d825c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d825c:	2300      	movs	r3, #0
   d825e:	461a      	mov	r2, r3
   d8260:	6840      	ldr	r0, [r0, #4]
   d8262:	f7fd bdb1 	b.w	d5dc8 <network_connect>
	...

000d8268 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:
    int WiFiClass::scan(WiFiAccessPoint* results, size_t result_count) {
        APScan apScan(results, result_count);
        return apScan.start();
    }

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   d8268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
   d826a:	2300      	movs	r3, #0
        }

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
   d826c:	9101      	str	r1, [sp, #4]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
   d826e:	4806      	ldr	r0, [pc, #24]	; (d8288 <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
   d8270:	9302      	str	r3, [sp, #8]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
   d8272:	a901      	add	r1, sp, #4

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
   d8274:	9203      	str	r2, [sp, #12]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
   d8276:	f7fd fd4b 	bl	d5d10 <wlan_get_credentials>
    }

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }
   d827a:	9b03      	ldr	r3, [sp, #12]
   d827c:	4298      	cmp	r0, r3
   d827e:	bfa8      	it	ge
   d8280:	4618      	movge	r0, r3
   d8282:	b005      	add	sp, #20
   d8284:	f85d fb04 	ldr.w	pc, [sp], #4
   d8288:	000d81dd 	.word	0x000d81dd

000d828c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d828c:	4b02      	ldr	r3, [pc, #8]	; (d8298 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d828e:	2204      	movs	r2, #4
   d8290:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8292:	4a02      	ldr	r2, [pc, #8]	; (d829c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8294:	601a      	str	r2, [r3, #0]
   d8296:	4770      	bx	lr
   d8298:	2003e6d8 	.word	0x2003e6d8
   d829c:	000da28c 	.word	0x000da28c

000d82a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d82a0:	2300      	movs	r3, #0
   d82a2:	461a      	mov	r2, r3
   d82a4:	6840      	ldr	r0, [r0, #4]
   d82a6:	f7fd bd8f 	b.w	d5dc8 <network_connect>

000d82aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d82aa:	2200      	movs	r2, #0
   d82ac:	2102      	movs	r1, #2
   d82ae:	6840      	ldr	r0, [r0, #4]
   d82b0:	f7fd bd9a 	b.w	d5de8 <network_disconnect>

000d82b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d82b4:	2200      	movs	r2, #0
   d82b6:	4611      	mov	r1, r2
   d82b8:	6840      	ldr	r0, [r0, #4]
   d82ba:	f7fd bd8d 	b.w	d5dd8 <network_connecting>

000d82be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d82be:	2200      	movs	r2, #0
   d82c0:	4611      	mov	r1, r2
   d82c2:	6840      	ldr	r0, [r0, #4]
   d82c4:	f7fd bd98 	b.w	d5df8 <network_ready>

000d82c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d82c8:	2300      	movs	r3, #0
   d82ca:	461a      	mov	r2, r3
   d82cc:	4619      	mov	r1, r3
   d82ce:	6840      	ldr	r0, [r0, #4]
   d82d0:	f7fd bd9a 	b.w	d5e08 <network_on>

000d82d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d82d4:	2300      	movs	r3, #0
   d82d6:	461a      	mov	r2, r3
   d82d8:	4619      	mov	r1, r3
   d82da:	6840      	ldr	r0, [r0, #4]
   d82dc:	f7fd bd9c 	b.w	d5e18 <network_off>

000d82e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d82e0:	2200      	movs	r2, #0
   d82e2:	f081 0101 	eor.w	r1, r1, #1
   d82e6:	6840      	ldr	r0, [r0, #4]
   d82e8:	f7fd bd9e 	b.w	d5e28 <network_listen>

000d82ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d82ec:	2200      	movs	r2, #0
   d82ee:	6840      	ldr	r0, [r0, #4]
   d82f0:	f7fd bdba 	b.w	d5e68 <network_set_listen_timeout>

000d82f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d82f4:	2200      	movs	r2, #0
   d82f6:	4611      	mov	r1, r2
   d82f8:	6840      	ldr	r0, [r0, #4]
   d82fa:	f7fd bdbd 	b.w	d5e78 <network_get_listen_timeout>

000d82fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d82fe:	2200      	movs	r2, #0
   d8300:	4611      	mov	r1, r2
   d8302:	6840      	ldr	r0, [r0, #4]
   d8304:	f7fd bd98 	b.w	d5e38 <network_listening>

000d8308 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d830c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d830e:	b095      	sub	sp, #84	; 0x54
   d8310:	4616      	mov	r6, r2
   d8312:	460d      	mov	r5, r1
   d8314:	4607      	mov	r7, r0
    IPAddress addr;
   d8316:	f7ff fd47 	bl	d7da8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d831a:	4621      	mov	r1, r4
   d831c:	2220      	movs	r2, #32
   d831e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8320:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8322:	f000 ffc2 	bl	d92aa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8326:	2340      	movs	r3, #64	; 0x40
   d8328:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d832a:	4621      	mov	r1, r4
   d832c:	466b      	mov	r3, sp
   d832e:	aa0c      	add	r2, sp, #48	; 0x30
   d8330:	4630      	mov	r0, r6
   d8332:	f7fd fb31 	bl	d5998 <netdb_getaddrinfo>
    if (!r) {
   d8336:	4604      	mov	r4, r0
   d8338:	2800      	cmp	r0, #0
   d833a:	d144      	bne.n	d83c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d833c:	4602      	mov	r2, r0
   d833e:	2101      	movs	r1, #1
   d8340:	6868      	ldr	r0, [r5, #4]
   d8342:	f7fd fd59 	bl	d5df8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8346:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8348:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d834a:	4622      	mov	r2, r4
   d834c:	6868      	ldr	r0, [r5, #4]
   d834e:	f7fd fd53 	bl	d5df8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8352:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8354:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8356:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8358:	2e00      	cmp	r6, #0
   d835a:	d034      	beq.n	d83c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d835c:	2900      	cmp	r1, #0
   d835e:	d132      	bne.n	d83c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8360:	6873      	ldr	r3, [r6, #4]
   d8362:	2b02      	cmp	r3, #2
   d8364:	d002      	beq.n	d836c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8366:	2b0a      	cmp	r3, #10
   d8368:	d009      	beq.n	d837e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d836a:	e02a      	b.n	d83c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d836c:	f1b8 0f00 	cmp.w	r8, #0
   d8370:	d027      	beq.n	d83c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8372:	6971      	ldr	r1, [r6, #20]
   d8374:	4638      	mov	r0, r7
   d8376:	3104      	adds	r1, #4
   d8378:	f7ff fd43 	bl	d7e02 <_ZN9IPAddressaSEPKh>
   d837c:	e020      	b.n	d83c0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d837e:	f1b9 0f00 	cmp.w	r9, #0
   d8382:	d01e      	beq.n	d83c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8384:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8386:	2211      	movs	r2, #17
   d8388:	a801      	add	r0, sp, #4
   d838a:	f000 ff8e 	bl	d92aa <memset>
                    a.v = 6;
   d838e:	2306      	movs	r3, #6
   d8390:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8394:	ad01      	add	r5, sp, #4
   d8396:	f104 0308 	add.w	r3, r4, #8
   d839a:	3418      	adds	r4, #24
   d839c:	6818      	ldr	r0, [r3, #0]
   d839e:	6859      	ldr	r1, [r3, #4]
   d83a0:	462a      	mov	r2, r5
   d83a2:	c203      	stmia	r2!, {r0, r1}
   d83a4:	3308      	adds	r3, #8
   d83a6:	42a3      	cmp	r3, r4
   d83a8:	4615      	mov	r5, r2
   d83aa:	d1f7      	bne.n	d839c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d83ac:	a901      	add	r1, sp, #4
   d83ae:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d83b0:	ad07      	add	r5, sp, #28
   d83b2:	f7ff fd07 	bl	d7dc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d83b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83b8:	1d3c      	adds	r4, r7, #4
   d83ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83bc:	682b      	ldr	r3, [r5, #0]
   d83be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d83c0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d83c2:	69f6      	ldr	r6, [r6, #28]
   d83c4:	e7c8      	b.n	d8358 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d83c6:	9800      	ldr	r0, [sp, #0]
   d83c8:	f7fd fade 	bl	d5988 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d83cc:	4638      	mov	r0, r7
   d83ce:	b015      	add	sp, #84	; 0x54
   d83d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d83d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d83d4:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d83d6:	4a03      	ldr	r2, [pc, #12]	; (d83e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d83d8:	601a      	str	r2, [r3, #0]
   d83da:	2200      	movs	r2, #0
   d83dc:	605a      	str	r2, [r3, #4]
   d83de:	4770      	bx	lr
   d83e0:	2003e6e0 	.word	0x2003e6e0
   d83e4:	000da2c0 	.word	0x000da2c0

000d83e8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d83e8:	b510      	push	{r4, lr}
   d83ea:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d83ec:	480f      	ldr	r0, [pc, #60]	; (d842c <pinAvailable+0x44>)
   d83ee:	f7fd fe1d 	bl	d602c <_ZN8SPIClass9isEnabledEv>
   d83f2:	b128      	cbz	r0, d8400 <pinAvailable+0x18>
   d83f4:	f1a4 030b 	sub.w	r3, r4, #11
   d83f8:	2b02      	cmp	r3, #2
   d83fa:	d801      	bhi.n	d8400 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d83fc:	2000      	movs	r0, #0
   d83fe:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8400:	f000 f874 	bl	d84ec <_Z19__fetch_global_Wirev>
   d8404:	f7ff fe6a 	bl	d80dc <_ZN7TwoWire9isEnabledEv>
   d8408:	b108      	cbz	r0, d840e <pinAvailable+0x26>
   d840a:	2c01      	cmp	r4, #1
   d840c:	d9f6      	bls.n	d83fc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d840e:	f7ff fded 	bl	d7fec <_Z22__fetch_global_Serial1v>
   d8412:	f7ff fde8 	bl	d7fe6 <_ZN11USARTSerial9isEnabledEv>
   d8416:	b118      	cbz	r0, d8420 <pinAvailable+0x38>
   d8418:	f1a4 0309 	sub.w	r3, r4, #9
   d841c:	2b01      	cmp	r3, #1
   d841e:	d9ed      	bls.n	d83fc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8420:	2c23      	cmp	r4, #35	; 0x23
   d8422:	bf8c      	ite	hi
   d8424:	2000      	movhi	r0, #0
   d8426:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8428:	bd10      	pop	{r4, pc}
   d842a:	bf00      	nop
   d842c:	2003e6e8 	.word	0x2003e6e8

000d8430 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8430:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d8432:	b538      	push	{r3, r4, r5, lr}
   d8434:	4604      	mov	r4, r0
   d8436:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8438:	d80a      	bhi.n	d8450 <pinMode+0x20>
   d843a:	29ff      	cmp	r1, #255	; 0xff
   d843c:	d008      	beq.n	d8450 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d843e:	f7ff ffd3 	bl	d83e8 <pinAvailable>
   d8442:	b128      	cbz	r0, d8450 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8444:	4629      	mov	r1, r5
   d8446:	4620      	mov	r0, r4
}
   d8448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d844c:	f7fd babc 	b.w	d59c8 <HAL_Pin_Mode>
   d8450:	bd38      	pop	{r3, r4, r5, pc}

000d8452 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d8452:	b510      	push	{r4, lr}
   d8454:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8456:	f7fd fabf 	bl	d59d8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d845a:	3804      	subs	r0, #4
   d845c:	b2c0      	uxtb	r0, r0
   d845e:	2801      	cmp	r0, #1
   d8460:	d908      	bls.n	d8474 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d8462:	4620      	mov	r0, r4
   d8464:	f7ff ffc0 	bl	d83e8 <pinAvailable>
   d8468:	b120      	cbz	r0, d8474 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d846a:	4620      	mov	r0, r4
}
   d846c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8470:	f7fd baba 	b.w	d59e8 <HAL_GPIO_Read>
}
   d8474:	2000      	movs	r0, #0
   d8476:	bd10      	pop	{r4, pc}

000d8478 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8478:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d847a:	b510      	push	{r4, lr}
   d847c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d847e:	bf9c      	itt	ls
   d8480:	340e      	addls	r4, #14
   d8482:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8484:	4620      	mov	r0, r4
   d8486:	f7ff ffaf 	bl	d83e8 <pinAvailable>
   d848a:	b150      	cbz	r0, d84a2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d848c:	2103      	movs	r1, #3
   d848e:	4620      	mov	r0, r4
   d8490:	f7fd fa92 	bl	d59b8 <HAL_Validate_Pin_Function>
   d8494:	2803      	cmp	r0, #3
   d8496:	d104      	bne.n	d84a2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8498:	4620      	mov	r0, r4
}
   d849a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d849e:	f7fd baab 	b.w	d59f8 <HAL_ADC_Read>
}
   d84a2:	2000      	movs	r0, #0
   d84a4:	bd10      	pop	{r4, pc}
	...

000d84a8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d84a8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d84aa:	4c0c      	ldr	r4, [pc, #48]	; (d84dc <_GLOBAL__sub_I_SPI+0x34>)
   d84ac:	4e0c      	ldr	r6, [pc, #48]	; (d84e0 <_GLOBAL__sub_I_SPI+0x38>)
   d84ae:	4d0d      	ldr	r5, [pc, #52]	; (d84e4 <_GLOBAL__sub_I_SPI+0x3c>)
   d84b0:	2100      	movs	r1, #0
   d84b2:	4620      	mov	r0, r4
   d84b4:	f7fd fda6 	bl	d6004 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d84b8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d84ba:	4c0b      	ldr	r4, [pc, #44]	; (d84e8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d84bc:	4632      	mov	r2, r6
   d84be:	4629      	mov	r1, r5
   d84c0:	f000 f834 	bl	d852c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d84c4:	2101      	movs	r1, #1
   d84c6:	4620      	mov	r0, r4
   d84c8:	f7fd fd9c 	bl	d6004 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d84cc:	4632      	mov	r2, r6
   d84ce:	4629      	mov	r1, r5
   d84d0:	4620      	mov	r0, r4
   d84d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d84d6:	f000 b829 	b.w	d852c <__aeabi_atexit>
   d84da:	bf00      	nop
   d84dc:	2003e6e8 	.word	0x2003e6e8
   d84e0:	2003dc84 	.word	0x2003dc84
   d84e4:	000d5ff5 	.word	0x000d5ff5
   d84e8:	2003e6f8 	.word	0x2003e6f8

000d84ec <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d84ec:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d84ee:	4d0b      	ldr	r5, [pc, #44]	; (d851c <_Z19__fetch_global_Wirev+0x30>)
   d84f0:	6829      	ldr	r1, [r5, #0]
   d84f2:	f011 0401 	ands.w	r4, r1, #1
   d84f6:	d10f      	bne.n	d8518 <_Z19__fetch_global_Wirev+0x2c>
   d84f8:	4628      	mov	r0, r5
   d84fa:	f7fb fdd2 	bl	d40a2 <__cxa_guard_acquire>
   d84fe:	b158      	cbz	r0, d8518 <_Z19__fetch_global_Wirev+0x2c>
   d8500:	4621      	mov	r1, r4
   d8502:	4807      	ldr	r0, [pc, #28]	; (d8520 <_Z19__fetch_global_Wirev+0x34>)
   d8504:	f7ff fdd8 	bl	d80b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8508:	4628      	mov	r0, r5
   d850a:	f7fb fdcf 	bl	d40ac <__cxa_guard_release>
   d850e:	4a05      	ldr	r2, [pc, #20]	; (d8524 <_Z19__fetch_global_Wirev+0x38>)
   d8510:	4905      	ldr	r1, [pc, #20]	; (d8528 <_Z19__fetch_global_Wirev+0x3c>)
   d8512:	4803      	ldr	r0, [pc, #12]	; (d8520 <_Z19__fetch_global_Wirev+0x34>)
   d8514:	f000 f80a 	bl	d852c <__aeabi_atexit>
	return wire;
}
   d8518:	4801      	ldr	r0, [pc, #4]	; (d8520 <_Z19__fetch_global_Wirev+0x34>)
   d851a:	bd38      	pop	{r3, r4, r5, pc}
   d851c:	2003e70c 	.word	0x2003e70c
   d8520:	2003e710 	.word	0x2003e710
   d8524:	2003dc84 	.word	0x2003dc84
   d8528:	000d8061 	.word	0x000d8061

000d852c <__aeabi_atexit>:
   d852c:	460b      	mov	r3, r1
   d852e:	4601      	mov	r1, r0
   d8530:	4618      	mov	r0, r3
   d8532:	f000 bd7f 	b.w	d9034 <__cxa_atexit>
	...

000d8538 <_ZSt15get_new_handlerv>:
   d8538:	4b02      	ldr	r3, [pc, #8]	; (d8544 <_ZSt15get_new_handlerv+0xc>)
   d853a:	6818      	ldr	r0, [r3, #0]
   d853c:	f3bf 8f5f 	dmb	sy
   d8540:	4770      	bx	lr
   d8542:	bf00      	nop
   d8544:	2003e724 	.word	0x2003e724

000d8548 <_ZdlPvj>:
   d8548:	f7fb bda7 	b.w	d409a <_ZdlPv>

000d854c <_ZnwjRKSt9nothrow_t>:
   d854c:	b510      	push	{r4, lr}
   d854e:	2800      	cmp	r0, #0
   d8550:	bf14      	ite	ne
   d8552:	4604      	movne	r4, r0
   d8554:	2401      	moveq	r4, #1
   d8556:	4620      	mov	r0, r4
   d8558:	f7fd fcc6 	bl	d5ee8 <malloc>
   d855c:	b920      	cbnz	r0, d8568 <_ZnwjRKSt9nothrow_t+0x1c>
   d855e:	f7ff ffeb 	bl	d8538 <_ZSt15get_new_handlerv>
   d8562:	b108      	cbz	r0, d8568 <_ZnwjRKSt9nothrow_t+0x1c>
   d8564:	4780      	blx	r0
   d8566:	e7f6      	b.n	d8556 <_ZnwjRKSt9nothrow_t+0xa>
   d8568:	bd10      	pop	{r4, pc}

000d856a <_ZSt25__throw_bad_function_callv>:
   d856a:	b508      	push	{r3, lr}
   d856c:	f7fd fcf4 	bl	d5f58 <abort>

000d8570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8570:	4b18      	ldr	r3, [pc, #96]	; (d85d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8572:	681a      	ldr	r2, [r3, #0]
   d8574:	07d1      	lsls	r1, r2, #31
   d8576:	bf5c      	itt	pl
   d8578:	2201      	movpl	r2, #1
   d857a:	601a      	strpl	r2, [r3, #0]
   d857c:	4b16      	ldr	r3, [pc, #88]	; (d85d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d857e:	681a      	ldr	r2, [r3, #0]
   d8580:	07d2      	lsls	r2, r2, #31
   d8582:	bf5c      	itt	pl
   d8584:	2201      	movpl	r2, #1
   d8586:	601a      	strpl	r2, [r3, #0]
   d8588:	4b14      	ldr	r3, [pc, #80]	; (d85dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d858a:	681a      	ldr	r2, [r3, #0]
   d858c:	07d0      	lsls	r0, r2, #31
   d858e:	bf5c      	itt	pl
   d8590:	2201      	movpl	r2, #1
   d8592:	601a      	strpl	r2, [r3, #0]
   d8594:	4b12      	ldr	r3, [pc, #72]	; (d85e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8596:	681a      	ldr	r2, [r3, #0]
   d8598:	07d1      	lsls	r1, r2, #31
   d859a:	bf5c      	itt	pl
   d859c:	2201      	movpl	r2, #1
   d859e:	601a      	strpl	r2, [r3, #0]
   d85a0:	4b10      	ldr	r3, [pc, #64]	; (d85e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d85a2:	681a      	ldr	r2, [r3, #0]
   d85a4:	07d2      	lsls	r2, r2, #31
   d85a6:	bf5c      	itt	pl
   d85a8:	2201      	movpl	r2, #1
   d85aa:	601a      	strpl	r2, [r3, #0]
   d85ac:	4b0e      	ldr	r3, [pc, #56]	; (d85e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d85ae:	681a      	ldr	r2, [r3, #0]
   d85b0:	07d0      	lsls	r0, r2, #31
   d85b2:	bf5c      	itt	pl
   d85b4:	2201      	movpl	r2, #1
   d85b6:	601a      	strpl	r2, [r3, #0]
   d85b8:	4b0c      	ldr	r3, [pc, #48]	; (d85ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d85ba:	681a      	ldr	r2, [r3, #0]
   d85bc:	07d1      	lsls	r1, r2, #31
   d85be:	bf5c      	itt	pl
   d85c0:	2201      	movpl	r2, #1
   d85c2:	601a      	strpl	r2, [r3, #0]
   d85c4:	4b0a      	ldr	r3, [pc, #40]	; (d85f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d85c6:	681a      	ldr	r2, [r3, #0]
   d85c8:	07d2      	lsls	r2, r2, #31
   d85ca:	bf5c      	itt	pl
   d85cc:	2201      	movpl	r2, #1
   d85ce:	601a      	strpl	r2, [r3, #0]
   d85d0:	4770      	bx	lr
   d85d2:	bf00      	nop
   d85d4:	2003e744 	.word	0x2003e744
   d85d8:	2003e740 	.word	0x2003e740
   d85dc:	2003e73c 	.word	0x2003e73c
   d85e0:	2003e738 	.word	0x2003e738
   d85e4:	2003e734 	.word	0x2003e734
   d85e8:	2003e730 	.word	0x2003e730
   d85ec:	2003e72c 	.word	0x2003e72c
   d85f0:	2003e728 	.word	0x2003e728

000d85f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d85f4:	4b24      	ldr	r3, [pc, #144]	; (d8688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d85f6:	681a      	ldr	r2, [r3, #0]
   d85f8:	07d0      	lsls	r0, r2, #31
   d85fa:	bf5c      	itt	pl
   d85fc:	2201      	movpl	r2, #1
   d85fe:	601a      	strpl	r2, [r3, #0]
   d8600:	4b22      	ldr	r3, [pc, #136]	; (d868c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8602:	681a      	ldr	r2, [r3, #0]
   d8604:	07d1      	lsls	r1, r2, #31
   d8606:	bf5c      	itt	pl
   d8608:	2201      	movpl	r2, #1
   d860a:	601a      	strpl	r2, [r3, #0]
   d860c:	4b20      	ldr	r3, [pc, #128]	; (d8690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d860e:	681a      	ldr	r2, [r3, #0]
   d8610:	07d2      	lsls	r2, r2, #31
   d8612:	bf5c      	itt	pl
   d8614:	2201      	movpl	r2, #1
   d8616:	601a      	strpl	r2, [r3, #0]
   d8618:	4b1e      	ldr	r3, [pc, #120]	; (d8694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d861a:	681a      	ldr	r2, [r3, #0]
   d861c:	07d0      	lsls	r0, r2, #31
   d861e:	bf5c      	itt	pl
   d8620:	2201      	movpl	r2, #1
   d8622:	601a      	strpl	r2, [r3, #0]
   d8624:	4b1c      	ldr	r3, [pc, #112]	; (d8698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8626:	681a      	ldr	r2, [r3, #0]
   d8628:	07d1      	lsls	r1, r2, #31
   d862a:	bf5c      	itt	pl
   d862c:	2201      	movpl	r2, #1
   d862e:	601a      	strpl	r2, [r3, #0]
   d8630:	4b1a      	ldr	r3, [pc, #104]	; (d869c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8632:	681a      	ldr	r2, [r3, #0]
   d8634:	07d2      	lsls	r2, r2, #31
   d8636:	bf5c      	itt	pl
   d8638:	2201      	movpl	r2, #1
   d863a:	601a      	strpl	r2, [r3, #0]
   d863c:	4b18      	ldr	r3, [pc, #96]	; (d86a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d863e:	681a      	ldr	r2, [r3, #0]
   d8640:	07d0      	lsls	r0, r2, #31
   d8642:	bf5c      	itt	pl
   d8644:	2201      	movpl	r2, #1
   d8646:	601a      	strpl	r2, [r3, #0]
   d8648:	4b16      	ldr	r3, [pc, #88]	; (d86a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d864a:	681a      	ldr	r2, [r3, #0]
   d864c:	07d1      	lsls	r1, r2, #31
   d864e:	bf5c      	itt	pl
   d8650:	2201      	movpl	r2, #1
   d8652:	601a      	strpl	r2, [r3, #0]
   d8654:	4b14      	ldr	r3, [pc, #80]	; (d86a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8656:	681a      	ldr	r2, [r3, #0]
   d8658:	07d2      	lsls	r2, r2, #31
   d865a:	bf5c      	itt	pl
   d865c:	2201      	movpl	r2, #1
   d865e:	601a      	strpl	r2, [r3, #0]
   d8660:	4b12      	ldr	r3, [pc, #72]	; (d86ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8662:	681a      	ldr	r2, [r3, #0]
   d8664:	07d0      	lsls	r0, r2, #31
   d8666:	bf5c      	itt	pl
   d8668:	2201      	movpl	r2, #1
   d866a:	601a      	strpl	r2, [r3, #0]
   d866c:	4b10      	ldr	r3, [pc, #64]	; (d86b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d866e:	681a      	ldr	r2, [r3, #0]
   d8670:	07d1      	lsls	r1, r2, #31
   d8672:	bf5c      	itt	pl
   d8674:	2201      	movpl	r2, #1
   d8676:	601a      	strpl	r2, [r3, #0]
   d8678:	4b0e      	ldr	r3, [pc, #56]	; (d86b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d867a:	681a      	ldr	r2, [r3, #0]
   d867c:	07d2      	lsls	r2, r2, #31
   d867e:	bf5c      	itt	pl
   d8680:	2201      	movpl	r2, #1
   d8682:	601a      	strpl	r2, [r3, #0]
   d8684:	4770      	bx	lr
   d8686:	bf00      	nop
   d8688:	2003e774 	.word	0x2003e774
   d868c:	2003e770 	.word	0x2003e770
   d8690:	2003e76c 	.word	0x2003e76c
   d8694:	2003e768 	.word	0x2003e768
   d8698:	2003e764 	.word	0x2003e764
   d869c:	2003e760 	.word	0x2003e760
   d86a0:	2003e75c 	.word	0x2003e75c
   d86a4:	2003e758 	.word	0x2003e758
   d86a8:	2003e754 	.word	0x2003e754
   d86ac:	2003e750 	.word	0x2003e750
   d86b0:	2003e74c 	.word	0x2003e74c
   d86b4:	2003e748 	.word	0x2003e748

000d86b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d86b8:	4b24      	ldr	r3, [pc, #144]	; (d874c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d86ba:	681a      	ldr	r2, [r3, #0]
   d86bc:	07d0      	lsls	r0, r2, #31
   d86be:	bf5c      	itt	pl
   d86c0:	2201      	movpl	r2, #1
   d86c2:	601a      	strpl	r2, [r3, #0]
   d86c4:	4b22      	ldr	r3, [pc, #136]	; (d8750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d86c6:	681a      	ldr	r2, [r3, #0]
   d86c8:	07d1      	lsls	r1, r2, #31
   d86ca:	bf5c      	itt	pl
   d86cc:	2201      	movpl	r2, #1
   d86ce:	601a      	strpl	r2, [r3, #0]
   d86d0:	4b20      	ldr	r3, [pc, #128]	; (d8754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d86d2:	681a      	ldr	r2, [r3, #0]
   d86d4:	07d2      	lsls	r2, r2, #31
   d86d6:	bf5c      	itt	pl
   d86d8:	2201      	movpl	r2, #1
   d86da:	601a      	strpl	r2, [r3, #0]
   d86dc:	4b1e      	ldr	r3, [pc, #120]	; (d8758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d86de:	681a      	ldr	r2, [r3, #0]
   d86e0:	07d0      	lsls	r0, r2, #31
   d86e2:	bf5c      	itt	pl
   d86e4:	2201      	movpl	r2, #1
   d86e6:	601a      	strpl	r2, [r3, #0]
   d86e8:	4b1c      	ldr	r3, [pc, #112]	; (d875c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d86ea:	681a      	ldr	r2, [r3, #0]
   d86ec:	07d1      	lsls	r1, r2, #31
   d86ee:	bf5c      	itt	pl
   d86f0:	2201      	movpl	r2, #1
   d86f2:	601a      	strpl	r2, [r3, #0]
   d86f4:	4b1a      	ldr	r3, [pc, #104]	; (d8760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d86f6:	681a      	ldr	r2, [r3, #0]
   d86f8:	07d2      	lsls	r2, r2, #31
   d86fa:	bf5c      	itt	pl
   d86fc:	2201      	movpl	r2, #1
   d86fe:	601a      	strpl	r2, [r3, #0]
   d8700:	4b18      	ldr	r3, [pc, #96]	; (d8764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8702:	681a      	ldr	r2, [r3, #0]
   d8704:	07d0      	lsls	r0, r2, #31
   d8706:	bf5c      	itt	pl
   d8708:	2201      	movpl	r2, #1
   d870a:	601a      	strpl	r2, [r3, #0]
   d870c:	4b16      	ldr	r3, [pc, #88]	; (d8768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d870e:	681a      	ldr	r2, [r3, #0]
   d8710:	07d1      	lsls	r1, r2, #31
   d8712:	bf5c      	itt	pl
   d8714:	2201      	movpl	r2, #1
   d8716:	601a      	strpl	r2, [r3, #0]
   d8718:	4b14      	ldr	r3, [pc, #80]	; (d876c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d871a:	681a      	ldr	r2, [r3, #0]
   d871c:	07d2      	lsls	r2, r2, #31
   d871e:	bf5c      	itt	pl
   d8720:	2201      	movpl	r2, #1
   d8722:	601a      	strpl	r2, [r3, #0]
   d8724:	4b12      	ldr	r3, [pc, #72]	; (d8770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8726:	681a      	ldr	r2, [r3, #0]
   d8728:	07d0      	lsls	r0, r2, #31
   d872a:	bf5c      	itt	pl
   d872c:	2201      	movpl	r2, #1
   d872e:	601a      	strpl	r2, [r3, #0]
   d8730:	4b10      	ldr	r3, [pc, #64]	; (d8774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8732:	681a      	ldr	r2, [r3, #0]
   d8734:	07d1      	lsls	r1, r2, #31
   d8736:	bf5c      	itt	pl
   d8738:	2201      	movpl	r2, #1
   d873a:	601a      	strpl	r2, [r3, #0]
   d873c:	4b0e      	ldr	r3, [pc, #56]	; (d8778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d873e:	681a      	ldr	r2, [r3, #0]
   d8740:	07d2      	lsls	r2, r2, #31
   d8742:	bf5c      	itt	pl
   d8744:	2201      	movpl	r2, #1
   d8746:	601a      	strpl	r2, [r3, #0]
   d8748:	4770      	bx	lr
   d874a:	bf00      	nop
   d874c:	2003e7a4 	.word	0x2003e7a4
   d8750:	2003e7a0 	.word	0x2003e7a0
   d8754:	2003e79c 	.word	0x2003e79c
   d8758:	2003e798 	.word	0x2003e798
   d875c:	2003e794 	.word	0x2003e794
   d8760:	2003e790 	.word	0x2003e790
   d8764:	2003e78c 	.word	0x2003e78c
   d8768:	2003e788 	.word	0x2003e788
   d876c:	2003e784 	.word	0x2003e784
   d8770:	2003e780 	.word	0x2003e780
   d8774:	2003e77c 	.word	0x2003e77c
   d8778:	2003e778 	.word	0x2003e778

000d877c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d877c:	4b18      	ldr	r3, [pc, #96]	; (d87e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d877e:	681a      	ldr	r2, [r3, #0]
   d8780:	07d1      	lsls	r1, r2, #31
   d8782:	bf5c      	itt	pl
   d8784:	2201      	movpl	r2, #1
   d8786:	601a      	strpl	r2, [r3, #0]
   d8788:	4b16      	ldr	r3, [pc, #88]	; (d87e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d878a:	681a      	ldr	r2, [r3, #0]
   d878c:	07d2      	lsls	r2, r2, #31
   d878e:	bf5c      	itt	pl
   d8790:	2201      	movpl	r2, #1
   d8792:	601a      	strpl	r2, [r3, #0]
   d8794:	4b14      	ldr	r3, [pc, #80]	; (d87e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8796:	681a      	ldr	r2, [r3, #0]
   d8798:	07d0      	lsls	r0, r2, #31
   d879a:	bf5c      	itt	pl
   d879c:	2201      	movpl	r2, #1
   d879e:	601a      	strpl	r2, [r3, #0]
   d87a0:	4b12      	ldr	r3, [pc, #72]	; (d87ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d87a2:	681a      	ldr	r2, [r3, #0]
   d87a4:	07d1      	lsls	r1, r2, #31
   d87a6:	bf5c      	itt	pl
   d87a8:	2201      	movpl	r2, #1
   d87aa:	601a      	strpl	r2, [r3, #0]
   d87ac:	4b10      	ldr	r3, [pc, #64]	; (d87f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d87ae:	681a      	ldr	r2, [r3, #0]
   d87b0:	07d2      	lsls	r2, r2, #31
   d87b2:	bf5c      	itt	pl
   d87b4:	2201      	movpl	r2, #1
   d87b6:	601a      	strpl	r2, [r3, #0]
   d87b8:	4b0e      	ldr	r3, [pc, #56]	; (d87f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d87ba:	681a      	ldr	r2, [r3, #0]
   d87bc:	07d0      	lsls	r0, r2, #31
   d87be:	bf5c      	itt	pl
   d87c0:	2201      	movpl	r2, #1
   d87c2:	601a      	strpl	r2, [r3, #0]
   d87c4:	4b0c      	ldr	r3, [pc, #48]	; (d87f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d87c6:	681a      	ldr	r2, [r3, #0]
   d87c8:	07d1      	lsls	r1, r2, #31
   d87ca:	bf5c      	itt	pl
   d87cc:	2201      	movpl	r2, #1
   d87ce:	601a      	strpl	r2, [r3, #0]
   d87d0:	4b0a      	ldr	r3, [pc, #40]	; (d87fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d87d2:	681a      	ldr	r2, [r3, #0]
   d87d4:	07d2      	lsls	r2, r2, #31
   d87d6:	bf5c      	itt	pl
   d87d8:	2201      	movpl	r2, #1
   d87da:	601a      	strpl	r2, [r3, #0]
   d87dc:	4770      	bx	lr
   d87de:	bf00      	nop
   d87e0:	2003e7c4 	.word	0x2003e7c4
   d87e4:	2003e7c0 	.word	0x2003e7c0
   d87e8:	2003e7bc 	.word	0x2003e7bc
   d87ec:	2003e7b8 	.word	0x2003e7b8
   d87f0:	2003e7b4 	.word	0x2003e7b4
   d87f4:	2003e7b0 	.word	0x2003e7b0
   d87f8:	2003e7ac 	.word	0x2003e7ac
   d87fc:	2003e7a8 	.word	0x2003e7a8

000d8800 <__aeabi_drsub>:
   d8800:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8804:	e002      	b.n	d880c <__adddf3>
   d8806:	bf00      	nop

000d8808 <__aeabi_dsub>:
   d8808:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d880c <__adddf3>:
   d880c:	b530      	push	{r4, r5, lr}
   d880e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8812:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8816:	ea94 0f05 	teq	r4, r5
   d881a:	bf08      	it	eq
   d881c:	ea90 0f02 	teqeq	r0, r2
   d8820:	bf1f      	itttt	ne
   d8822:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8826:	ea55 0c02 	orrsne.w	ip, r5, r2
   d882a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d882e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8832:	f000 80e2 	beq.w	d89fa <__adddf3+0x1ee>
   d8836:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d883a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d883e:	bfb8      	it	lt
   d8840:	426d      	neglt	r5, r5
   d8842:	dd0c      	ble.n	d885e <__adddf3+0x52>
   d8844:	442c      	add	r4, r5
   d8846:	ea80 0202 	eor.w	r2, r0, r2
   d884a:	ea81 0303 	eor.w	r3, r1, r3
   d884e:	ea82 0000 	eor.w	r0, r2, r0
   d8852:	ea83 0101 	eor.w	r1, r3, r1
   d8856:	ea80 0202 	eor.w	r2, r0, r2
   d885a:	ea81 0303 	eor.w	r3, r1, r3
   d885e:	2d36      	cmp	r5, #54	; 0x36
   d8860:	bf88      	it	hi
   d8862:	bd30      	pophi	{r4, r5, pc}
   d8864:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8868:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d886c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8870:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8874:	d002      	beq.n	d887c <__adddf3+0x70>
   d8876:	4240      	negs	r0, r0
   d8878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d887c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8880:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8884:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8888:	d002      	beq.n	d8890 <__adddf3+0x84>
   d888a:	4252      	negs	r2, r2
   d888c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8890:	ea94 0f05 	teq	r4, r5
   d8894:	f000 80a7 	beq.w	d89e6 <__adddf3+0x1da>
   d8898:	f1a4 0401 	sub.w	r4, r4, #1
   d889c:	f1d5 0e20 	rsbs	lr, r5, #32
   d88a0:	db0d      	blt.n	d88be <__adddf3+0xb2>
   d88a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d88a6:	fa22 f205 	lsr.w	r2, r2, r5
   d88aa:	1880      	adds	r0, r0, r2
   d88ac:	f141 0100 	adc.w	r1, r1, #0
   d88b0:	fa03 f20e 	lsl.w	r2, r3, lr
   d88b4:	1880      	adds	r0, r0, r2
   d88b6:	fa43 f305 	asr.w	r3, r3, r5
   d88ba:	4159      	adcs	r1, r3
   d88bc:	e00e      	b.n	d88dc <__adddf3+0xd0>
   d88be:	f1a5 0520 	sub.w	r5, r5, #32
   d88c2:	f10e 0e20 	add.w	lr, lr, #32
   d88c6:	2a01      	cmp	r2, #1
   d88c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d88cc:	bf28      	it	cs
   d88ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   d88d2:	fa43 f305 	asr.w	r3, r3, r5
   d88d6:	18c0      	adds	r0, r0, r3
   d88d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d88dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88e0:	d507      	bpl.n	d88f2 <__adddf3+0xe6>
   d88e2:	f04f 0e00 	mov.w	lr, #0
   d88e6:	f1dc 0c00 	rsbs	ip, ip, #0
   d88ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   d88ee:	eb6e 0101 	sbc.w	r1, lr, r1
   d88f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d88f6:	d31b      	bcc.n	d8930 <__adddf3+0x124>
   d88f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d88fc:	d30c      	bcc.n	d8918 <__adddf3+0x10c>
   d88fe:	0849      	lsrs	r1, r1, #1
   d8900:	ea5f 0030 	movs.w	r0, r0, rrx
   d8904:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8908:	f104 0401 	add.w	r4, r4, #1
   d890c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8910:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8914:	f080 809a 	bcs.w	d8a4c <__adddf3+0x240>
   d8918:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d891c:	bf08      	it	eq
   d891e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8922:	f150 0000 	adcs.w	r0, r0, #0
   d8926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d892a:	ea41 0105 	orr.w	r1, r1, r5
   d892e:	bd30      	pop	{r4, r5, pc}
   d8930:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8934:	4140      	adcs	r0, r0
   d8936:	eb41 0101 	adc.w	r1, r1, r1
   d893a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d893e:	f1a4 0401 	sub.w	r4, r4, #1
   d8942:	d1e9      	bne.n	d8918 <__adddf3+0x10c>
   d8944:	f091 0f00 	teq	r1, #0
   d8948:	bf04      	itt	eq
   d894a:	4601      	moveq	r1, r0
   d894c:	2000      	moveq	r0, #0
   d894e:	fab1 f381 	clz	r3, r1
   d8952:	bf08      	it	eq
   d8954:	3320      	addeq	r3, #32
   d8956:	f1a3 030b 	sub.w	r3, r3, #11
   d895a:	f1b3 0220 	subs.w	r2, r3, #32
   d895e:	da0c      	bge.n	d897a <__adddf3+0x16e>
   d8960:	320c      	adds	r2, #12
   d8962:	dd08      	ble.n	d8976 <__adddf3+0x16a>
   d8964:	f102 0c14 	add.w	ip, r2, #20
   d8968:	f1c2 020c 	rsb	r2, r2, #12
   d896c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8970:	fa21 f102 	lsr.w	r1, r1, r2
   d8974:	e00c      	b.n	d8990 <__adddf3+0x184>
   d8976:	f102 0214 	add.w	r2, r2, #20
   d897a:	bfd8      	it	le
   d897c:	f1c2 0c20 	rsble	ip, r2, #32
   d8980:	fa01 f102 	lsl.w	r1, r1, r2
   d8984:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8988:	bfdc      	itt	le
   d898a:	ea41 010c 	orrle.w	r1, r1, ip
   d898e:	4090      	lslle	r0, r2
   d8990:	1ae4      	subs	r4, r4, r3
   d8992:	bfa2      	ittt	ge
   d8994:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8998:	4329      	orrge	r1, r5
   d899a:	bd30      	popge	{r4, r5, pc}
   d899c:	ea6f 0404 	mvn.w	r4, r4
   d89a0:	3c1f      	subs	r4, #31
   d89a2:	da1c      	bge.n	d89de <__adddf3+0x1d2>
   d89a4:	340c      	adds	r4, #12
   d89a6:	dc0e      	bgt.n	d89c6 <__adddf3+0x1ba>
   d89a8:	f104 0414 	add.w	r4, r4, #20
   d89ac:	f1c4 0220 	rsb	r2, r4, #32
   d89b0:	fa20 f004 	lsr.w	r0, r0, r4
   d89b4:	fa01 f302 	lsl.w	r3, r1, r2
   d89b8:	ea40 0003 	orr.w	r0, r0, r3
   d89bc:	fa21 f304 	lsr.w	r3, r1, r4
   d89c0:	ea45 0103 	orr.w	r1, r5, r3
   d89c4:	bd30      	pop	{r4, r5, pc}
   d89c6:	f1c4 040c 	rsb	r4, r4, #12
   d89ca:	f1c4 0220 	rsb	r2, r4, #32
   d89ce:	fa20 f002 	lsr.w	r0, r0, r2
   d89d2:	fa01 f304 	lsl.w	r3, r1, r4
   d89d6:	ea40 0003 	orr.w	r0, r0, r3
   d89da:	4629      	mov	r1, r5
   d89dc:	bd30      	pop	{r4, r5, pc}
   d89de:	fa21 f004 	lsr.w	r0, r1, r4
   d89e2:	4629      	mov	r1, r5
   d89e4:	bd30      	pop	{r4, r5, pc}
   d89e6:	f094 0f00 	teq	r4, #0
   d89ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d89ee:	bf06      	itte	eq
   d89f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d89f4:	3401      	addeq	r4, #1
   d89f6:	3d01      	subne	r5, #1
   d89f8:	e74e      	b.n	d8898 <__adddf3+0x8c>
   d89fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89fe:	bf18      	it	ne
   d8a00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a04:	d029      	beq.n	d8a5a <__adddf3+0x24e>
   d8a06:	ea94 0f05 	teq	r4, r5
   d8a0a:	bf08      	it	eq
   d8a0c:	ea90 0f02 	teqeq	r0, r2
   d8a10:	d005      	beq.n	d8a1e <__adddf3+0x212>
   d8a12:	ea54 0c00 	orrs.w	ip, r4, r0
   d8a16:	bf04      	itt	eq
   d8a18:	4619      	moveq	r1, r3
   d8a1a:	4610      	moveq	r0, r2
   d8a1c:	bd30      	pop	{r4, r5, pc}
   d8a1e:	ea91 0f03 	teq	r1, r3
   d8a22:	bf1e      	ittt	ne
   d8a24:	2100      	movne	r1, #0
   d8a26:	2000      	movne	r0, #0
   d8a28:	bd30      	popne	{r4, r5, pc}
   d8a2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8a2e:	d105      	bne.n	d8a3c <__adddf3+0x230>
   d8a30:	0040      	lsls	r0, r0, #1
   d8a32:	4149      	adcs	r1, r1
   d8a34:	bf28      	it	cs
   d8a36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8a3a:	bd30      	pop	{r4, r5, pc}
   d8a3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a40:	bf3c      	itt	cc
   d8a42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a46:	bd30      	popcc	{r4, r5, pc}
   d8a48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a54:	f04f 0000 	mov.w	r0, #0
   d8a58:	bd30      	pop	{r4, r5, pc}
   d8a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a5e:	bf1a      	itte	ne
   d8a60:	4619      	movne	r1, r3
   d8a62:	4610      	movne	r0, r2
   d8a64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a68:	bf1c      	itt	ne
   d8a6a:	460b      	movne	r3, r1
   d8a6c:	4602      	movne	r2, r0
   d8a6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a72:	bf06      	itte	eq
   d8a74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8a78:	ea91 0f03 	teqeq	r1, r3
   d8a7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8a80:	bd30      	pop	{r4, r5, pc}
   d8a82:	bf00      	nop

000d8a84 <__aeabi_ui2d>:
   d8a84:	f090 0f00 	teq	r0, #0
   d8a88:	bf04      	itt	eq
   d8a8a:	2100      	moveq	r1, #0
   d8a8c:	4770      	bxeq	lr
   d8a8e:	b530      	push	{r4, r5, lr}
   d8a90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a98:	f04f 0500 	mov.w	r5, #0
   d8a9c:	f04f 0100 	mov.w	r1, #0
   d8aa0:	e750      	b.n	d8944 <__adddf3+0x138>
   d8aa2:	bf00      	nop

000d8aa4 <__aeabi_i2d>:
   d8aa4:	f090 0f00 	teq	r0, #0
   d8aa8:	bf04      	itt	eq
   d8aaa:	2100      	moveq	r1, #0
   d8aac:	4770      	bxeq	lr
   d8aae:	b530      	push	{r4, r5, lr}
   d8ab0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ab4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ab8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8abc:	bf48      	it	mi
   d8abe:	4240      	negmi	r0, r0
   d8ac0:	f04f 0100 	mov.w	r1, #0
   d8ac4:	e73e      	b.n	d8944 <__adddf3+0x138>
   d8ac6:	bf00      	nop

000d8ac8 <__aeabi_f2d>:
   d8ac8:	0042      	lsls	r2, r0, #1
   d8aca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8ace:	ea4f 0131 	mov.w	r1, r1, rrx
   d8ad2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8ad6:	bf1f      	itttt	ne
   d8ad8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8adc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8ae0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8ae4:	4770      	bxne	lr
   d8ae6:	f092 0f00 	teq	r2, #0
   d8aea:	bf14      	ite	ne
   d8aec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8af0:	4770      	bxeq	lr
   d8af2:	b530      	push	{r4, r5, lr}
   d8af4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b00:	e720      	b.n	d8944 <__adddf3+0x138>
   d8b02:	bf00      	nop

000d8b04 <__aeabi_ul2d>:
   d8b04:	ea50 0201 	orrs.w	r2, r0, r1
   d8b08:	bf08      	it	eq
   d8b0a:	4770      	bxeq	lr
   d8b0c:	b530      	push	{r4, r5, lr}
   d8b0e:	f04f 0500 	mov.w	r5, #0
   d8b12:	e00a      	b.n	d8b2a <__aeabi_l2d+0x16>

000d8b14 <__aeabi_l2d>:
   d8b14:	ea50 0201 	orrs.w	r2, r0, r1
   d8b18:	bf08      	it	eq
   d8b1a:	4770      	bxeq	lr
   d8b1c:	b530      	push	{r4, r5, lr}
   d8b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8b22:	d502      	bpl.n	d8b2a <__aeabi_l2d+0x16>
   d8b24:	4240      	negs	r0, r0
   d8b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b36:	f43f aedc 	beq.w	d88f2 <__adddf3+0xe6>
   d8b3a:	f04f 0203 	mov.w	r2, #3
   d8b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b42:	bf18      	it	ne
   d8b44:	3203      	addne	r2, #3
   d8b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b4a:	bf18      	it	ne
   d8b4c:	3203      	addne	r2, #3
   d8b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b52:	f1c2 0320 	rsb	r3, r2, #32
   d8b56:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b5a:	fa20 f002 	lsr.w	r0, r0, r2
   d8b5e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b62:	ea40 000e 	orr.w	r0, r0, lr
   d8b66:	fa21 f102 	lsr.w	r1, r1, r2
   d8b6a:	4414      	add	r4, r2
   d8b6c:	e6c1      	b.n	d88f2 <__adddf3+0xe6>
   d8b6e:	bf00      	nop

000d8b70 <__aeabi_dmul>:
   d8b70:	b570      	push	{r4, r5, r6, lr}
   d8b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b7e:	bf1d      	ittte	ne
   d8b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b84:	ea94 0f0c 	teqne	r4, ip
   d8b88:	ea95 0f0c 	teqne	r5, ip
   d8b8c:	f000 f8de 	bleq	d8d4c <__aeabi_dmul+0x1dc>
   d8b90:	442c      	add	r4, r5
   d8b92:	ea81 0603 	eor.w	r6, r1, r3
   d8b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8ba2:	bf18      	it	ne
   d8ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8bb0:	d038      	beq.n	d8c24 <__aeabi_dmul+0xb4>
   d8bb2:	fba0 ce02 	umull	ip, lr, r0, r2
   d8bb6:	f04f 0500 	mov.w	r5, #0
   d8bba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8bc6:	f04f 0600 	mov.w	r6, #0
   d8bca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8bce:	f09c 0f00 	teq	ip, #0
   d8bd2:	bf18      	it	ne
   d8bd4:	f04e 0e01 	orrne.w	lr, lr, #1
   d8bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8be4:	d204      	bcs.n	d8bf0 <__aeabi_dmul+0x80>
   d8be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8bea:	416d      	adcs	r5, r5
   d8bec:	eb46 0606 	adc.w	r6, r6, r6
   d8bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c08:	bf88      	it	hi
   d8c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c0e:	d81e      	bhi.n	d8c4e <__aeabi_dmul+0xde>
   d8c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8c14:	bf08      	it	eq
   d8c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8c1a:	f150 0000 	adcs.w	r0, r0, #0
   d8c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c22:	bd70      	pop	{r4, r5, r6, pc}
   d8c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8c28:	ea46 0101 	orr.w	r1, r6, r1
   d8c2c:	ea40 0002 	orr.w	r0, r0, r2
   d8c30:	ea81 0103 	eor.w	r1, r1, r3
   d8c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c38:	bfc2      	ittt	gt
   d8c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c42:	bd70      	popgt	{r4, r5, r6, pc}
   d8c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c48:	f04f 0e00 	mov.w	lr, #0
   d8c4c:	3c01      	subs	r4, #1
   d8c4e:	f300 80ab 	bgt.w	d8da8 <__aeabi_dmul+0x238>
   d8c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c56:	bfde      	ittt	le
   d8c58:	2000      	movle	r0, #0
   d8c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c5e:	bd70      	pople	{r4, r5, r6, pc}
   d8c60:	f1c4 0400 	rsb	r4, r4, #0
   d8c64:	3c20      	subs	r4, #32
   d8c66:	da35      	bge.n	d8cd4 <__aeabi_dmul+0x164>
   d8c68:	340c      	adds	r4, #12
   d8c6a:	dc1b      	bgt.n	d8ca4 <__aeabi_dmul+0x134>
   d8c6c:	f104 0414 	add.w	r4, r4, #20
   d8c70:	f1c4 0520 	rsb	r5, r4, #32
   d8c74:	fa00 f305 	lsl.w	r3, r0, r5
   d8c78:	fa20 f004 	lsr.w	r0, r0, r4
   d8c7c:	fa01 f205 	lsl.w	r2, r1, r5
   d8c80:	ea40 0002 	orr.w	r0, r0, r2
   d8c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c90:	fa21 f604 	lsr.w	r6, r1, r4
   d8c94:	eb42 0106 	adc.w	r1, r2, r6
   d8c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c9c:	bf08      	it	eq
   d8c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ca2:	bd70      	pop	{r4, r5, r6, pc}
   d8ca4:	f1c4 040c 	rsb	r4, r4, #12
   d8ca8:	f1c4 0520 	rsb	r5, r4, #32
   d8cac:	fa00 f304 	lsl.w	r3, r0, r4
   d8cb0:	fa20 f005 	lsr.w	r0, r0, r5
   d8cb4:	fa01 f204 	lsl.w	r2, r1, r4
   d8cb8:	ea40 0002 	orr.w	r0, r0, r2
   d8cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8cc4:	f141 0100 	adc.w	r1, r1, #0
   d8cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ccc:	bf08      	it	eq
   d8cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cd2:	bd70      	pop	{r4, r5, r6, pc}
   d8cd4:	f1c4 0520 	rsb	r5, r4, #32
   d8cd8:	fa00 f205 	lsl.w	r2, r0, r5
   d8cdc:	ea4e 0e02 	orr.w	lr, lr, r2
   d8ce0:	fa20 f304 	lsr.w	r3, r0, r4
   d8ce4:	fa01 f205 	lsl.w	r2, r1, r5
   d8ce8:	ea43 0302 	orr.w	r3, r3, r2
   d8cec:	fa21 f004 	lsr.w	r0, r1, r4
   d8cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cf4:	fa21 f204 	lsr.w	r2, r1, r4
   d8cf8:	ea20 0002 	bic.w	r0, r0, r2
   d8cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d04:	bf08      	it	eq
   d8d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d0a:	bd70      	pop	{r4, r5, r6, pc}
   d8d0c:	f094 0f00 	teq	r4, #0
   d8d10:	d10f      	bne.n	d8d32 <__aeabi_dmul+0x1c2>
   d8d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8d16:	0040      	lsls	r0, r0, #1
   d8d18:	eb41 0101 	adc.w	r1, r1, r1
   d8d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d20:	bf08      	it	eq
   d8d22:	3c01      	subeq	r4, #1
   d8d24:	d0f7      	beq.n	d8d16 <__aeabi_dmul+0x1a6>
   d8d26:	ea41 0106 	orr.w	r1, r1, r6
   d8d2a:	f095 0f00 	teq	r5, #0
   d8d2e:	bf18      	it	ne
   d8d30:	4770      	bxne	lr
   d8d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d36:	0052      	lsls	r2, r2, #1
   d8d38:	eb43 0303 	adc.w	r3, r3, r3
   d8d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d40:	bf08      	it	eq
   d8d42:	3d01      	subeq	r5, #1
   d8d44:	d0f7      	beq.n	d8d36 <__aeabi_dmul+0x1c6>
   d8d46:	ea43 0306 	orr.w	r3, r3, r6
   d8d4a:	4770      	bx	lr
   d8d4c:	ea94 0f0c 	teq	r4, ip
   d8d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d54:	bf18      	it	ne
   d8d56:	ea95 0f0c 	teqne	r5, ip
   d8d5a:	d00c      	beq.n	d8d76 <__aeabi_dmul+0x206>
   d8d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d60:	bf18      	it	ne
   d8d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d66:	d1d1      	bne.n	d8d0c <__aeabi_dmul+0x19c>
   d8d68:	ea81 0103 	eor.w	r1, r1, r3
   d8d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d70:	f04f 0000 	mov.w	r0, #0
   d8d74:	bd70      	pop	{r4, r5, r6, pc}
   d8d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d7a:	bf06      	itte	eq
   d8d7c:	4610      	moveq	r0, r2
   d8d7e:	4619      	moveq	r1, r3
   d8d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d84:	d019      	beq.n	d8dba <__aeabi_dmul+0x24a>
   d8d86:	ea94 0f0c 	teq	r4, ip
   d8d8a:	d102      	bne.n	d8d92 <__aeabi_dmul+0x222>
   d8d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8d90:	d113      	bne.n	d8dba <__aeabi_dmul+0x24a>
   d8d92:	ea95 0f0c 	teq	r5, ip
   d8d96:	d105      	bne.n	d8da4 <__aeabi_dmul+0x234>
   d8d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8d9c:	bf1c      	itt	ne
   d8d9e:	4610      	movne	r0, r2
   d8da0:	4619      	movne	r1, r3
   d8da2:	d10a      	bne.n	d8dba <__aeabi_dmul+0x24a>
   d8da4:	ea81 0103 	eor.w	r1, r1, r3
   d8da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8db4:	f04f 0000 	mov.w	r0, #0
   d8db8:	bd70      	pop	{r4, r5, r6, pc}
   d8dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8dc2:	bd70      	pop	{r4, r5, r6, pc}

000d8dc4 <__aeabi_ddiv>:
   d8dc4:	b570      	push	{r4, r5, r6, lr}
   d8dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8dd2:	bf1d      	ittte	ne
   d8dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8dd8:	ea94 0f0c 	teqne	r4, ip
   d8ddc:	ea95 0f0c 	teqne	r5, ip
   d8de0:	f000 f8a7 	bleq	d8f32 <__aeabi_ddiv+0x16e>
   d8de4:	eba4 0405 	sub.w	r4, r4, r5
   d8de8:	ea81 0e03 	eor.w	lr, r1, r3
   d8dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8df4:	f000 8088 	beq.w	d8f08 <__aeabi_ddiv+0x144>
   d8df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8e1c:	429d      	cmp	r5, r3
   d8e1e:	bf08      	it	eq
   d8e20:	4296      	cmpeq	r6, r2
   d8e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8e2a:	d202      	bcs.n	d8e32 <__aeabi_ddiv+0x6e>
   d8e2c:	085b      	lsrs	r3, r3, #1
   d8e2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e32:	1ab6      	subs	r6, r6, r2
   d8e34:	eb65 0503 	sbc.w	r5, r5, r3
   d8e38:	085b      	lsrs	r3, r3, #1
   d8e3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e46:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e4e:	bf22      	ittt	cs
   d8e50:	1ab6      	subcs	r6, r6, r2
   d8e52:	4675      	movcs	r5, lr
   d8e54:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e58:	085b      	lsrs	r3, r3, #1
   d8e5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e66:	bf22      	ittt	cs
   d8e68:	1ab6      	subcs	r6, r6, r2
   d8e6a:	4675      	movcs	r5, lr
   d8e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8e70:	085b      	lsrs	r3, r3, #1
   d8e72:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e76:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e7e:	bf22      	ittt	cs
   d8e80:	1ab6      	subcs	r6, r6, r2
   d8e82:	4675      	movcs	r5, lr
   d8e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8e88:	085b      	lsrs	r3, r3, #1
   d8e8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e96:	bf22      	ittt	cs
   d8e98:	1ab6      	subcs	r6, r6, r2
   d8e9a:	4675      	movcs	r5, lr
   d8e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ea0:	ea55 0e06 	orrs.w	lr, r5, r6
   d8ea4:	d018      	beq.n	d8ed8 <__aeabi_ddiv+0x114>
   d8ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8ec2:	d1c0      	bne.n	d8e46 <__aeabi_ddiv+0x82>
   d8ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ec8:	d10b      	bne.n	d8ee2 <__aeabi_ddiv+0x11e>
   d8eca:	ea41 0100 	orr.w	r1, r1, r0
   d8ece:	f04f 0000 	mov.w	r0, #0
   d8ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8ed6:	e7b6      	b.n	d8e46 <__aeabi_ddiv+0x82>
   d8ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8edc:	bf04      	itt	eq
   d8ede:	4301      	orreq	r1, r0
   d8ee0:	2000      	moveq	r0, #0
   d8ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ee6:	bf88      	it	hi
   d8ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8eec:	f63f aeaf 	bhi.w	d8c4e <__aeabi_dmul+0xde>
   d8ef0:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ef4:	bf04      	itt	eq
   d8ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8efe:	f150 0000 	adcs.w	r0, r0, #0
   d8f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f06:	bd70      	pop	{r4, r5, r6, pc}
   d8f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8f14:	bfc2      	ittt	gt
   d8f16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f1e:	bd70      	popgt	{r4, r5, r6, pc}
   d8f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f24:	f04f 0e00 	mov.w	lr, #0
   d8f28:	3c01      	subs	r4, #1
   d8f2a:	e690      	b.n	d8c4e <__aeabi_dmul+0xde>
   d8f2c:	ea45 0e06 	orr.w	lr, r5, r6
   d8f30:	e68d      	b.n	d8c4e <__aeabi_dmul+0xde>
   d8f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f36:	ea94 0f0c 	teq	r4, ip
   d8f3a:	bf08      	it	eq
   d8f3c:	ea95 0f0c 	teqeq	r5, ip
   d8f40:	f43f af3b 	beq.w	d8dba <__aeabi_dmul+0x24a>
   d8f44:	ea94 0f0c 	teq	r4, ip
   d8f48:	d10a      	bne.n	d8f60 <__aeabi_ddiv+0x19c>
   d8f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f4e:	f47f af34 	bne.w	d8dba <__aeabi_dmul+0x24a>
   d8f52:	ea95 0f0c 	teq	r5, ip
   d8f56:	f47f af25 	bne.w	d8da4 <__aeabi_dmul+0x234>
   d8f5a:	4610      	mov	r0, r2
   d8f5c:	4619      	mov	r1, r3
   d8f5e:	e72c      	b.n	d8dba <__aeabi_dmul+0x24a>
   d8f60:	ea95 0f0c 	teq	r5, ip
   d8f64:	d106      	bne.n	d8f74 <__aeabi_ddiv+0x1b0>
   d8f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f6a:	f43f aefd 	beq.w	d8d68 <__aeabi_dmul+0x1f8>
   d8f6e:	4610      	mov	r0, r2
   d8f70:	4619      	mov	r1, r3
   d8f72:	e722      	b.n	d8dba <__aeabi_dmul+0x24a>
   d8f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f78:	bf18      	it	ne
   d8f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f7e:	f47f aec5 	bne.w	d8d0c <__aeabi_dmul+0x19c>
   d8f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8f86:	f47f af0d 	bne.w	d8da4 <__aeabi_dmul+0x234>
   d8f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8f8e:	f47f aeeb 	bne.w	d8d68 <__aeabi_dmul+0x1f8>
   d8f92:	e712      	b.n	d8dba <__aeabi_dmul+0x24a>

000d8f94 <__aeabi_d2f>:
   d8f94:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8f98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8f9c:	bf24      	itt	cs
   d8f9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8fa6:	d90d      	bls.n	d8fc4 <__aeabi_d2f+0x30>
   d8fa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8fac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8fb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8fb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8fb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8fbc:	bf08      	it	eq
   d8fbe:	f020 0001 	biceq.w	r0, r0, #1
   d8fc2:	4770      	bx	lr
   d8fc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8fc8:	d121      	bne.n	d900e <__aeabi_d2f+0x7a>
   d8fca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8fce:	bfbc      	itt	lt
   d8fd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8fd4:	4770      	bxlt	lr
   d8fd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8fda:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8fde:	f1c2 0218 	rsb	r2, r2, #24
   d8fe2:	f1c2 0c20 	rsb	ip, r2, #32
   d8fe6:	fa10 f30c 	lsls.w	r3, r0, ip
   d8fea:	fa20 f002 	lsr.w	r0, r0, r2
   d8fee:	bf18      	it	ne
   d8ff0:	f040 0001 	orrne.w	r0, r0, #1
   d8ff4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ff8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8ffc:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9000:	ea40 000c 	orr.w	r0, r0, ip
   d9004:	fa23 f302 	lsr.w	r3, r3, r2
   d9008:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d900c:	e7cc      	b.n	d8fa8 <__aeabi_d2f+0x14>
   d900e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9012:	d107      	bne.n	d9024 <__aeabi_d2f+0x90>
   d9014:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9018:	bf1e      	ittt	ne
   d901a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d901e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9022:	4770      	bxne	lr
   d9024:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9028:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d902c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9030:	4770      	bx	lr
   d9032:	bf00      	nop

000d9034 <__cxa_atexit>:
   d9034:	b510      	push	{r4, lr}
   d9036:	4c05      	ldr	r4, [pc, #20]	; (d904c <__cxa_atexit+0x18>)
   d9038:	4613      	mov	r3, r2
   d903a:	b12c      	cbz	r4, d9048 <__cxa_atexit+0x14>
   d903c:	460a      	mov	r2, r1
   d903e:	4601      	mov	r1, r0
   d9040:	2002      	movs	r0, #2
   d9042:	f3af 8000 	nop.w
   d9046:	bd10      	pop	{r4, pc}
   d9048:	4620      	mov	r0, r4
   d904a:	bd10      	pop	{r4, pc}
   d904c:	00000000 	.word	0x00000000

000d9050 <localtime>:
   d9050:	b538      	push	{r3, r4, r5, lr}
   d9052:	4b07      	ldr	r3, [pc, #28]	; (d9070 <localtime+0x20>)
   d9054:	681c      	ldr	r4, [r3, #0]
   d9056:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9058:	4605      	mov	r5, r0
   d905a:	b91b      	cbnz	r3, d9064 <localtime+0x14>
   d905c:	2024      	movs	r0, #36	; 0x24
   d905e:	f7fc ff43 	bl	d5ee8 <malloc>
   d9062:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9064:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d9066:	4628      	mov	r0, r5
   d9068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d906c:	f000 b802 	b.w	d9074 <localtime_r>
   d9070:	2003dc34 	.word	0x2003dc34

000d9074 <localtime_r>:
   d9074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9078:	460c      	mov	r4, r1
   d907a:	4680      	mov	r8, r0
   d907c:	f000 fc8c 	bl	d9998 <__gettzinfo>
   d9080:	4621      	mov	r1, r4
   d9082:	4607      	mov	r7, r0
   d9084:	4640      	mov	r0, r8
   d9086:	f000 fc8b 	bl	d99a0 <gmtime_r>
   d908a:	6946      	ldr	r6, [r0, #20]
   d908c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9090:	07b3      	lsls	r3, r6, #30
   d9092:	4604      	mov	r4, r0
   d9094:	d105      	bne.n	d90a2 <localtime_r+0x2e>
   d9096:	2264      	movs	r2, #100	; 0x64
   d9098:	fb96 f3f2 	sdiv	r3, r6, r2
   d909c:	fb02 6313 	mls	r3, r2, r3, r6
   d90a0:	b94b      	cbnz	r3, d90b6 <localtime_r+0x42>
   d90a2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d90a6:	fb96 f3f5 	sdiv	r3, r6, r5
   d90aa:	fb05 6513 	mls	r5, r5, r3, r6
   d90ae:	fab5 f385 	clz	r3, r5
   d90b2:	095b      	lsrs	r3, r3, #5
   d90b4:	e000      	b.n	d90b8 <localtime_r+0x44>
   d90b6:	2301      	movs	r3, #1
   d90b8:	4a5f      	ldr	r2, [pc, #380]	; (d9238 <localtime_r+0x1c4>)
   d90ba:	2530      	movs	r5, #48	; 0x30
   d90bc:	fb05 2503 	mla	r5, r5, r3, r2
   d90c0:	f000 fa9e 	bl	d9600 <__tz_lock>
   d90c4:	f000 fa9e 	bl	d9604 <_tzset_unlocked>
   d90c8:	4b5c      	ldr	r3, [pc, #368]	; (d923c <localtime_r+0x1c8>)
   d90ca:	681b      	ldr	r3, [r3, #0]
   d90cc:	b1f3      	cbz	r3, d910c <localtime_r+0x98>
   d90ce:	687b      	ldr	r3, [r7, #4]
   d90d0:	429e      	cmp	r6, r3
   d90d2:	d105      	bne.n	d90e0 <localtime_r+0x6c>
   d90d4:	6839      	ldr	r1, [r7, #0]
   d90d6:	f8d8 3000 	ldr.w	r3, [r8]
   d90da:	69fa      	ldr	r2, [r7, #28]
   d90dc:	b941      	cbnz	r1, d90f0 <localtime_r+0x7c>
   d90de:	e00a      	b.n	d90f6 <localtime_r+0x82>
   d90e0:	4630      	mov	r0, r6
   d90e2:	f000 f9e5 	bl	d94b0 <__tzcalc_limits>
   d90e6:	2800      	cmp	r0, #0
   d90e8:	d1f4      	bne.n	d90d4 <localtime_r+0x60>
   d90ea:	f04f 33ff 	mov.w	r3, #4294967295
   d90ee:	e00d      	b.n	d910c <localtime_r+0x98>
   d90f0:	4293      	cmp	r3, r2
   d90f2:	db08      	blt.n	d9106 <localtime_r+0x92>
   d90f4:	e001      	b.n	d90fa <localtime_r+0x86>
   d90f6:	4293      	cmp	r3, r2
   d90f8:	da07      	bge.n	d910a <localtime_r+0x96>
   d90fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d90fc:	4293      	cmp	r3, r2
   d90fe:	bfac      	ite	ge
   d9100:	2300      	movge	r3, #0
   d9102:	2301      	movlt	r3, #1
   d9104:	e002      	b.n	d910c <localtime_r+0x98>
   d9106:	2300      	movs	r3, #0
   d9108:	e000      	b.n	d910c <localtime_r+0x98>
   d910a:	2301      	movs	r3, #1
   d910c:	6223      	str	r3, [r4, #32]
   d910e:	6a23      	ldr	r3, [r4, #32]
   d9110:	2b01      	cmp	r3, #1
   d9112:	bf0c      	ite	eq
   d9114:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d9116:	6a39      	ldrne	r1, [r7, #32]
   d9118:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d911c:	203c      	movs	r0, #60	; 0x3c
   d911e:	fb91 f6f3 	sdiv	r6, r1, r3
   d9122:	fb03 1316 	mls	r3, r3, r6, r1
   d9126:	6861      	ldr	r1, [r4, #4]
   d9128:	fb93 f2f0 	sdiv	r2, r3, r0
   d912c:	fb00 3012 	mls	r0, r0, r2, r3
   d9130:	6823      	ldr	r3, [r4, #0]
   d9132:	1a89      	subs	r1, r1, r2
   d9134:	68a2      	ldr	r2, [r4, #8]
   d9136:	6061      	str	r1, [r4, #4]
   d9138:	1a1b      	subs	r3, r3, r0
   d913a:	1b92      	subs	r2, r2, r6
   d913c:	2b3b      	cmp	r3, #59	; 0x3b
   d913e:	6023      	str	r3, [r4, #0]
   d9140:	60a2      	str	r2, [r4, #8]
   d9142:	dd03      	ble.n	d914c <localtime_r+0xd8>
   d9144:	3101      	adds	r1, #1
   d9146:	6061      	str	r1, [r4, #4]
   d9148:	3b3c      	subs	r3, #60	; 0x3c
   d914a:	e004      	b.n	d9156 <localtime_r+0xe2>
   d914c:	2b00      	cmp	r3, #0
   d914e:	da03      	bge.n	d9158 <localtime_r+0xe4>
   d9150:	3901      	subs	r1, #1
   d9152:	6061      	str	r1, [r4, #4]
   d9154:	333c      	adds	r3, #60	; 0x3c
   d9156:	6023      	str	r3, [r4, #0]
   d9158:	6863      	ldr	r3, [r4, #4]
   d915a:	2b3b      	cmp	r3, #59	; 0x3b
   d915c:	dd03      	ble.n	d9166 <localtime_r+0xf2>
   d915e:	3201      	adds	r2, #1
   d9160:	60a2      	str	r2, [r4, #8]
   d9162:	3b3c      	subs	r3, #60	; 0x3c
   d9164:	e004      	b.n	d9170 <localtime_r+0xfc>
   d9166:	2b00      	cmp	r3, #0
   d9168:	da03      	bge.n	d9172 <localtime_r+0xfe>
   d916a:	3a01      	subs	r2, #1
   d916c:	60a2      	str	r2, [r4, #8]
   d916e:	333c      	adds	r3, #60	; 0x3c
   d9170:	6063      	str	r3, [r4, #4]
   d9172:	68a3      	ldr	r3, [r4, #8]
   d9174:	2b17      	cmp	r3, #23
   d9176:	dd22      	ble.n	d91be <localtime_r+0x14a>
   d9178:	69e2      	ldr	r2, [r4, #28]
   d917a:	3201      	adds	r2, #1
   d917c:	61e2      	str	r2, [r4, #28]
   d917e:	69a2      	ldr	r2, [r4, #24]
   d9180:	3201      	adds	r2, #1
   d9182:	2a06      	cmp	r2, #6
   d9184:	bfc8      	it	gt
   d9186:	2200      	movgt	r2, #0
   d9188:	61a2      	str	r2, [r4, #24]
   d918a:	68e2      	ldr	r2, [r4, #12]
   d918c:	3b18      	subs	r3, #24
   d918e:	3201      	adds	r2, #1
   d9190:	60a3      	str	r3, [r4, #8]
   d9192:	6923      	ldr	r3, [r4, #16]
   d9194:	60e2      	str	r2, [r4, #12]
   d9196:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d919a:	428a      	cmp	r2, r1
   d919c:	dd46      	ble.n	d922c <localtime_r+0x1b8>
   d919e:	3301      	adds	r3, #1
   d91a0:	2b0c      	cmp	r3, #12
   d91a2:	bf0c      	ite	eq
   d91a4:	6963      	ldreq	r3, [r4, #20]
   d91a6:	6123      	strne	r3, [r4, #16]
   d91a8:	eba2 0201 	sub.w	r2, r2, r1
   d91ac:	60e2      	str	r2, [r4, #12]
   d91ae:	bf01      	itttt	eq
   d91b0:	3301      	addeq	r3, #1
   d91b2:	2200      	moveq	r2, #0
   d91b4:	6122      	streq	r2, [r4, #16]
   d91b6:	6163      	streq	r3, [r4, #20]
   d91b8:	bf08      	it	eq
   d91ba:	61e2      	streq	r2, [r4, #28]
   d91bc:	e036      	b.n	d922c <localtime_r+0x1b8>
   d91be:	2b00      	cmp	r3, #0
   d91c0:	da34      	bge.n	d922c <localtime_r+0x1b8>
   d91c2:	69e2      	ldr	r2, [r4, #28]
   d91c4:	3a01      	subs	r2, #1
   d91c6:	61e2      	str	r2, [r4, #28]
   d91c8:	69a2      	ldr	r2, [r4, #24]
   d91ca:	3a01      	subs	r2, #1
   d91cc:	bf48      	it	mi
   d91ce:	2206      	movmi	r2, #6
   d91d0:	61a2      	str	r2, [r4, #24]
   d91d2:	68e2      	ldr	r2, [r4, #12]
   d91d4:	3318      	adds	r3, #24
   d91d6:	3a01      	subs	r2, #1
   d91d8:	60e2      	str	r2, [r4, #12]
   d91da:	60a3      	str	r3, [r4, #8]
   d91dc:	bb32      	cbnz	r2, d922c <localtime_r+0x1b8>
   d91de:	6923      	ldr	r3, [r4, #16]
   d91e0:	3b01      	subs	r3, #1
   d91e2:	d401      	bmi.n	d91e8 <localtime_r+0x174>
   d91e4:	6123      	str	r3, [r4, #16]
   d91e6:	e01d      	b.n	d9224 <localtime_r+0x1b0>
   d91e8:	230b      	movs	r3, #11
   d91ea:	6123      	str	r3, [r4, #16]
   d91ec:	6963      	ldr	r3, [r4, #20]
   d91ee:	1e5a      	subs	r2, r3, #1
   d91f0:	f012 0f03 	tst.w	r2, #3
   d91f4:	6162      	str	r2, [r4, #20]
   d91f6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d91fa:	d105      	bne.n	d9208 <localtime_r+0x194>
   d91fc:	2164      	movs	r1, #100	; 0x64
   d91fe:	fb93 f2f1 	sdiv	r2, r3, r1
   d9202:	fb01 3212 	mls	r2, r1, r2, r3
   d9206:	b94a      	cbnz	r2, d921c <localtime_r+0x1a8>
   d9208:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d920c:	fb93 f2f1 	sdiv	r2, r3, r1
   d9210:	fb01 3312 	mls	r3, r1, r2, r3
   d9214:	fab3 f383 	clz	r3, r3
   d9218:	095b      	lsrs	r3, r3, #5
   d921a:	e000      	b.n	d921e <localtime_r+0x1aa>
   d921c:	2301      	movs	r3, #1
   d921e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d9222:	61e3      	str	r3, [r4, #28]
   d9224:	6923      	ldr	r3, [r4, #16]
   d9226:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d922a:	60e3      	str	r3, [r4, #12]
   d922c:	f000 f9e9 	bl	d9602 <__tz_unlock>
   d9230:	4620      	mov	r0, r4
   d9232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9236:	bf00      	nop
   d9238:	000da454 	.word	0x000da454
   d923c:	2003e7e4 	.word	0x2003e7e4

000d9240 <memcmp>:
   d9240:	b510      	push	{r4, lr}
   d9242:	3901      	subs	r1, #1
   d9244:	4402      	add	r2, r0
   d9246:	4290      	cmp	r0, r2
   d9248:	d007      	beq.n	d925a <memcmp+0x1a>
   d924a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d924e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9252:	42a3      	cmp	r3, r4
   d9254:	d0f7      	beq.n	d9246 <memcmp+0x6>
   d9256:	1b18      	subs	r0, r3, r4
   d9258:	bd10      	pop	{r4, pc}
   d925a:	2000      	movs	r0, #0
   d925c:	bd10      	pop	{r4, pc}

000d925e <memcpy>:
   d925e:	b510      	push	{r4, lr}
   d9260:	1e43      	subs	r3, r0, #1
   d9262:	440a      	add	r2, r1
   d9264:	4291      	cmp	r1, r2
   d9266:	d004      	beq.n	d9272 <memcpy+0x14>
   d9268:	f811 4b01 	ldrb.w	r4, [r1], #1
   d926c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9270:	e7f8      	b.n	d9264 <memcpy+0x6>
   d9272:	bd10      	pop	{r4, pc}

000d9274 <memmove>:
   d9274:	4288      	cmp	r0, r1
   d9276:	b510      	push	{r4, lr}
   d9278:	eb01 0302 	add.w	r3, r1, r2
   d927c:	d801      	bhi.n	d9282 <memmove+0xe>
   d927e:	1e42      	subs	r2, r0, #1
   d9280:	e00b      	b.n	d929a <memmove+0x26>
   d9282:	4298      	cmp	r0, r3
   d9284:	d2fb      	bcs.n	d927e <memmove+0xa>
   d9286:	1881      	adds	r1, r0, r2
   d9288:	1ad2      	subs	r2, r2, r3
   d928a:	42d3      	cmn	r3, r2
   d928c:	d004      	beq.n	d9298 <memmove+0x24>
   d928e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9292:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9296:	e7f8      	b.n	d928a <memmove+0x16>
   d9298:	bd10      	pop	{r4, pc}
   d929a:	4299      	cmp	r1, r3
   d929c:	d004      	beq.n	d92a8 <memmove+0x34>
   d929e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d92a2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d92a6:	e7f8      	b.n	d929a <memmove+0x26>
   d92a8:	bd10      	pop	{r4, pc}

000d92aa <memset>:
   d92aa:	4402      	add	r2, r0
   d92ac:	4603      	mov	r3, r0
   d92ae:	4293      	cmp	r3, r2
   d92b0:	d002      	beq.n	d92b8 <memset+0xe>
   d92b2:	f803 1b01 	strb.w	r1, [r3], #1
   d92b6:	e7fa      	b.n	d92ae <memset+0x4>
   d92b8:	4770      	bx	lr
	...

000d92bc <srand>:
   d92bc:	b538      	push	{r3, r4, r5, lr}
   d92be:	4b12      	ldr	r3, [pc, #72]	; (d9308 <srand+0x4c>)
   d92c0:	681c      	ldr	r4, [r3, #0]
   d92c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d92c4:	4605      	mov	r5, r0
   d92c6:	b9d3      	cbnz	r3, d92fe <srand+0x42>
   d92c8:	2018      	movs	r0, #24
   d92ca:	f7fc fe0d 	bl	d5ee8 <malloc>
   d92ce:	f243 330e 	movw	r3, #13070	; 0x330e
   d92d2:	63a0      	str	r0, [r4, #56]	; 0x38
   d92d4:	8003      	strh	r3, [r0, #0]
   d92d6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d92da:	8043      	strh	r3, [r0, #2]
   d92dc:	f241 2334 	movw	r3, #4660	; 0x1234
   d92e0:	8083      	strh	r3, [r0, #4]
   d92e2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d92e6:	80c3      	strh	r3, [r0, #6]
   d92e8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d92ec:	8103      	strh	r3, [r0, #8]
   d92ee:	2305      	movs	r3, #5
   d92f0:	8143      	strh	r3, [r0, #10]
   d92f2:	230b      	movs	r3, #11
   d92f4:	8183      	strh	r3, [r0, #12]
   d92f6:	2201      	movs	r2, #1
   d92f8:	2300      	movs	r3, #0
   d92fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d92fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9300:	2200      	movs	r2, #0
   d9302:	611d      	str	r5, [r3, #16]
   d9304:	615a      	str	r2, [r3, #20]
   d9306:	bd38      	pop	{r3, r4, r5, pc}
   d9308:	2003dc34 	.word	0x2003dc34

000d930c <strcmp>:
   d930c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9310:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9314:	2a01      	cmp	r2, #1
   d9316:	bf28      	it	cs
   d9318:	429a      	cmpcs	r2, r3
   d931a:	d0f7      	beq.n	d930c <strcmp>
   d931c:	1ad0      	subs	r0, r2, r3
   d931e:	4770      	bx	lr

000d9320 <strcpy>:
   d9320:	4603      	mov	r3, r0
   d9322:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9326:	f803 2b01 	strb.w	r2, [r3], #1
   d932a:	2a00      	cmp	r2, #0
   d932c:	d1f9      	bne.n	d9322 <strcpy+0x2>
   d932e:	4770      	bx	lr

000d9330 <strdup>:
   d9330:	4b02      	ldr	r3, [pc, #8]	; (d933c <strdup+0xc>)
   d9332:	4601      	mov	r1, r0
   d9334:	6818      	ldr	r0, [r3, #0]
   d9336:	f000 b803 	b.w	d9340 <_strdup_r>
   d933a:	bf00      	nop
   d933c:	2003dc34 	.word	0x2003dc34

000d9340 <_strdup_r>:
   d9340:	b570      	push	{r4, r5, r6, lr}
   d9342:	4606      	mov	r6, r0
   d9344:	4608      	mov	r0, r1
   d9346:	460c      	mov	r4, r1
   d9348:	f000 f80d 	bl	d9366 <strlen>
   d934c:	1c45      	adds	r5, r0, #1
   d934e:	4629      	mov	r1, r5
   d9350:	4630      	mov	r0, r6
   d9352:	f7fc fe09 	bl	d5f68 <_malloc_r>
   d9356:	4606      	mov	r6, r0
   d9358:	b118      	cbz	r0, d9362 <_strdup_r+0x22>
   d935a:	462a      	mov	r2, r5
   d935c:	4621      	mov	r1, r4
   d935e:	f7ff ff7e 	bl	d925e <memcpy>
   d9362:	4630      	mov	r0, r6
   d9364:	bd70      	pop	{r4, r5, r6, pc}

000d9366 <strlen>:
   d9366:	4603      	mov	r3, r0
   d9368:	f813 2b01 	ldrb.w	r2, [r3], #1
   d936c:	2a00      	cmp	r2, #0
   d936e:	d1fb      	bne.n	d9368 <strlen+0x2>
   d9370:	1a18      	subs	r0, r3, r0
   d9372:	3801      	subs	r0, #1
   d9374:	4770      	bx	lr

000d9376 <strncmp>:
   d9376:	b530      	push	{r4, r5, lr}
   d9378:	b182      	cbz	r2, d939c <strncmp+0x26>
   d937a:	1e45      	subs	r5, r0, #1
   d937c:	3901      	subs	r1, #1
   d937e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9382:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9386:	42a3      	cmp	r3, r4
   d9388:	d106      	bne.n	d9398 <strncmp+0x22>
   d938a:	43ec      	mvns	r4, r5
   d938c:	4414      	add	r4, r2
   d938e:	42e0      	cmn	r0, r4
   d9390:	d001      	beq.n	d9396 <strncmp+0x20>
   d9392:	2b00      	cmp	r3, #0
   d9394:	d1f3      	bne.n	d937e <strncmp+0x8>
   d9396:	461c      	mov	r4, r3
   d9398:	1b18      	subs	r0, r3, r4
   d939a:	bd30      	pop	{r4, r5, pc}
   d939c:	4610      	mov	r0, r2
   d939e:	bd30      	pop	{r4, r5, pc}

000d93a0 <_strtoul_r>:
   d93a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93a4:	4680      	mov	r8, r0
   d93a6:	483c      	ldr	r0, [pc, #240]	; (d9498 <_strtoul_r+0xf8>)
   d93a8:	f8d0 9000 	ldr.w	r9, [r0]
   d93ac:	460e      	mov	r6, r1
   d93ae:	4635      	mov	r5, r6
   d93b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d93b4:	eb09 0004 	add.w	r0, r9, r4
   d93b8:	7840      	ldrb	r0, [r0, #1]
   d93ba:	f000 0008 	and.w	r0, r0, #8
   d93be:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d93c2:	b108      	cbz	r0, d93c8 <_strtoul_r+0x28>
   d93c4:	462e      	mov	r6, r5
   d93c6:	e7f2      	b.n	d93ae <_strtoul_r+0xe>
   d93c8:	2c2d      	cmp	r4, #45	; 0x2d
   d93ca:	d103      	bne.n	d93d4 <_strtoul_r+0x34>
   d93cc:	1cb5      	adds	r5, r6, #2
   d93ce:	7874      	ldrb	r4, [r6, #1]
   d93d0:	2701      	movs	r7, #1
   d93d2:	e003      	b.n	d93dc <_strtoul_r+0x3c>
   d93d4:	2c2b      	cmp	r4, #43	; 0x2b
   d93d6:	bf04      	itt	eq
   d93d8:	7874      	ldrbeq	r4, [r6, #1]
   d93da:	1cb5      	addeq	r5, r6, #2
   d93dc:	b113      	cbz	r3, d93e4 <_strtoul_r+0x44>
   d93de:	2b10      	cmp	r3, #16
   d93e0:	d10a      	bne.n	d93f8 <_strtoul_r+0x58>
   d93e2:	e053      	b.n	d948c <_strtoul_r+0xec>
   d93e4:	2c30      	cmp	r4, #48	; 0x30
   d93e6:	d14f      	bne.n	d9488 <_strtoul_r+0xe8>
   d93e8:	7828      	ldrb	r0, [r5, #0]
   d93ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d93ee:	2858      	cmp	r0, #88	; 0x58
   d93f0:	d145      	bne.n	d947e <_strtoul_r+0xde>
   d93f2:	786c      	ldrb	r4, [r5, #1]
   d93f4:	2310      	movs	r3, #16
   d93f6:	3502      	adds	r5, #2
   d93f8:	f04f 3cff 	mov.w	ip, #4294967295
   d93fc:	2600      	movs	r6, #0
   d93fe:	fbbc fcf3 	udiv	ip, ip, r3
   d9402:	fb03 fa0c 	mul.w	sl, r3, ip
   d9406:	ea6f 0a0a 	mvn.w	sl, sl
   d940a:	4630      	mov	r0, r6
   d940c:	eb09 0e04 	add.w	lr, r9, r4
   d9410:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9414:	f01e 0f04 	tst.w	lr, #4
   d9418:	d001      	beq.n	d941e <_strtoul_r+0x7e>
   d941a:	3c30      	subs	r4, #48	; 0x30
   d941c:	e00b      	b.n	d9436 <_strtoul_r+0x96>
   d941e:	f01e 0e03 	ands.w	lr, lr, #3
   d9422:	d01a      	beq.n	d945a <_strtoul_r+0xba>
   d9424:	f1be 0f01 	cmp.w	lr, #1
   d9428:	bf0c      	ite	eq
   d942a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d942e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9432:	ebce 0404 	rsb	r4, lr, r4
   d9436:	42a3      	cmp	r3, r4
   d9438:	dd0f      	ble.n	d945a <_strtoul_r+0xba>
   d943a:	2e00      	cmp	r6, #0
   d943c:	db08      	blt.n	d9450 <_strtoul_r+0xb0>
   d943e:	4560      	cmp	r0, ip
   d9440:	d806      	bhi.n	d9450 <_strtoul_r+0xb0>
   d9442:	d101      	bne.n	d9448 <_strtoul_r+0xa8>
   d9444:	4554      	cmp	r4, sl
   d9446:	dc03      	bgt.n	d9450 <_strtoul_r+0xb0>
   d9448:	fb03 4000 	mla	r0, r3, r0, r4
   d944c:	2601      	movs	r6, #1
   d944e:	e001      	b.n	d9454 <_strtoul_r+0xb4>
   d9450:	f04f 36ff 	mov.w	r6, #4294967295
   d9454:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9458:	e7d8      	b.n	d940c <_strtoul_r+0x6c>
   d945a:	2e00      	cmp	r6, #0
   d945c:	da07      	bge.n	d946e <_strtoul_r+0xce>
   d945e:	2322      	movs	r3, #34	; 0x22
   d9460:	f8c8 3000 	str.w	r3, [r8]
   d9464:	f04f 30ff 	mov.w	r0, #4294967295
   d9468:	b92a      	cbnz	r2, d9476 <_strtoul_r+0xd6>
   d946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d946e:	b107      	cbz	r7, d9472 <_strtoul_r+0xd2>
   d9470:	4240      	negs	r0, r0
   d9472:	b172      	cbz	r2, d9492 <_strtoul_r+0xf2>
   d9474:	b106      	cbz	r6, d9478 <_strtoul_r+0xd8>
   d9476:	1e69      	subs	r1, r5, #1
   d9478:	6011      	str	r1, [r2, #0]
   d947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d947e:	2430      	movs	r4, #48	; 0x30
   d9480:	2b00      	cmp	r3, #0
   d9482:	d1b9      	bne.n	d93f8 <_strtoul_r+0x58>
   d9484:	2308      	movs	r3, #8
   d9486:	e7b7      	b.n	d93f8 <_strtoul_r+0x58>
   d9488:	230a      	movs	r3, #10
   d948a:	e7b5      	b.n	d93f8 <_strtoul_r+0x58>
   d948c:	2c30      	cmp	r4, #48	; 0x30
   d948e:	d0ab      	beq.n	d93e8 <_strtoul_r+0x48>
   d9490:	e7b2      	b.n	d93f8 <_strtoul_r+0x58>
   d9492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9496:	bf00      	nop
   d9498:	2003dbd0 	.word	0x2003dbd0

000d949c <strtoul>:
   d949c:	4613      	mov	r3, r2
   d949e:	460a      	mov	r2, r1
   d94a0:	4601      	mov	r1, r0
   d94a2:	4802      	ldr	r0, [pc, #8]	; (d94ac <strtoul+0x10>)
   d94a4:	6800      	ldr	r0, [r0, #0]
   d94a6:	f7ff bf7b 	b.w	d93a0 <_strtoul_r>
   d94aa:	bf00      	nop
   d94ac:	2003dc34 	.word	0x2003dc34

000d94b0 <__tzcalc_limits>:
   d94b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d94b4:	4604      	mov	r4, r0
   d94b6:	f000 fa6f 	bl	d9998 <__gettzinfo>
   d94ba:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d94be:	429c      	cmp	r4, r3
   d94c0:	f340 8096 	ble.w	d95f0 <__tzcalc_limits+0x140>
   d94c4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d94c8:	18e3      	adds	r3, r4, r3
   d94ca:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d94ce:	109b      	asrs	r3, r3, #2
   d94d0:	f240 156d 	movw	r5, #365	; 0x16d
   d94d4:	fb05 3502 	mla	r5, r5, r2, r3
   d94d8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d94dc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d94e0:	fb92 f3f3 	sdiv	r3, r2, r3
   d94e4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d94e8:	442b      	add	r3, r5
   d94ea:	18a5      	adds	r5, r4, r2
   d94ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d94f0:	fb95 f5f2 	sdiv	r5, r5, r2
   d94f4:	441d      	add	r5, r3
   d94f6:	2364      	movs	r3, #100	; 0x64
   d94f8:	fb94 f7f2 	sdiv	r7, r4, r2
   d94fc:	fb94 f6f3 	sdiv	r6, r4, r3
   d9500:	fb02 4717 	mls	r7, r2, r7, r4
   d9504:	fb03 4616 	mls	r6, r3, r6, r4
   d9508:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d950c:	fab7 fe87 	clz	lr, r7
   d9510:	9301      	str	r3, [sp, #4]
   d9512:	f004 0303 	and.w	r3, r4, #3
   d9516:	6044      	str	r4, [r0, #4]
   d9518:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d951c:	4601      	mov	r1, r0
   d951e:	9300      	str	r3, [sp, #0]
   d9520:	f04f 0c07 	mov.w	ip, #7
   d9524:	7a0b      	ldrb	r3, [r1, #8]
   d9526:	2b4a      	cmp	r3, #74	; 0x4a
   d9528:	d10e      	bne.n	d9548 <__tzcalc_limits+0x98>
   d952a:	694b      	ldr	r3, [r1, #20]
   d952c:	9a00      	ldr	r2, [sp, #0]
   d952e:	18ec      	adds	r4, r5, r3
   d9530:	b902      	cbnz	r2, d9534 <__tzcalc_limits+0x84>
   d9532:	b906      	cbnz	r6, d9536 <__tzcalc_limits+0x86>
   d9534:	b927      	cbnz	r7, d9540 <__tzcalc_limits+0x90>
   d9536:	2b3b      	cmp	r3, #59	; 0x3b
   d9538:	bfd4      	ite	le
   d953a:	2300      	movle	r3, #0
   d953c:	2301      	movgt	r3, #1
   d953e:	e000      	b.n	d9542 <__tzcalc_limits+0x92>
   d9540:	2300      	movs	r3, #0
   d9542:	4423      	add	r3, r4
   d9544:	3b01      	subs	r3, #1
   d9546:	e03f      	b.n	d95c8 <__tzcalc_limits+0x118>
   d9548:	2b44      	cmp	r3, #68	; 0x44
   d954a:	d102      	bne.n	d9552 <__tzcalc_limits+0xa2>
   d954c:	694b      	ldr	r3, [r1, #20]
   d954e:	442b      	add	r3, r5
   d9550:	e03a      	b.n	d95c8 <__tzcalc_limits+0x118>
   d9552:	9b00      	ldr	r3, [sp, #0]
   d9554:	b92b      	cbnz	r3, d9562 <__tzcalc_limits+0xb2>
   d9556:	2e00      	cmp	r6, #0
   d9558:	bf0c      	ite	eq
   d955a:	46f0      	moveq	r8, lr
   d955c:	f04f 0801 	movne.w	r8, #1
   d9560:	e000      	b.n	d9564 <__tzcalc_limits+0xb4>
   d9562:	46f0      	mov	r8, lr
   d9564:	4b24      	ldr	r3, [pc, #144]	; (d95f8 <__tzcalc_limits+0x148>)
   d9566:	68cc      	ldr	r4, [r1, #12]
   d9568:	2230      	movs	r2, #48	; 0x30
   d956a:	fb02 3808 	mla	r8, r2, r8, r3
   d956e:	f1a8 0a04 	sub.w	sl, r8, #4
   d9572:	46a9      	mov	r9, r5
   d9574:	2301      	movs	r3, #1
   d9576:	42a3      	cmp	r3, r4
   d9578:	da04      	bge.n	d9584 <__tzcalc_limits+0xd4>
   d957a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d957e:	3301      	adds	r3, #1
   d9580:	44d9      	add	r9, fp
   d9582:	e7f8      	b.n	d9576 <__tzcalc_limits+0xc6>
   d9584:	f109 0304 	add.w	r3, r9, #4
   d9588:	fb93 fbfc 	sdiv	fp, r3, ip
   d958c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d9590:	2c01      	cmp	r4, #1
   d9592:	ebca 0a03 	rsb	sl, sl, r3
   d9596:	694b      	ldr	r3, [r1, #20]
   d9598:	bfb8      	it	lt
   d959a:	2401      	movlt	r4, #1
   d959c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d95a0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d95a4:	690b      	ldr	r3, [r1, #16]
   d95a6:	f104 34ff 	add.w	r4, r4, #4294967295
   d95aa:	f103 33ff 	add.w	r3, r3, #4294967295
   d95ae:	bf48      	it	mi
   d95b0:	f10a 0a07 	addmi.w	sl, sl, #7
   d95b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d95b8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d95bc:	4453      	add	r3, sl
   d95be:	42a3      	cmp	r3, r4
   d95c0:	db01      	blt.n	d95c6 <__tzcalc_limits+0x116>
   d95c2:	3b07      	subs	r3, #7
   d95c4:	e7fb      	b.n	d95be <__tzcalc_limits+0x10e>
   d95c6:	444b      	add	r3, r9
   d95c8:	698c      	ldr	r4, [r1, #24]
   d95ca:	4a0c      	ldr	r2, [pc, #48]	; (d95fc <__tzcalc_limits+0x14c>)
   d95cc:	fb02 4303 	mla	r3, r2, r3, r4
   d95d0:	6a0c      	ldr	r4, [r1, #32]
   d95d2:	4423      	add	r3, r4
   d95d4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d95d8:	9b01      	ldr	r3, [sp, #4]
   d95da:	4299      	cmp	r1, r3
   d95dc:	d1a2      	bne.n	d9524 <__tzcalc_limits+0x74>
   d95de:	69c3      	ldr	r3, [r0, #28]
   d95e0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d95e2:	4293      	cmp	r3, r2
   d95e4:	bfac      	ite	ge
   d95e6:	2300      	movge	r3, #0
   d95e8:	2301      	movlt	r3, #1
   d95ea:	6003      	str	r3, [r0, #0]
   d95ec:	2001      	movs	r0, #1
   d95ee:	e000      	b.n	d95f2 <__tzcalc_limits+0x142>
   d95f0:	2000      	movs	r0, #0
   d95f2:	b003      	add	sp, #12
   d95f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d95f8:	000da454 	.word	0x000da454
   d95fc:	00015180 	.word	0x00015180

000d9600 <__tz_lock>:
   d9600:	4770      	bx	lr

000d9602 <__tz_unlock>:
   d9602:	4770      	bx	lr

000d9604 <_tzset_unlocked>:
   d9604:	4b01      	ldr	r3, [pc, #4]	; (d960c <_tzset_unlocked+0x8>)
   d9606:	6818      	ldr	r0, [r3, #0]
   d9608:	f000 b802 	b.w	d9610 <_tzset_unlocked_r>
   d960c:	2003dc34 	.word	0x2003dc34

000d9610 <_tzset_unlocked_r>:
   d9610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9614:	b08d      	sub	sp, #52	; 0x34
   d9616:	4607      	mov	r7, r0
   d9618:	f000 f9be 	bl	d9998 <__gettzinfo>
   d961c:	49b0      	ldr	r1, [pc, #704]	; (d98e0 <_tzset_unlocked_r+0x2d0>)
   d961e:	4eb1      	ldr	r6, [pc, #708]	; (d98e4 <_tzset_unlocked_r+0x2d4>)
   d9620:	4604      	mov	r4, r0
   d9622:	4638      	mov	r0, r7
   d9624:	f000 f9b0 	bl	d9988 <_getenv_r>
   d9628:	4605      	mov	r5, r0
   d962a:	b960      	cbnz	r0, d9646 <_tzset_unlocked_r+0x36>
   d962c:	4bae      	ldr	r3, [pc, #696]	; (d98e8 <_tzset_unlocked_r+0x2d8>)
   d962e:	4aaf      	ldr	r2, [pc, #700]	; (d98ec <_tzset_unlocked_r+0x2dc>)
   d9630:	6018      	str	r0, [r3, #0]
   d9632:	4baf      	ldr	r3, [pc, #700]	; (d98f0 <_tzset_unlocked_r+0x2e0>)
   d9634:	6018      	str	r0, [r3, #0]
   d9636:	4baf      	ldr	r3, [pc, #700]	; (d98f4 <_tzset_unlocked_r+0x2e4>)
   d9638:	6830      	ldr	r0, [r6, #0]
   d963a:	601a      	str	r2, [r3, #0]
   d963c:	605a      	str	r2, [r3, #4]
   d963e:	f7fc fc5b 	bl	d5ef8 <free>
   d9642:	6035      	str	r5, [r6, #0]
   d9644:	e148      	b.n	d98d8 <_tzset_unlocked_r+0x2c8>
   d9646:	6831      	ldr	r1, [r6, #0]
   d9648:	b979      	cbnz	r1, d966a <_tzset_unlocked_r+0x5a>
   d964a:	6830      	ldr	r0, [r6, #0]
   d964c:	f7fc fc54 	bl	d5ef8 <free>
   d9650:	4628      	mov	r0, r5
   d9652:	f7ff fe88 	bl	d9366 <strlen>
   d9656:	1c41      	adds	r1, r0, #1
   d9658:	4638      	mov	r0, r7
   d965a:	f7fc fc85 	bl	d5f68 <_malloc_r>
   d965e:	6030      	str	r0, [r6, #0]
   d9660:	b148      	cbz	r0, d9676 <_tzset_unlocked_r+0x66>
   d9662:	4629      	mov	r1, r5
   d9664:	f7ff fe5c 	bl	d9320 <strcpy>
   d9668:	e005      	b.n	d9676 <_tzset_unlocked_r+0x66>
   d966a:	f7ff fe4f 	bl	d930c <strcmp>
   d966e:	2800      	cmp	r0, #0
   d9670:	f000 8132 	beq.w	d98d8 <_tzset_unlocked_r+0x2c8>
   d9674:	e7e9      	b.n	d964a <_tzset_unlocked_r+0x3a>
   d9676:	782b      	ldrb	r3, [r5, #0]
   d9678:	4a9f      	ldr	r2, [pc, #636]	; (d98f8 <_tzset_unlocked_r+0x2e8>)
   d967a:	49a0      	ldr	r1, [pc, #640]	; (d98fc <_tzset_unlocked_r+0x2ec>)
   d967c:	2b3a      	cmp	r3, #58	; 0x3a
   d967e:	bf08      	it	eq
   d9680:	3501      	addeq	r5, #1
   d9682:	ae0a      	add	r6, sp, #40	; 0x28
   d9684:	4633      	mov	r3, r6
   d9686:	4628      	mov	r0, r5
   d9688:	f7fc fc56 	bl	d5f38 <siscanf>
   d968c:	2800      	cmp	r0, #0
   d968e:	f340 8123 	ble.w	d98d8 <_tzset_unlocked_r+0x2c8>
   d9692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9694:	18ef      	adds	r7, r5, r3
   d9696:	5ceb      	ldrb	r3, [r5, r3]
   d9698:	2b2d      	cmp	r3, #45	; 0x2d
   d969a:	d103      	bne.n	d96a4 <_tzset_unlocked_r+0x94>
   d969c:	3701      	adds	r7, #1
   d969e:	f04f 35ff 	mov.w	r5, #4294967295
   d96a2:	e003      	b.n	d96ac <_tzset_unlocked_r+0x9c>
   d96a4:	2b2b      	cmp	r3, #43	; 0x2b
   d96a6:	bf08      	it	eq
   d96a8:	3701      	addeq	r7, #1
   d96aa:	2501      	movs	r5, #1
   d96ac:	f10d 0a20 	add.w	sl, sp, #32
   d96b0:	f10d 0b1e 	add.w	fp, sp, #30
   d96b4:	f04f 0800 	mov.w	r8, #0
   d96b8:	9603      	str	r6, [sp, #12]
   d96ba:	f8cd a008 	str.w	sl, [sp, #8]
   d96be:	9601      	str	r6, [sp, #4]
   d96c0:	f8cd b000 	str.w	fp, [sp]
   d96c4:	4633      	mov	r3, r6
   d96c6:	aa07      	add	r2, sp, #28
   d96c8:	498d      	ldr	r1, [pc, #564]	; (d9900 <_tzset_unlocked_r+0x2f0>)
   d96ca:	f8ad 801e 	strh.w	r8, [sp, #30]
   d96ce:	4638      	mov	r0, r7
   d96d0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d96d4:	f7fc fc30 	bl	d5f38 <siscanf>
   d96d8:	4540      	cmp	r0, r8
   d96da:	f340 80fd 	ble.w	d98d8 <_tzset_unlocked_r+0x2c8>
   d96de:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d96e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d96e6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d990c <_tzset_unlocked_r+0x2fc>
   d96ea:	213c      	movs	r1, #60	; 0x3c
   d96ec:	fb01 3302 	mla	r3, r1, r2, r3
   d96f0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d96f4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d96f8:	fb01 3302 	mla	r3, r1, r2, r3
   d96fc:	435d      	muls	r5, r3
   d96fe:	6225      	str	r5, [r4, #32]
   d9700:	4d7c      	ldr	r5, [pc, #496]	; (d98f4 <_tzset_unlocked_r+0x2e4>)
   d9702:	4b7d      	ldr	r3, [pc, #500]	; (d98f8 <_tzset_unlocked_r+0x2e8>)
   d9704:	602b      	str	r3, [r5, #0]
   d9706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9708:	497c      	ldr	r1, [pc, #496]	; (d98fc <_tzset_unlocked_r+0x2ec>)
   d970a:	441f      	add	r7, r3
   d970c:	464a      	mov	r2, r9
   d970e:	4633      	mov	r3, r6
   d9710:	4638      	mov	r0, r7
   d9712:	f7fc fc11 	bl	d5f38 <siscanf>
   d9716:	4540      	cmp	r0, r8
   d9718:	dc08      	bgt.n	d972c <_tzset_unlocked_r+0x11c>
   d971a:	682b      	ldr	r3, [r5, #0]
   d971c:	606b      	str	r3, [r5, #4]
   d971e:	4b72      	ldr	r3, [pc, #456]	; (d98e8 <_tzset_unlocked_r+0x2d8>)
   d9720:	6a22      	ldr	r2, [r4, #32]
   d9722:	601a      	str	r2, [r3, #0]
   d9724:	4b72      	ldr	r3, [pc, #456]	; (d98f0 <_tzset_unlocked_r+0x2e0>)
   d9726:	f8c3 8000 	str.w	r8, [r3]
   d972a:	e0d5      	b.n	d98d8 <_tzset_unlocked_r+0x2c8>
   d972c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d972e:	f8c5 9004 	str.w	r9, [r5, #4]
   d9732:	18fd      	adds	r5, r7, r3
   d9734:	5cfb      	ldrb	r3, [r7, r3]
   d9736:	2b2d      	cmp	r3, #45	; 0x2d
   d9738:	d103      	bne.n	d9742 <_tzset_unlocked_r+0x132>
   d973a:	3501      	adds	r5, #1
   d973c:	f04f 37ff 	mov.w	r7, #4294967295
   d9740:	e003      	b.n	d974a <_tzset_unlocked_r+0x13a>
   d9742:	2b2b      	cmp	r3, #43	; 0x2b
   d9744:	bf08      	it	eq
   d9746:	3501      	addeq	r5, #1
   d9748:	2701      	movs	r7, #1
   d974a:	2300      	movs	r3, #0
   d974c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9750:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9754:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9758:	930a      	str	r3, [sp, #40]	; 0x28
   d975a:	9603      	str	r6, [sp, #12]
   d975c:	f8cd a008 	str.w	sl, [sp, #8]
   d9760:	9601      	str	r6, [sp, #4]
   d9762:	f8cd b000 	str.w	fp, [sp]
   d9766:	4633      	mov	r3, r6
   d9768:	aa07      	add	r2, sp, #28
   d976a:	4965      	ldr	r1, [pc, #404]	; (d9900 <_tzset_unlocked_r+0x2f0>)
   d976c:	4628      	mov	r0, r5
   d976e:	f7fc fbe3 	bl	d5f38 <siscanf>
   d9772:	2800      	cmp	r0, #0
   d9774:	dc04      	bgt.n	d9780 <_tzset_unlocked_r+0x170>
   d9776:	6a23      	ldr	r3, [r4, #32]
   d9778:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d977c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d977e:	e00e      	b.n	d979e <_tzset_unlocked_r+0x18e>
   d9780:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9784:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9788:	213c      	movs	r1, #60	; 0x3c
   d978a:	fb01 3302 	mla	r3, r1, r2, r3
   d978e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9792:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9796:	fb01 3302 	mla	r3, r1, r2, r3
   d979a:	435f      	muls	r7, r3
   d979c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d97a0:	4627      	mov	r7, r4
   d97a2:	441d      	add	r5, r3
   d97a4:	f04f 0900 	mov.w	r9, #0
   d97a8:	782b      	ldrb	r3, [r5, #0]
   d97aa:	2b2c      	cmp	r3, #44	; 0x2c
   d97ac:	bf08      	it	eq
   d97ae:	3501      	addeq	r5, #1
   d97b0:	f895 8000 	ldrb.w	r8, [r5]
   d97b4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d97b8:	d126      	bne.n	d9808 <_tzset_unlocked_r+0x1f8>
   d97ba:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d97be:	9302      	str	r3, [sp, #8]
   d97c0:	ab09      	add	r3, sp, #36	; 0x24
   d97c2:	9300      	str	r3, [sp, #0]
   d97c4:	9603      	str	r6, [sp, #12]
   d97c6:	9601      	str	r6, [sp, #4]
   d97c8:	4633      	mov	r3, r6
   d97ca:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d97ce:	494d      	ldr	r1, [pc, #308]	; (d9904 <_tzset_unlocked_r+0x2f4>)
   d97d0:	4628      	mov	r0, r5
   d97d2:	f7fc fbb1 	bl	d5f38 <siscanf>
   d97d6:	2803      	cmp	r0, #3
   d97d8:	d17e      	bne.n	d98d8 <_tzset_unlocked_r+0x2c8>
   d97da:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d97de:	1e4b      	subs	r3, r1, #1
   d97e0:	2b0b      	cmp	r3, #11
   d97e2:	d879      	bhi.n	d98d8 <_tzset_unlocked_r+0x2c8>
   d97e4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d97e8:	1e53      	subs	r3, r2, #1
   d97ea:	2b04      	cmp	r3, #4
   d97ec:	d874      	bhi.n	d98d8 <_tzset_unlocked_r+0x2c8>
   d97ee:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d97f2:	2b06      	cmp	r3, #6
   d97f4:	d870      	bhi.n	d98d8 <_tzset_unlocked_r+0x2c8>
   d97f6:	f887 8008 	strb.w	r8, [r7, #8]
   d97fa:	60f9      	str	r1, [r7, #12]
   d97fc:	613a      	str	r2, [r7, #16]
   d97fe:	617b      	str	r3, [r7, #20]
   d9800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9802:	eb05 0803 	add.w	r8, r5, r3
   d9806:	e02a      	b.n	d985e <_tzset_unlocked_r+0x24e>
   d9808:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d980c:	bf06      	itte	eq
   d980e:	3501      	addeq	r5, #1
   d9810:	4643      	moveq	r3, r8
   d9812:	2344      	movne	r3, #68	; 0x44
   d9814:	220a      	movs	r2, #10
   d9816:	a90b      	add	r1, sp, #44	; 0x2c
   d9818:	4628      	mov	r0, r5
   d981a:	9305      	str	r3, [sp, #20]
   d981c:	f7ff fe3e 	bl	d949c <strtoul>
   d9820:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9824:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9828:	4545      	cmp	r5, r8
   d982a:	9b05      	ldr	r3, [sp, #20]
   d982c:	d114      	bne.n	d9858 <_tzset_unlocked_r+0x248>
   d982e:	234d      	movs	r3, #77	; 0x4d
   d9830:	f1b9 0f00 	cmp.w	r9, #0
   d9834:	d107      	bne.n	d9846 <_tzset_unlocked_r+0x236>
   d9836:	7223      	strb	r3, [r4, #8]
   d9838:	2303      	movs	r3, #3
   d983a:	60e3      	str	r3, [r4, #12]
   d983c:	2302      	movs	r3, #2
   d983e:	6123      	str	r3, [r4, #16]
   d9840:	f8c4 9014 	str.w	r9, [r4, #20]
   d9844:	e00b      	b.n	d985e <_tzset_unlocked_r+0x24e>
   d9846:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d984a:	230b      	movs	r3, #11
   d984c:	62a3      	str	r3, [r4, #40]	; 0x28
   d984e:	2301      	movs	r3, #1
   d9850:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9852:	2300      	movs	r3, #0
   d9854:	6323      	str	r3, [r4, #48]	; 0x30
   d9856:	e002      	b.n	d985e <_tzset_unlocked_r+0x24e>
   d9858:	b280      	uxth	r0, r0
   d985a:	723b      	strb	r3, [r7, #8]
   d985c:	6178      	str	r0, [r7, #20]
   d985e:	2302      	movs	r3, #2
   d9860:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9864:	2300      	movs	r3, #0
   d9866:	f8ad 301e 	strh.w	r3, [sp, #30]
   d986a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d986e:	930a      	str	r3, [sp, #40]	; 0x28
   d9870:	f898 3000 	ldrb.w	r3, [r8]
   d9874:	2b2f      	cmp	r3, #47	; 0x2f
   d9876:	d10b      	bne.n	d9890 <_tzset_unlocked_r+0x280>
   d9878:	9603      	str	r6, [sp, #12]
   d987a:	f8cd a008 	str.w	sl, [sp, #8]
   d987e:	9601      	str	r6, [sp, #4]
   d9880:	f8cd b000 	str.w	fp, [sp]
   d9884:	4633      	mov	r3, r6
   d9886:	aa07      	add	r2, sp, #28
   d9888:	491f      	ldr	r1, [pc, #124]	; (d9908 <_tzset_unlocked_r+0x2f8>)
   d988a:	4640      	mov	r0, r8
   d988c:	f7fc fb54 	bl	d5f38 <siscanf>
   d9890:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9894:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9898:	213c      	movs	r1, #60	; 0x3c
   d989a:	fb01 3302 	mla	r3, r1, r2, r3
   d989e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d98a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d98a6:	fb01 3302 	mla	r3, r1, r2, r3
   d98aa:	61bb      	str	r3, [r7, #24]
   d98ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d98ae:	f109 0901 	add.w	r9, r9, #1
   d98b2:	f1b9 0f02 	cmp.w	r9, #2
   d98b6:	4445      	add	r5, r8
   d98b8:	f107 071c 	add.w	r7, r7, #28
   d98bc:	f47f af74 	bne.w	d97a8 <_tzset_unlocked_r+0x198>
   d98c0:	6860      	ldr	r0, [r4, #4]
   d98c2:	f7ff fdf5 	bl	d94b0 <__tzcalc_limits>
   d98c6:	4b08      	ldr	r3, [pc, #32]	; (d98e8 <_tzset_unlocked_r+0x2d8>)
   d98c8:	6a22      	ldr	r2, [r4, #32]
   d98ca:	601a      	str	r2, [r3, #0]
   d98cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d98ce:	1a9b      	subs	r3, r3, r2
   d98d0:	4a07      	ldr	r2, [pc, #28]	; (d98f0 <_tzset_unlocked_r+0x2e0>)
   d98d2:	bf18      	it	ne
   d98d4:	2301      	movne	r3, #1
   d98d6:	6013      	str	r3, [r2, #0]
   d98d8:	b00d      	add	sp, #52	; 0x34
   d98da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d98de:	bf00      	nop
   d98e0:	000da4b4 	.word	0x000da4b4
   d98e4:	2003e7e0 	.word	0x2003e7e0
   d98e8:	2003e7e8 	.word	0x2003e7e8
   d98ec:	000da4b7 	.word	0x000da4b7
   d98f0:	2003e7e4 	.word	0x2003e7e4
   d98f4:	2003dc38 	.word	0x2003dc38
   d98f8:	2003e7d3 	.word	0x2003e7d3
   d98fc:	000da4bb 	.word	0x000da4bb
   d9900:	000da4de 	.word	0x000da4de
   d9904:	000da4ca 	.word	0x000da4ca
   d9908:	000da4dd 	.word	0x000da4dd
   d990c:	2003e7c8 	.word	0x2003e7c8

000d9910 <_findenv_r>:
   d9910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9914:	4607      	mov	r7, r0
   d9916:	468b      	mov	fp, r1
   d9918:	4690      	mov	r8, r2
   d991a:	f000 f8d9 	bl	d9ad0 <__env_lock>
   d991e:	4b19      	ldr	r3, [pc, #100]	; (d9984 <_findenv_r+0x74>)
   d9920:	681d      	ldr	r5, [r3, #0]
   d9922:	469a      	mov	sl, r3
   d9924:	b13d      	cbz	r5, d9936 <_findenv_r+0x26>
   d9926:	465c      	mov	r4, fp
   d9928:	4623      	mov	r3, r4
   d992a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d992e:	b142      	cbz	r2, d9942 <_findenv_r+0x32>
   d9930:	2a3d      	cmp	r2, #61	; 0x3d
   d9932:	461c      	mov	r4, r3
   d9934:	d1f8      	bne.n	d9928 <_findenv_r+0x18>
   d9936:	4638      	mov	r0, r7
   d9938:	f000 f8cb 	bl	d9ad2 <__env_unlock>
   d993c:	2000      	movs	r0, #0
   d993e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9942:	ebcb 0404 	rsb	r4, fp, r4
   d9946:	46a9      	mov	r9, r5
   d9948:	f859 0b04 	ldr.w	r0, [r9], #4
   d994c:	2800      	cmp	r0, #0
   d994e:	d0f2      	beq.n	d9936 <_findenv_r+0x26>
   d9950:	4622      	mov	r2, r4
   d9952:	4659      	mov	r1, fp
   d9954:	f7ff fd0f 	bl	d9376 <strncmp>
   d9958:	b988      	cbnz	r0, d997e <_findenv_r+0x6e>
   d995a:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d995e:	191e      	adds	r6, r3, r4
   d9960:	5d1b      	ldrb	r3, [r3, r4]
   d9962:	2b3d      	cmp	r3, #61	; 0x3d
   d9964:	d10b      	bne.n	d997e <_findenv_r+0x6e>
   d9966:	f8da 3000 	ldr.w	r3, [sl]
   d996a:	1aed      	subs	r5, r5, r3
   d996c:	10ad      	asrs	r5, r5, #2
   d996e:	4638      	mov	r0, r7
   d9970:	f8c8 5000 	str.w	r5, [r8]
   d9974:	f000 f8ad 	bl	d9ad2 <__env_unlock>
   d9978:	1c70      	adds	r0, r6, #1
   d997a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d997e:	464d      	mov	r5, r9
   d9980:	e7e1      	b.n	d9946 <_findenv_r+0x36>
   d9982:	bf00      	nop
   d9984:	2003dc80 	.word	0x2003dc80

000d9988 <_getenv_r>:
   d9988:	b507      	push	{r0, r1, r2, lr}
   d998a:	aa01      	add	r2, sp, #4
   d998c:	f7ff ffc0 	bl	d9910 <_findenv_r>
   d9990:	b003      	add	sp, #12
   d9992:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9998 <__gettzinfo>:
   d9998:	4800      	ldr	r0, [pc, #0]	; (d999c <__gettzinfo+0x4>)
   d999a:	4770      	bx	lr
   d999c:	2003dc40 	.word	0x2003dc40

000d99a0 <gmtime_r>:
   d99a0:	6802      	ldr	r2, [r0, #0]
   d99a2:	4b47      	ldr	r3, [pc, #284]	; (d9ac0 <gmtime_r+0x120>)
   d99a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d99a6:	fb92 f4f3 	sdiv	r4, r2, r3
   d99aa:	fb03 2214 	mls	r2, r3, r4, r2
   d99ae:	2a00      	cmp	r2, #0
   d99b0:	bfbc      	itt	lt
   d99b2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d99b6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d99ba:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d99be:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d99c2:	fb92 f3f0 	sdiv	r3, r2, r0
   d99c6:	fb00 2213 	mls	r2, r0, r3, r2
   d99ca:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d99ce:	bfac      	ite	ge
   d99d0:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d99d4:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d99d8:	608b      	str	r3, [r1, #8]
   d99da:	fb92 f3f0 	sdiv	r3, r2, r0
   d99de:	fb00 2213 	mls	r2, r0, r3, r2
   d99e2:	604b      	str	r3, [r1, #4]
   d99e4:	600a      	str	r2, [r1, #0]
   d99e6:	2307      	movs	r3, #7
   d99e8:	1ce2      	adds	r2, r4, #3
   d99ea:	fb92 f3f3 	sdiv	r3, r2, r3
   d99ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d99f2:	1ad3      	subs	r3, r2, r3
   d99f4:	618b      	str	r3, [r1, #24]
   d99f6:	4b33      	ldr	r3, [pc, #204]	; (d9ac4 <gmtime_r+0x124>)
   d99f8:	4d33      	ldr	r5, [pc, #204]	; (d9ac8 <gmtime_r+0x128>)
   d99fa:	fb94 f5f5 	sdiv	r5, r4, r5
   d99fe:	fb03 4405 	mla	r4, r3, r5, r4
   d9a02:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9a06:	fbb4 f2f2 	udiv	r2, r4, r2
   d9a0a:	4422      	add	r2, r4
   d9a0c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9a10:	fbb4 f3f7 	udiv	r3, r4, r7
   d9a14:	1ad2      	subs	r2, r2, r3
   d9a16:	482d      	ldr	r0, [pc, #180]	; (d9acc <gmtime_r+0x12c>)
   d9a18:	fbb4 f0f0 	udiv	r0, r4, r0
   d9a1c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9a20:	1a13      	subs	r3, r2, r0
   d9a22:	fbb3 f6f6 	udiv	r6, r3, r6
   d9a26:	4434      	add	r4, r6
   d9a28:	f240 126d 	movw	r2, #365	; 0x16d
   d9a2c:	fbb3 f0f2 	udiv	r0, r3, r2
   d9a30:	fbb3 f3f7 	udiv	r3, r3, r7
   d9a34:	1ae3      	subs	r3, r4, r3
   d9a36:	fb02 3310 	mls	r3, r2, r0, r3
   d9a3a:	2499      	movs	r4, #153	; 0x99
   d9a3c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9a40:	3202      	adds	r2, #2
   d9a42:	fbb2 f2f4 	udiv	r2, r2, r4
   d9a46:	2a0a      	cmp	r2, #10
   d9a48:	fb04 f402 	mul.w	r4, r4, r2
   d9a4c:	f104 0602 	add.w	r6, r4, #2
   d9a50:	f04f 0405 	mov.w	r4, #5
   d9a54:	fbb6 f4f4 	udiv	r4, r6, r4
   d9a58:	bf34      	ite	cc
   d9a5a:	2602      	movcc	r6, #2
   d9a5c:	f06f 0609 	mvncs.w	r6, #9
   d9a60:	4416      	add	r6, r2
   d9a62:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9a66:	fb02 0505 	mla	r5, r2, r5, r0
   d9a6a:	1c5f      	adds	r7, r3, #1
   d9a6c:	2e01      	cmp	r6, #1
   d9a6e:	bf98      	it	ls
   d9a70:	3501      	addls	r5, #1
   d9a72:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9a76:	eba7 0704 	sub.w	r7, r7, r4
   d9a7a:	d302      	bcc.n	d9a82 <gmtime_r+0xe2>
   d9a7c:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9a80:	e014      	b.n	d9aac <gmtime_r+0x10c>
   d9a82:	0782      	lsls	r2, r0, #30
   d9a84:	d105      	bne.n	d9a92 <gmtime_r+0xf2>
   d9a86:	2464      	movs	r4, #100	; 0x64
   d9a88:	fbb0 f2f4 	udiv	r2, r0, r4
   d9a8c:	fb04 0212 	mls	r2, r4, r2, r0
   d9a90:	b94a      	cbnz	r2, d9aa6 <gmtime_r+0x106>
   d9a92:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9a96:	fbb0 f4f2 	udiv	r4, r0, r2
   d9a9a:	fb02 0014 	mls	r0, r2, r4, r0
   d9a9e:	fab0 f280 	clz	r2, r0
   d9aa2:	0952      	lsrs	r2, r2, #5
   d9aa4:	e000      	b.n	d9aa8 <gmtime_r+0x108>
   d9aa6:	2201      	movs	r2, #1
   d9aa8:	333b      	adds	r3, #59	; 0x3b
   d9aaa:	441a      	add	r2, r3
   d9aac:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9ab0:	2300      	movs	r3, #0
   d9ab2:	61ca      	str	r2, [r1, #28]
   d9ab4:	614d      	str	r5, [r1, #20]
   d9ab6:	610e      	str	r6, [r1, #16]
   d9ab8:	60cf      	str	r7, [r1, #12]
   d9aba:	620b      	str	r3, [r1, #32]
   d9abc:	4608      	mov	r0, r1
   d9abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9ac0:	00015180 	.word	0x00015180
   d9ac4:	fffdc54f 	.word	0xfffdc54f
   d9ac8:	00023ab1 	.word	0x00023ab1
   d9acc:	00023ab0 	.word	0x00023ab0

000d9ad0 <__env_lock>:
   d9ad0:	4770      	bx	lr

000d9ad2 <__env_unlock>:
   d9ad2:	4770      	bx	lr

000d9ad4 <dynalib_user>:
   d9ad4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9ae4:	0000 0000                                   ....

000d9ae8 <_ZTV16JsonParserStaticILj512ELj50EE>:
	...
   d9af0:	42e1 000d 42f5 000d 6373 6572 6e65 7257     .B...B..screenWr
   d9b00:	7469 3a65 6e65 6574 6572 0064 6373 6572     ite:entered.scre
   d9b10:	6e65 7257 7469 3a65 6877 6c69 2d65 6f6c     enWrite:while-lo
   d9b20:	706f 652d 746e 7265 6465 7400 2e30 7874     op-entered.t0.tx
   d9b30:	3d74 2522 2273 ffff 00ff 6e69 6574 6e72     t="%s"....intern
   d9b40:	6c61 6554 706d 633a 6c61 656c 0064 6e69     alTemp:called.in
   d9b50:	6574 6e72 6c61 6554 706d 773a 6968 656c     ternalTemp:while
   d9b60:	652d 746e 7265 6465 6900 746e 7265 616e     -entered.interna
   d9b70:	546c 6d65 3a70 6625 7400 2e31 7874 3d74     lTemp:%f.t1.txt=
   d9b80:	2522 2269 ffff 00ff 7473 706f 6177 6374     "%i"....stopwatc
   d9b90:	3a68 6163 6c6c 6465 7300 6f74 7770 7461     h:called.stopwat
   d9ba0:	6863 733a 6174 7472 6465 7400 2e37 7874     ch:started.t7.tx
   d9bb0:	3d74 2522 2269 ffff 00ff 7473 706f 6177     t="%i"....stopwa
   d9bc0:	6374 3a68 7473 706f 6570 0064 6963 7974     tch:stopped.city
   d9bd0:	7257 7469 3a65 6e65 6574 6572 0064 3274     Write:entered.t2
   d9be0:	742e 7478 223d 7325 252c 2273 ffff 00ff     .txt="%s,%s"....
   d9bf0:	6957 6966 5020 4b53 7320 7465 7420 3a6f     Wifi PSK set to:
   d9c00:	2520 0a73 7300 6973 3a64 0020 6573 7563      %s..ssid: .secu
   d9c10:	6972 7974 203a 6300 7069 6568 3a72 0020     rity: .cipher: .
   d9c20:	6957 6946 5320 7465 5700 6669 2069 5353     WiFi Set.Wifi SS
   d9c30:	4449 7320 7465 7420 3a6f 2520 0a73 2500     ID set to: %s..%
   d9c40:	3230 0069 003a 6170 6567 3220 ffff 00ff     02i.:.page 2....
   d9c50:	6170 6567 2520 ff69 ffff 6800 6f6f 2d6b     page %i....hook-
   d9c60:	6572 7073 6e6f 6573 742f 6d65 5270 6165     response/tempRea
   d9c70:	0064 6f68 6b6f 722d 7365 6f70 736e 2f65     d.hook-response/
   d9c80:	6567 696f 0070 7865 6574 6e72 6c61 6554     geoip.externalTe
   d9c90:	706d 7300 6f74 5770 7461 6863 6154 6b73     mp.stopWatchTask
   d9ca0:	7300 6e65 6f73 5472 6d65 0070 6963 7974     .sensorTemp.city
   d9cb0:	6854 6572 6461 7300 7263 6565 546e 7268     Thread.screenThr
   d9cc0:	6165 0064 6e65 6f63 6564 5472 7268 6165     ead.encoderThrea
   d9cd0:	0064 6974 656d 6154 6b73 6400 6169 006c     d.timeTask.dial.
   d9ce0:	6f4e 4920 0050 6170 7472 6369 656c 642f     No IP.particle/d
   d9cf0:	7665 6369 2f65 7069 4400 4f59 004c 7461     evice/ip.DYOL.at
   d9d00:	656d 6167 3233 0038 4357 324c 2500 3330     mega328.WCL2.%03
   d9d10:	0069 544e 2050 6c63 636f 206b 7369 203a     i.NTP clock is: 
   d9d20:	5300 7379 6574 206d 6c63 636f 206b 7369     .System clock is
   d9d30:	203a 5300 7379 6574 3a6d 0020 3374 742e     : .System: .t3.t
   d9d40:	7478 223d 7325 ff22 ffff 6900 4870 6e61     xt="%s"....ipHan
   d9d50:	6c64 7265 203a 6163 6c6c 6465 6700 6f6c     dler: called.glo
   d9d60:	6162 5f6c 7069 253d 0073 7865 6574 6e72     bal_ip=%s.extern
   d9d70:	6c61 6554 706d 7546 636e 6974 6e6f 203a     alTempFunction: 
   d9d80:	6163 6c6c 6e69 2067 5049 6500 7478 7265     calling IP.exter
   d9d90:	616e 546c 6d65 4670 6e75 7463 6f69 3a6e     nalTempFunction:
   d9da0:	6320 6c61 696c 676e 6720 6f65 7069 6500      calling geoip.e
   d9db0:	7478 7265 616e 546c 6d65 4670 6e75 7463     xternalTempFunct
   d9dc0:	6f69 3a6e 7563 7272 6e65 5474 6d65 2070     ion:currentTemp 
   d9dd0:	7369 2520 0073 7325 252c 0073 7865 6574     is %s.%s,%s.exte
   d9de0:	6e72 6c61 6554 706d 7546 636e 6974 6e6f     rnalTempFunction
   d9df0:	703a 6275 696c 6873 6465 7400 6d65 4870     :published.tempH
   d9e00:	6e61 6c64 7265 643a 7461 5261 6365 6965     andler:dataRecei
   d9e10:	6576 3d64 7325 7400 6d65 5270 6365 6965     ved=%s.tempRecei
   d9e20:	6576 0064 6574 706d 6552 6563 7669 6465     ved.tempReceived
   d9e30:	253d 0073 6567 496f 4870 6e61 6c64 7265     =%s.geoIpHandler
   d9e40:	633a 6c61 656c 0064 616c 6974 7574 6564     :called.latitude
   d9e50:	6c00 6e6f 6967 7574 6564 6300 7469 0079     .longitude.city.
   d9e60:	6572 6967 6e6f 635f 646f 0065 616c 3d74     region_code.lat=
   d9e70:	7325 6c2c 6e6f 253d 2c73 6963 7974 253d     %s,lon=%s,city=%
   d9e80:	2c73 6572 6967 6e6f 635f 646f 3d65 7325     s,region_code=%s
   d9e90:	7400 0078 7872 3600 3445 3030 3030 2d33     .tx.rx.6E400003-
   d9ea0:	3542 3341 462d 3933 2d33 3045 3941 452d     B5A3-F393-E0A9-E
   d9eb0:	3035 3245 4434 4343 3941 0045 4536 3034     50E24DCCA9E.6E40
   d9ec0:	3030 3230 422d 4135 2d33 3346 3339 452d     0002-B5A3-F393-E
   d9ed0:	4130 2d39 3545 4530 3432 4344 4143 4539     0A9-E50E24DCCA9E
   d9ee0:	3600 3445 3030 3030 2d31 3542 3341 462d     .6E400001-B5A3-F
   d9ef0:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   d9f00:	4343 3941 0045 0000                         CCA9E...

000d9f08 <_ZTV10JsonBuffer>:
	...
   d9f10:	518d 000d 51a9 000d 6c25 0075 3025 7834     .Q...Q..%lu.%04x
   d9f20:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d9f30:	6573 2500 2a2e 0066 2e25 6c2a 0066 6c25     se.%.*f.%.*lf.%l
   d9f40:	0066 0000                                   f...

000d9f44 <_ZTV10JsonParser>:
	...
   d9f4c:	51bd 000d 51e1 000d                         .Q...Q..

000d9f54 <_ZTVN5spark13EthernetClassE>:
	...
   d9f5c:	5fd7 000d 5fcd 000d 5fc3 000d 5fb9 000d     ._..._..._..._..
   d9f6c:	5fad 000d 5fa1 000d 5f95 000d 5f8d 000d     ._..._..._..._..
   d9f7c:	5f83 000d 5f79 000d 8309 000d               ._..y_......

000d9f88 <_ZTV8SPIClass>:
	...
   d9f90:	5ff5 000d 5ff7 000d                         ._..._..

000d9f98 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9fa0:	6369 000d 636f 000d 7165 000d 6399 000d     ic..oc..eq...c..
   d9fb0:	636b 000d                                   kc..

000d9fb4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9fbc:	6363 000d 637d 000d 7271 000d 639d 000d     cc..}c..qr...c..
   d9fcc:	6365 000d                                   ec..

000d9fd0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9fd8:	635d 000d 638b 000d 693f 000d 63a1 000d     ]c...c..?i...c..
   d9fe8:	635f 000d                                   _c..

000d9fec <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9fec:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d9ffc:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   da00c:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   da01c:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   da02c:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   da03c:	7265 7369 6974 7363 002e 6168 5f6c 6c62     eristics..hal_bl
   da04c:	5f65 6167 7474 635f 696c 6e65 5f74 6964     e_gatt_client_di
   da05c:	6373 766f 7265 615f 6c6c 735f 7265 6976     scover_all_servi
   da06c:	6563 2873 2029 6166 6c69 6465 203b 6425     ces() failed; %d
   da07c:	4e00 7765 7020 7265 7069 6568 6172 206c     .New peripheral 
   da08c:	6f63 6e6e 6365 6574 2e64 6c00 006e 6e66     connected..ln.fn
   da09c:	6400 7465 6961 006c 0a0d 2500 3130 7530     .detail....%010u
   da0ac:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   da0bc:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
   da0cc:	736c 3d20 0020 6162 6475 5300 7265 6169     ls = .baud.Seria
   da0dc:	006c 6553 6972 6c61 0031 7974 6570 7000     l.Serial1.type.p
   da0ec:	7261 6d61 6300 646d 6900 0064 6e68 0064     aram.cmd.id.hnd.
   da0fc:	7473 6d72 6600 6c69 0074 766c 006c 6461     strm.filt.lvl.ad
   da10c:	4864 6e61 6c64 7265 7200 6d65 766f 4865     dHandler.removeH
   da11c:	6e61 6c64 7265 6500 756e 486d 6e61 6c64     andler.enumHandl
   da12c:	7265 0073 534a 4e4f 7453 6572 6d61 6f4c     ers.JSONStreamLo
   da13c:	4867 6e61 6c64 7265 6100 7070 6e00 6e6f     gHandler.app.non
   da14c:	0065 7274 6361 0065 6e69 6f66 7700 7261     e.trace.info.war
   da15c:	006e 7265 6f72 0072 6170 696e 0063 6c61     n.error.panic.al
   da16c:	006c 2b25 3330 3a64 3025 7532 2500 2d59     l.%+03d:%02u.%Y-
   da17c:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   da18c:	6100 6373 6974 656d 0000 0000               .asctime....

000da198 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da1a0:	7821 000d 7827 000d 783f 000d 7835 000d     !x..'x..?x..5x..
   da1b0:	7823 000d                                   #x..

000da1b4 <_ZTV9IPAddress>:
	...
   da1bc:	7d45 000d 7d35 000d 7d37 000d               E}..5}..7}..

000da1c8 <_ZTV9USBSerial>:
	...
   da1d0:	7e1d 000d 7e6d 000d 7e7b 000d 7425 000d     .~..m~..{~..%t..
   da1e0:	7e59 000d 7e1f 000d 7e35 000d 7e67 000d     Y~...~..5~..g~..
   da1f0:	7e4b 000d 7e19 000d                         K~...~..

000da1f8 <_ZTV11USARTSerial>:
	...
   da200:	7f29 000d 7f79 000d 7f87 000d 7425 000d     )...y.......%t..
   da210:	7f3d 000d 7f5f 000d 7f4b 000d 7f73 000d     =..._...K...s...
   da220:	7f2b 000d 7f2f 000d                         +.../...

000da228 <_ZTV7TwoWire>:
	...
   da230:	8061 000d 80ab 000d 8083 000d 8063 000d     a...........c...
   da240:	808b 000d 8093 000d 809b 000d 80a3 000d     ................

000da250 <_ZTVN5spark9MeshClassE>:
	...
   da258:	8143 000d 8139 000d 812f 000d 8125 000d     C...9.../...%...
   da268:	8119 000d 810d 000d 8101 000d 80f9 000d     ................
   da278:	80ef 000d 80e5 000d 8309 000d               ............

000da284 <_ZTVN5spark9WiFiClassE>:
	...
   da28c:	825d 000d 8253 000d 8249 000d 820b 000d     ]...S...I.......
   da29c:	43d1 000d 823d 000d 8231 000d 8229 000d     .C..=...1...)...
   da2ac:	821f 000d 8215 000d 8309 000d               ............

000da2b8 <_ZTVN5spark12NetworkClassE>:
	...
   da2c0:	82a1 000d 82ab 000d 82b5 000d 82bf 000d     ................
   da2d0:	82c9 000d 82d5 000d 82e1 000d 82ed 000d     ................
   da2e0:	82f5 000d 82ff 000d 8309 000d               ............

000da2ec <_ZSt7nothrow>:
	...

000da2ed <_ctype_>:
   da2ed:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da2fd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da30d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da31d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da32d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da33d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da34d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da35d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da36d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da3f0 <__sf_fake_stdin>:
	...

000da410 <__sf_fake_stdout>:
	...

000da430 <__sf_fake_stderr>:
	...
   da450:	0043 0000                                   C...

000da454 <__month_lengths>:
   da454:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da464:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da474:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da484:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da494:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da4a4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da4b4:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   da4c4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   da4d4:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   da4e4:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000da4f0 <link_const_variable_data_end>:
   da4f0:	000d4f01 	.word	0x000d4f01
   da4f4:	000d5147 	.word	0x000d5147
   da4f8:	000d5187 	.word	0x000d5187
   da4fc:	000d5921 	.word	0x000d5921
   da500:	000d5925 	.word	0x000d5925
   da504:	000d5935 	.word	0x000d5935
   da508:	000d5939 	.word	0x000d5939
   da50c:	000d593d 	.word	0x000d593d
   da510:	000d5941 	.word	0x000d5941
   da514:	000d5945 	.word	0x000d5945
   da518:	000d5949 	.word	0x000d5949
   da51c:	000d594d 	.word	0x000d594d
   da520:	000d5951 	.word	0x000d5951
   da524:	000d5955 	.word	0x000d5955
   da528:	000d5959 	.word	0x000d5959
   da52c:	000d595d 	.word	0x000d595d
   da530:	000d5961 	.word	0x000d5961
   da534:	000d5965 	.word	0x000d5965
   da538:	000d5969 	.word	0x000d5969
   da53c:	000d596d 	.word	0x000d596d
   da540:	000d5971 	.word	0x000d5971
   da544:	000d5975 	.word	0x000d5975
   da548:	000d5979 	.word	0x000d5979
   da54c:	000d597d 	.word	0x000d597d
   da550:	000d5981 	.word	0x000d5981
   da554:	000d5985 	.word	0x000d5985
   da558:	000d5fe1 	.word	0x000d5fe1
   da55c:	000d6035 	.word	0x000d6035
   da560:	000d7415 	.word	0x000d7415
   da564:	000d75d9 	.word	0x000d75d9
   da568:	000d76e9 	.word	0x000d76e9
   da56c:	000d7731 	.word	0x000d7731
   da570:	000d8191 	.word	0x000d8191
   da574:	000d828d 	.word	0x000d828d
   da578:	000d83d5 	.word	0x000d83d5
   da57c:	000d84a9 	.word	0x000d84a9
   da580:	000d8571 	.word	0x000d8571
   da584:	000d85f5 	.word	0x000d85f5
   da588:	000d86b9 	.word	0x000d86b9
   da58c:	000d877d 	.word	0x000d877d
