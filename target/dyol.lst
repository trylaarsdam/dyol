
c:/Users/Nerdom/Desktop/dyol/target/dyol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e08  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00019f04  2**0
                  CONTENTS
  3 .data         000000b8  2003dc60  000d9e20  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000ad8  2003dd18  2003dd18  0001dd18  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d9ed8  000d9ed8  00019ed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d9f00  000d9f00  00019f00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   001d04f2  00000000  00000000  00019f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00026db8  00000000  00000000  001ea3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000285e4  00000000  00000000  002111ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003620  00000000  00000000  00239792  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00005df0  00000000  00000000  0023cdb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0005cd02  00000000  00000000  00242ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0006dbd3  00000000  00000000  0029f8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0011a91b  00000000  00000000  0030d477  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000f914  00000000  00000000  00427d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e8 95 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fea0 	bl	d8d72 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fec0 	bl	d8dbe <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc60 	.word	0x2003dc60
   d4048:	000d9e20 	.word	0x000d9e20
   d404c:	2003dd18 	.word	0x2003dd18
   d4050:	2003dd18 	.word	0x2003dd18
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fda1 	bl	d6ba0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9e18 	.word	0x000d9e18
   d4080:	000d9d68 	.word	0x000d9d68

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9be 	b.w	d4404 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fafb 	bl	d4684 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd53 	b.w	d6b3c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bc61 	b.w	d595c <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bc67 	b.w	d596c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bc65 	b.w	d596c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_Z25displayManagementFunctionv>:
    Particle.publish("tempRead", data, PRIVATE);
    delay(30000);
  }
}*/

void displayManagementFunction() {
   d40b2:	e7fe      	b.n	d40b2 <_Z25displayManagementFunctionv>

000d40b4 <_Z21blynkDataPushFunctionv>:
    page3.show();
    delay(500);*/
  }
}

void blynkDataPushFunction() {
   d40b4:	e7fe      	b.n	d40b4 <_Z21blynkDataPushFunctionv>

000d40b6 <_Z18nfcPairingFunctionv>:
  while(1){
    //pushes info to blynk
  }
}

void nfcPairingFunction() {
   d40b6:	e7fe      	b.n	d40b6 <_Z18nfcPairingFunctionv>

000d40b8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40b8:	6803      	ldr	r3, [r0, #0]
   d40ba:	4718      	bx	r3

000d40bc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d40bc:	2a01      	cmp	r2, #1
   d40be:	d002      	beq.n	d40c6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
   d40c0:	2a02      	cmp	r2, #2
   d40c2:	d002      	beq.n	d40ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
   d40c4:	e004      	b.n	d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40c6:	6001      	str	r1, [r0, #0]
	      break;
   d40c8:	e002      	b.n	d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40ca:	680b      	ldr	r3, [r1, #0]
   d40cc:	b100      	cbz	r0, d40d0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
   d40ce:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d40d0:	2000      	movs	r0, #0
   d40d2:	4770      	bx	lr
   d40d4:	0000      	movs	r0, r0
	...

000d40d8 <_Z20internalTempFunctionv>:
*/

float global_lat = 0;
float global_lon = 0;

void internalTempFunction() {
   d40d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  while(1){
    //display internal temp
    //dhtTemp = DHT(internalTempValue, DHT11);
    //print it
    float celcius = mcp.getTemperature();
   d40da:	4821      	ldr	r0, [pc, #132]	; (d4160 <_Z20internalTempFunctionv+0x88>)
   d40dc:	f000 fc4c 	bl	d4978 <_ZN7MCP980814getTemperatureEv>
   d40e0:	ed8d 0a01 	vstr	s0, [sp, #4]
    Serial.println(celcius); Serial.println(" (C)");
   d40e4:	f003 f8ea 	bl	d72bc <_Z16_fetch_usbserialv>
   d40e8:	ed9d 0a01 	vldr	s0, [sp, #4]
   d40ec:	4606      	mov	r6, r0
   d40ee:	ee10 0a10 	vmov	r0, s0
   d40f2:	f004 f98d 	bl	d8410 <__aeabi_f2d>
   d40f6:	4604      	mov	r4, r0
   d40f8:	460d      	mov	r5, r1
   d40fa:	ec45 4b10 	vmov	d0, r4, r5
   d40fe:	2102      	movs	r1, #2
   d4100:	4630      	mov	r0, r6
   d4102:	f002 fbd3 	bl	d68ac <_ZN5Print7printlnEdi>
   d4106:	f003 f8d9 	bl	d72bc <_Z16_fetch_usbserialv>
   d410a:	4916      	ldr	r1, [pc, #88]	; (d4164 <_Z20internalTempFunctionv+0x8c>)
   d410c:	f002 fac1 	bl	d6692 <_ZN5Print7printlnEPKc>

    float fahreinheit = (celcius * (1.8)) + 32;
    Serial.println(fahreinheit); Serial.println(" (F)");
   d4110:	f003 f8d4 	bl	d72bc <_Z16_fetch_usbserialv>
   d4114:	a310      	add	r3, pc, #64	; (adr r3, d4158 <_Z20internalTempFunctionv+0x80>)
   d4116:	e9d3 2300 	ldrd	r2, r3, [r3]
   d411a:	4606      	mov	r6, r0
   d411c:	4629      	mov	r1, r5
   d411e:	4620      	mov	r0, r4
   d4120:	f004 f9ca 	bl	d84b8 <__aeabi_dmul>
   d4124:	2200      	movs	r2, #0
   d4126:	4b10      	ldr	r3, [pc, #64]	; (d4168 <_Z20internalTempFunctionv+0x90>)
   d4128:	f004 f814 	bl	d8154 <__adddf3>
   d412c:	f004 fcbc 	bl	d8aa8 <__aeabi_d2f>
   d4130:	f004 f96e 	bl	d8410 <__aeabi_f2d>
   d4134:	ec41 0b10 	vmov	d0, r0, r1
   d4138:	2102      	movs	r1, #2
   d413a:	4630      	mov	r0, r6
   d413c:	f002 fbb6 	bl	d68ac <_ZN5Print7printlnEdi>
   d4140:	f003 f8bc 	bl	d72bc <_Z16_fetch_usbserialv>
   d4144:	4909      	ldr	r1, [pc, #36]	; (d416c <_Z20internalTempFunctionv+0x94>)
   d4146:	f002 faa4 	bl	d6692 <_ZN5Print7printlnEPKc>
    delay(500);
   d414a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d414e:	f002 fc85 	bl	d6a5c <delay>
   d4152:	e7c2      	b.n	d40da <_Z20internalTempFunctionv+0x2>
   d4154:	f3af 8000 	nop.w
   d4158:	cccccccd 	.word	0xcccccccd
   d415c:	3ffccccc 	.word	0x3ffccccc
   d4160:	2003e330 	.word	0x2003e330
   d4164:	000d960c 	.word	0x000d960c
   d4168:	40400000 	.word	0x40400000
   d416c:	000d9611 	.word	0x000d9611

000d4170 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4170:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d4172:	2301      	movs	r3, #1
   d4174:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4176:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d4178:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d417a:	b10b      	cbz	r3, d4180 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d417c:	68c0      	ldr	r0, [r0, #12]
   d417e:	e006      	b.n	d418e <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4180:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4182:	b128      	cbz	r0, d4190 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4184:	6883      	ldr	r3, [r0, #8]
   d4186:	b90b      	cbnz	r3, d418c <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d4188:	f003 fe93 	bl	d7eb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d418c:	68c3      	ldr	r3, [r0, #12]
   d418e:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d4190:	2301      	movs	r3, #1
   d4192:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d4194:	2000      	movs	r0, #0
    }
   d4196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d419a:	f001 b9db 	b.w	d5554 <os_thread_exit>
	...

000d41a0 <_ZN16JsonParserStaticILj512ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d41a0:	b510      	push	{r4, lr}
   d41a2:	4b03      	ldr	r3, [pc, #12]	; (d41b0 <_ZN16JsonParserStaticILj512ELj50EED1Ev+0x10>)
   d41a4:	6003      	str	r3, [r0, #0]
   d41a6:	4604      	mov	r4, r0
   d41a8:	f000 fcc8 	bl	d4b3c <_ZN10JsonParserD1Ev>
   d41ac:	4620      	mov	r0, r4
   d41ae:	bd10      	pop	{r4, pc}
   d41b0:	000d9604 	.word	0x000d9604

000d41b4 <_ZN16JsonParserStaticILj512ELj50EED0Ev>:
   d41b4:	b510      	push	{r4, lr}
   d41b6:	4604      	mov	r4, r0
   d41b8:	f7ff fff2 	bl	d41a0 <_ZN16JsonParserStaticILj512ELj50EED1Ev>
   d41bc:	4620      	mov	r0, r4
   d41be:	f240 514c 	movw	r1, #1356	; 0x54c
   d41c2:	f003 fe65 	bl	d7e90 <_ZdlPvj>
   d41c6:	4620      	mov	r0, r4
   d41c8:	bd10      	pop	{r4, pc}
	...

000d41cc <_Z11tempHandlerPKcS0_>:
  // - Accuracy of estimated location (in meters)
  global_lat = lat;
  global_lon = lon;
}

void tempHandler(const char *event, const char *data) {
   d41cc:	b513      	push	{r0, r1, r4, lr}
	/**
	 * @brief Add a c-string to the end of the buffer
	 *
	 * @param data Pointer to a c-string (null terminated).
	 */
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d41ce:	4608      	mov	r0, r1
   d41d0:	460c      	mov	r4, r1
   d41d2:	f004 fe52 	bl	d8e7a <strlen>
   d41d6:	4621      	mov	r1, r4
   d41d8:	4602      	mov	r2, r0
   d41da:	480f      	ldr	r0, [pc, #60]	; (d4218 <_Z11tempHandlerPKcS0_+0x4c>)
   d41dc:	f000 fcdf 	bl	d4b9e <_ZN10JsonBuffer7addDataEPKcj>
  // Handle the integration response
  jsonParser.addString(data);
  if (jsonParser.parse()) {
   d41e0:	480d      	ldr	r0, [pc, #52]	; (d4218 <_Z11tempHandlerPKcS0_+0x4c>)
   d41e2:	f001 f80c 	bl	d51fe <_ZN10JsonParser5parseEv>
   d41e6:	b1a0      	cbz	r0, d4212 <_Z11tempHandlerPKcS0_+0x46>
	 */
	template<class T>
	bool getOuterValueByKey(const char *name, T &result) const {
		const JsonParserGeneratorRK::jsmntok_t *value;

		if (getValueTokenByKey(getOuterObject(), name, value)) {
   d41e8:	480b      	ldr	r0, [pc, #44]	; (d4218 <_Z11tempHandlerPKcS0_+0x4c>)
   d41ea:	f000 fd07 	bl	d4bfc <_ZNK10JsonParser14getOuterObjectEv>
   d41ee:	ab01      	add	r3, sp, #4
   d41f0:	4601      	mov	r1, r0
   d41f2:	4a0a      	ldr	r2, [pc, #40]	; (d421c <_Z11tempHandlerPKcS0_+0x50>)
   d41f4:	4808      	ldr	r0, [pc, #32]	; (d4218 <_Z11tempHandlerPKcS0_+0x4c>)
   d41f6:	f000 fe09 	bl	d4e0c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d41fa:	b120      	cbz	r0, d4206 <_Z11tempHandlerPKcS0_+0x3a>
			return getTokenValue(value, result);
   d41fc:	4a08      	ldr	r2, [pc, #32]	; (d4220 <_Z11tempHandlerPKcS0_+0x54>)
   d41fe:	9901      	ldr	r1, [sp, #4]
   d4200:	4805      	ldr	r0, [pc, #20]	; (d4218 <_Z11tempHandlerPKcS0_+0x4c>)
   d4202:	f000 fde5 	bl	d4dd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
    jsonParser.getOuterValueByKey("tempRecieved", tempRecieved);
    
    // Put code to do something with tempMin and tempMax here
    Serial.println(tempRecieved);
   d4206:	f003 f859 	bl	d72bc <_Z16_fetch_usbserialv>
   d420a:	4b05      	ldr	r3, [pc, #20]	; (d4220 <_Z11tempHandlerPKcS0_+0x54>)
   d420c:	6819      	ldr	r1, [r3, #0]
   d420e:	f002 fa40 	bl	d6692 <_ZN5Print7printlnEPKc>

  }
}
   d4212:	b002      	add	sp, #8
   d4214:	bd10      	pop	{r4, pc}
   d4216:	bf00      	nop
   d4218:	2003dd1c 	.word	0x2003dd1c
   d421c:	000d9616 	.word	0x000d9616
   d4220:	2003e2b8 	.word	0x2003e2b8

000d4224 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4224:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4226:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4228:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d422a:	b113      	cbz	r3, d4232 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d422c:	2203      	movs	r2, #3
   d422e:	4601      	mov	r1, r0
   d4230:	4798      	blx	r3
    }
   d4232:	4620      	mov	r0, r4
   d4234:	bd10      	pop	{r4, pc}

000d4236 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4236:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4238:	4604      	mov	r4, r0
   d423a:	b170      	cbz	r0, d425a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d423c:	6805      	ldr	r5, [r0, #0]
   d423e:	b135      	cbz	r5, d424e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4240:	4628      	mov	r0, r5
   d4242:	f7ff ffef 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4246:	2110      	movs	r1, #16
   d4248:	4628      	mov	r0, r5
   d424a:	f003 fe21 	bl	d7e90 <_ZdlPvj>
   d424e:	4620      	mov	r0, r4
   d4250:	2114      	movs	r1, #20
      }
   d4252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4256:	f003 be1b 	b.w	d7e90 <_ZdlPvj>
   d425a:	bd38      	pop	{r3, r4, r5, pc}

000d425c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d425c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d425e:	6803      	ldr	r3, [r0, #0]
   d4260:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4262:	b1bb      	cbz	r3, d4294 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4264:	6858      	ldr	r0, [r3, #4]
   d4266:	f001 f935 	bl	d54d4 <os_thread_is_current>
   d426a:	b978      	cbnz	r0, d428c <_ZN6ThreadD1Ev+0x30>
   d426c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d426e:	7c5a      	ldrb	r2, [r3, #17]
   d4270:	b912      	cbnz	r2, d4278 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4272:	6858      	ldr	r0, [r3, #4]
   d4274:	f001 f93e 	bl	d54f4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	6858      	ldr	r0, [r3, #4]
   d427c:	f001 f942 	bl	d5504 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4280:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4282:	2300      	movs	r3, #0
   d4284:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4286:	b128      	cbz	r0, d4294 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4288:	f7ff ffd5 	bl	d4236 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d428c:	6820      	ldr	r0, [r4, #0]
   d428e:	b108      	cbz	r0, d4294 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4290:	f7ff ffd1 	bl	d4236 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>
    }

    ~Thread()
    {
        dispose();
    }
   d4294:	4620      	mov	r0, r4
   d4296:	bd10      	pop	{r4, pc}

000d4298 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
   d4298:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d429c:	4606      	mov	r6, r0
   d429e:	460f      	mov	r7, r1
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d42a0:	2014      	movs	r0, #20
   d42a2:	492a      	ldr	r1, [pc, #168]	; (d434c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
   d42a4:	4615      	mov	r5, r2
   d42a6:	4698      	mov	r8, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d42a8:	f003 fdf4 	bl	d7e94 <_ZnwjRKSt9nothrow_t>
   d42ac:	4604      	mov	r4, r0
   d42ae:	b130      	cbz	r0, d42be <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d42b0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d42b2:	7403      	strb	r3, [r0, #16]
   d42b4:	6003      	str	r3, [r0, #0]
   d42b6:	6043      	str	r3, [r0, #4]
   d42b8:	6083      	str	r3, [r0, #8]
   d42ba:	60c3      	str	r3, [r0, #12]
   d42bc:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d42be:	6034      	str	r4, [r6, #0]

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d42c0:	2c00      	cmp	r4, #0
   d42c2:	d039      	beq.n	d4338 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
            goto error;
        }
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   d42c4:	4921      	ldr	r1, [pc, #132]	; (d434c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb4>)
   d42c6:	2010      	movs	r0, #16
   d42c8:	f003 fde4 	bl	d7e94 <_ZnwjRKSt9nothrow_t>
   d42cc:	4603      	mov	r3, r0
   d42ce:	b1b0      	cbz	r0, d42fe <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x66>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d42d0:	2200      	movs	r2, #0
   d42d2:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d42d8:	aa02      	add	r2, sp, #8
   d42da:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d42de:	e893 0003 	ldmia.w	r3, {r0, r1}
   d42e2:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d42e6:	e892 0003 	ldmia.w	r2, {r0, r1}
   d42ea:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d42ee:	6899      	ldr	r1, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42f0:	68aa      	ldr	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d42f2:	60a9      	str	r1, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d42f4:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42f6:	68ea      	ldr	r2, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d42f8:	68d9      	ldr	r1, [r3, #12]
   d42fa:	60e9      	str	r1, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d42fc:	60da      	str	r2, [r3, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d42fe:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4300:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4302:	b135      	cbz	r5, d4312 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x7a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4304:	4628      	mov	r0, r5
   d4306:	f7ff ff8d 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d430a:	2110      	movs	r1, #16
   d430c:	4628      	mov	r0, r5
   d430e:	f003 fdbf 	bl	d7e90 <_ZdlPvj>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4312:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   d4314:	6803      	ldr	r3, [r0, #0]
   d4316:	b17b      	cbz	r3, d4338 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d431a:	4642      	mov	r2, r8
   d431c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4320:	4639      	mov	r1, r7
   d4322:	4b0b      	ldr	r3, [pc, #44]	; (d4350 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb8>)
   d4324:	3004      	adds	r0, #4
   d4326:	f001 f8cd 	bl	d54c4 <os_thread_create>
   d432a:	b928      	cbnz	r0, d4338 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa0>
   d432c:	6833      	ldr	r3, [r6, #0]
            goto error;
        }
        while (!d_->started) {
   d432e:	7c1b      	ldrb	r3, [r3, #16]
   d4330:	b943      	cbnz	r3, d4344 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
            os_thread_yield();
   d4332:	f001 f8d7 	bl	d54e4 <os_thread_yield>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
            goto error;
        }
        while (!d_->started) {
   d4336:	e7f9      	b.n	d432c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x94>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4338:	6830      	ldr	r0, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
   d433a:	2300      	movs	r3, #0
   d433c:	6033      	str	r3, [r6, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d433e:	b108      	cbz	r0, d4344 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xac>
	  get_deleter()(__p);
   d4340:	f7ff ff79 	bl	d4236 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>
            os_thread_yield();
        }
        return;
    error:
        d_.reset();
    }
   d4344:	4630      	mov	r0, r6
   d4346:	b004      	add	sp, #16
   d4348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d434c:	000d9b64 	.word	0x000d9b64
   d4350:	000d4171 	.word	0x000d4171

000d4354 <_Z6hhmmssm>:

int i = 0;
NtpTime* ntpTime;

String hhmmss(unsigned long int now)  //format value as "hh:mm:ss"
{
   d4354:	b530      	push	{r4, r5, lr}
   d4356:	4605      	mov	r5, r0
   d4358:	b091      	sub	sp, #68	; 0x44
    int time = 0;
    if (Time.hour(now) -5 < 0 )
   d435a:	4608      	mov	r0, r1

int i = 0;
NtpTime* ntpTime;

String hhmmss(unsigned long int now)  //format value as "hh:mm:ss"
{
   d435c:	460c      	mov	r4, r1
    int time = 0;
    if (Time.hour(now) -5 < 0 )
   d435e:	f002 fb33 	bl	d69c8 <_ZN9TimeClass4hourEl>
   d4362:	2804      	cmp	r0, #4
   d4364:	dc04      	bgt.n	d4370 <_Z6hhmmssm+0x1c>
    {
        time = Time.hour(now) + 7;
   d4366:	4620      	mov	r0, r4
   d4368:	f002 fb2e 	bl	d69c8 <_ZN9TimeClass4hourEl>
   d436c:	1dc1      	adds	r1, r0, #7
   d436e:	e000      	b.n	d4372 <_Z6hhmmssm+0x1e>
int i = 0;
NtpTime* ntpTime;

String hhmmss(unsigned long int now)  //format value as "hh:mm:ss"
{
    int time = 0;
   d4370:	2100      	movs	r1, #0
    if (Time.hour(now) -5 < 0 )
    {
        time = Time.hour(now) + 7;
    }
    String hour = String (time);
   d4372:	220a      	movs	r2, #10
   d4374:	4668      	mov	r0, sp
   d4376:	f001 fc7f 	bl	d5c78 <_ZN6StringC1Eih>
   //String hour = String(Time.hour(now));
   String minute = String::format("%02i",Time.minute(now));
   d437a:	4620      	mov	r0, r4
   d437c:	f002 fb2c 	bl	d69d8 <_ZN9TimeClass6minuteEl>
   d4380:	4918      	ldr	r1, [pc, #96]	; (d43e4 <_Z6hhmmssm+0x90>)
   d4382:	4602      	mov	r2, r0
   d4384:	a804      	add	r0, sp, #16
   d4386:	f001 fcdf 	bl	d5d48 <_ZN6String6formatEPKcz>
   String second = String::format("%02i",Time.second(now));
   d438a:	4620      	mov	r0, r4
   d438c:	f002 fb2c 	bl	d69e8 <_ZN9TimeClass6secondEl>
   d4390:	4914      	ldr	r1, [pc, #80]	; (d43e4 <_Z6hhmmssm+0x90>)
   d4392:	4602      	mov	r2, r0
   d4394:	a808      	add	r0, sp, #32
   d4396:	f001 fcd7 	bl	d5d48 <_ZN6String6formatEPKcz>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d439a:	4669      	mov	r1, sp
   d439c:	a80c      	add	r0, sp, #48	; 0x30
   d439e:	f001 fc4f 	bl	d5c40 <_ZN6StringC1ERKS_>
   return hour + ":" + minute + ":" + second;
   d43a2:	4911      	ldr	r1, [pc, #68]	; (d43e8 <_Z6hhmmssm+0x94>)
   d43a4:	a80c      	add	r0, sp, #48	; 0x30
   d43a6:	f001 fcaa 	bl	d5cfe <_ZplRK15StringSumHelperPKc>
   d43aa:	a904      	add	r1, sp, #16
   d43ac:	f001 fc9b 	bl	d5ce6 <_ZplRK15StringSumHelperRK6String>
   d43b0:	490d      	ldr	r1, [pc, #52]	; (d43e8 <_Z6hhmmssm+0x94>)
   d43b2:	f001 fca4 	bl	d5cfe <_ZplRK15StringSumHelperPKc>
   d43b6:	a908      	add	r1, sp, #32
   d43b8:	f001 fc95 	bl	d5ce6 <_ZplRK15StringSumHelperRK6String>
   d43bc:	4601      	mov	r1, r0
   d43be:	4628      	mov	r0, r5
   d43c0:	f001 fc3e 	bl	d5c40 <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d43c4:	a80c      	add	r0, sp, #48	; 0x30
   d43c6:	f001 fbd2 	bl	d5b6e <_ZN6StringD1Ev>
        time = Time.hour(now) + 7;
    }
    String hour = String (time);
   //String hour = String(Time.hour(now));
   String minute = String::format("%02i",Time.minute(now));
   String second = String::format("%02i",Time.second(now));
   d43ca:	a808      	add	r0, sp, #32
   d43cc:	f001 fbcf 	bl	d5b6e <_ZN6StringD1Ev>
    {
        time = Time.hour(now) + 7;
    }
    String hour = String (time);
   //String hour = String(Time.hour(now));
   String minute = String::format("%02i",Time.minute(now));
   d43d0:	a804      	add	r0, sp, #16
   d43d2:	f001 fbcc 	bl	d5b6e <_ZN6StringD1Ev>
    int time = 0;
    if (Time.hour(now) -5 < 0 )
    {
        time = Time.hour(now) + 7;
    }
    String hour = String (time);
   d43d6:	4668      	mov	r0, sp
   d43d8:	f001 fbc9 	bl	d5b6e <_ZN6StringD1Ev>
   //String hour = String(Time.hour(now));
   String minute = String::format("%02i",Time.minute(now));
   String second = String::format("%02i",Time.second(now));
   return hour + ":" + minute + ":" + second;
};
   d43dc:	4628      	mov	r0, r5
   d43de:	b011      	add	sp, #68	; 0x44
   d43e0:	bd30      	pop	{r4, r5, pc}
   d43e2:	bf00      	nop
   d43e4:	000d9623 	.word	0x000d9623
   d43e8:	000d97f0 	.word	0x000d97f0

000d43ec <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>:
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
   d43ec:	b510      	push	{r4, lr}
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d43ee:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d43f0:	680b      	ldr	r3, [r1, #0]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d43f2:	600a      	str	r2, [r1, #0]
       * @param __u  The object to transfer ownership from.
       *
       * Invokes the deleter first if this object owns a pointer.
       */
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
   d43f4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d43f6:	6800      	ldr	r0, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d43f8:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d43fa:	b108      	cbz	r0, d4400 <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_+0x14>
	  get_deleter()(__p);
   d43fc:	f7ff ff1b 	bl	d4236 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>
      operator=(unique_ptr&& __u) noexcept
      {
	reset(__u.release());
	get_deleter() = std::forward<deleter_type>(__u.get_deleter());
	return *this;
      }
   d4400:	4620      	mov	r0, r4
   d4402:	bd10      	pop	{r4, pc}

000d4404 <setup>:
    Serial.println(tempRecieved);

  }
}

void setup() {
   d4404:	b570      	push	{r4, r5, r6, lr}
   d4406:	b08c      	sub	sp, #48	; 0x30
  nfcPairingThread = Thread("nfcPair", nfcPairingFunction);
   d4408:	f44f 6440 	mov.w	r4, #3072	; 0xc00
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d440c:	4b60      	ldr	r3, [pc, #384]	; (d4590 <setup+0x18c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d440e:	4e61      	ldr	r6, [pc, #388]	; (d4594 <setup+0x190>)
	    _M_manager = &_My_handler::_M_manager;
   d4410:	4d61      	ldr	r5, [pc, #388]	; (d4598 <setup+0x194>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4412:	9303      	str	r3, [sp, #12]
   d4414:	aa03      	add	r2, sp, #12
   d4416:	2302      	movs	r3, #2
   d4418:	9400      	str	r4, [sp, #0]
   d441a:	4960      	ldr	r1, [pc, #384]	; (d459c <setup+0x198>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d441c:	9606      	str	r6, [sp, #24]
   d441e:	a802      	add	r0, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d4420:	9505      	str	r5, [sp, #20]
   d4422:	f7ff ff39 	bl	d4298 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        return isValid() && os_thread_is_current(d_->handle);
    }

    Thread& operator=(Thread&& thread)
    {
        d_ = std::move(thread.d_);
   d4426:	a902      	add	r1, sp, #8
   d4428:	485d      	ldr	r0, [pc, #372]	; (d45a0 <setup+0x19c>)
   d442a:	f7ff ffdf 	bl	d43ec <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d442e:	a802      	add	r0, sp, #8
   d4430:	f7ff ff14 	bl	d425c <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4434:	a803      	add	r0, sp, #12
   d4436:	f7ff fef5 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d443a:	4b5a      	ldr	r3, [pc, #360]	; (d45a4 <setup+0x1a0>)
   d443c:	9303      	str	r3, [sp, #12]
  blynkDataPushThread = Thread("blynkPush", blynkDataPushFunction);
   d443e:	aa03      	add	r2, sp, #12
   d4440:	2302      	movs	r3, #2
   d4442:	9400      	str	r4, [sp, #0]
   d4444:	4958      	ldr	r1, [pc, #352]	; (d45a8 <setup+0x1a4>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4446:	9606      	str	r6, [sp, #24]
   d4448:	a802      	add	r0, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d444a:	9505      	str	r5, [sp, #20]
   d444c:	f7ff ff24 	bl	d4298 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d4450:	a902      	add	r1, sp, #8
   d4452:	4856      	ldr	r0, [pc, #344]	; (d45ac <setup+0x1a8>)
   d4454:	f7ff ffca 	bl	d43ec <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d4458:	a802      	add	r0, sp, #8
   d445a:	f7ff feff 	bl	d425c <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d445e:	a803      	add	r0, sp, #12
   d4460:	f7ff fee0 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d4464:	4b52      	ldr	r3, [pc, #328]	; (d45b0 <setup+0x1ac>)
   d4466:	9303      	str	r3, [sp, #12]
  displayManagementThread = Thread("displayManagement", displayManagementFunction);
   d4468:	aa03      	add	r2, sp, #12
   d446a:	2302      	movs	r3, #2
   d446c:	9400      	str	r4, [sp, #0]
   d446e:	4951      	ldr	r1, [pc, #324]	; (d45b4 <setup+0x1b0>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4470:	9606      	str	r6, [sp, #24]
   d4472:	a802      	add	r0, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d4474:	9505      	str	r5, [sp, #20]
   d4476:	f7ff ff0f 	bl	d4298 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d447a:	a902      	add	r1, sp, #8
   d447c:	484e      	ldr	r0, [pc, #312]	; (d45b8 <setup+0x1b4>)
   d447e:	f7ff ffb5 	bl	d43ec <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d4482:	a802      	add	r0, sp, #8
   d4484:	f7ff feea 	bl	d425c <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4488:	a803      	add	r0, sp, #12
   d448a:	f7ff fecb 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d448e:	4b4b      	ldr	r3, [pc, #300]	; (d45bc <setup+0x1b8>)
   d4490:	9303      	str	r3, [sp, #12]
  externalTempThread = Thread("externalTemp", externalTempFunction);
   d4492:	aa03      	add	r2, sp, #12
   d4494:	2302      	movs	r3, #2
   d4496:	9400      	str	r4, [sp, #0]
   d4498:	4949      	ldr	r1, [pc, #292]	; (d45c0 <setup+0x1bc>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d449a:	9606      	str	r6, [sp, #24]
   d449c:	a802      	add	r0, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d449e:	9505      	str	r5, [sp, #20]
   d44a0:	f7ff fefa 	bl	d4298 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d44a4:	a902      	add	r1, sp, #8
   d44a6:	4847      	ldr	r0, [pc, #284]	; (d45c4 <setup+0x1c0>)
   d44a8:	f7ff ffa0 	bl	d43ec <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d44ac:	a802      	add	r0, sp, #8
   d44ae:	f7ff fed5 	bl	d425c <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d44b2:	a803      	add	r0, sp, #12
   d44b4:	f7ff feb6 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
   d44b8:	4b43      	ldr	r3, [pc, #268]	; (d45c8 <setup+0x1c4>)
   d44ba:	9303      	str	r3, [sp, #12]
  internalTempThread = Thread("internalTemp", internalTempFunction);
   d44bc:	aa03      	add	r2, sp, #12
   d44be:	2302      	movs	r3, #2
   d44c0:	9400      	str	r4, [sp, #0]
   d44c2:	4942      	ldr	r1, [pc, #264]	; (d45cc <setup+0x1c8>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d44c4:	9606      	str	r6, [sp, #24]
   d44c6:	a802      	add	r0, sp, #8
	    _M_manager = &_My_handler::_M_manager;
   d44c8:	9505      	str	r5, [sp, #20]
   d44ca:	f7ff fee5 	bl	d4298 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   d44ce:	a902      	add	r1, sp, #8
   d44d0:	483f      	ldr	r0, [pc, #252]	; (d45d0 <setup+0x1cc>)
   d44d2:	f7ff ff8b 	bl	d43ec <_ZNSt10unique_ptrIN6Thread4DataESt14default_deleteIS1_EEaSEOS4_>
   d44d6:	a802      	add	r0, sp, #8
   d44d8:	f7ff fec0 	bl	d425c <_ZN6ThreadD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d44dc:	a803      	add	r0, sp, #12
   d44de:	f7ff fea1 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
  pinMode(internalTempValue, INPUT);
   d44e2:	2100      	movs	r1, #0
   d44e4:	2011      	movs	r0, #17
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d44e6:	2400      	movs	r4, #0
   d44e8:	f003 fc58 	bl	d7d9c <pinMode>
  Serial.begin(9600);
   d44ec:	f002 fee6 	bl	d72bc <_Z16_fetch_usbserialv>
   d44f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d44f4:	f002 fed6 	bl	d72a4 <_ZN9USBSerial5beginEl>
   d44f8:	4623      	mov	r3, r4
   d44fa:	4622      	mov	r2, r4
   d44fc:	4935      	ldr	r1, [pc, #212]	; (d45d4 <setup+0x1d0>)
   d44fe:	9401      	str	r4, [sp, #4]
   d4500:	9400      	str	r4, [sp, #0]
   d4502:	4835      	ldr	r0, [pc, #212]	; (d45d8 <setup+0x1d4>)
   d4504:	f001 fa12 	bl	d592c <spark_subscribe>
  //locator.withSubscribe(locationCallback).withLocatePeriodic(4800);
  Particle.subscribe("hook-response/tempRead", tempHandler, MY_DEVICES);
  pinMode(D7, OUTPUT);
   d4508:	2101      	movs	r1, #1
   d450a:	2007      	movs	r0, #7
   d450c:	f003 fc46 	bl	d7d9c <pinMode>
  digitalWrite(D7, 0);
   d4510:	4621      	mov	r1, r4
   d4512:	2007      	movs	r0, #7
   d4514:	f003 fc53 	bl	d7dbe <digitalWrite>
  LOG(TRACE, "Application started.");
   d4518:	2320      	movs	r3, #32
   d451a:	9303      	str	r3, [sp, #12]
   d451c:	4b2f      	ldr	r3, [pc, #188]	; (d45dc <setup+0x1d8>)
   d451e:	9305      	str	r3, [sp, #20]
   d4520:	23c9      	movs	r3, #201	; 0xc9
   d4522:	9306      	str	r3, [sp, #24]
   d4524:	4b2e      	ldr	r3, [pc, #184]	; (d45e0 <setup+0x1dc>)
   d4526:	9307      	str	r3, [sp, #28]
   d4528:	2307      	movs	r3, #7
   d452a:	9404      	str	r4, [sp, #16]
   d452c:	f88d 3010 	strb.w	r3, [sp, #16]
   d4530:	4b2c      	ldr	r3, [pc, #176]	; (d45e4 <setup+0x1e0>)
   d4532:	492d      	ldr	r1, [pc, #180]	; (d45e8 <setup+0x1e4>)
   d4534:	9300      	str	r3, [sp, #0]
   d4536:	aa03      	add	r2, sp, #12
   d4538:	4623      	mov	r3, r4
   d453a:	2001      	movs	r0, #1
   d453c:	f001 f93a 	bl	d57b4 <log_message>
  Serial1.begin(115200);
   d4540:	f002 ff44 	bl	d73cc <_Z22__fetch_global_Serial1v>
   d4544:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4548:	f002 ff3a 	bl	d73c0 <_ZN11USARTSerial5beginEm>
  //BLE.addCharacteristic(txCharacteristic);
  //BLE.addCharacteristic(rxCharacteristic);
  BleAdvertisingData data;
   d454c:	a803      	add	r0, sp, #12
   d454e:	f001 fcb6 	bl	d5ebe <_ZN8particle18BleAdvertisingDataC1Ev>
  //data.appendServiceUUID(serviceUuid);
  data.appendLocalName("Todd");
   d4552:	4926      	ldr	r1, [pc, #152]	; (d45ec <setup+0x1e8>)
   d4554:	a803      	add	r0, sp, #12
   d4556:	f001 fccc 	bl	d5ef2 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
  BLE.advertise(&data);
   d455a:	f001 ff37 	bl	d63cc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d455e:	4622      	mov	r2, r4
   d4560:	a903      	add	r1, sp, #12
   d4562:	f001 fd68 	bl	d6036 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  while(! mcp.begin()){
   d4566:	4822      	ldr	r0, [pc, #136]	; (d45f0 <setup+0x1ec>)
   d4568:	f000 fa83 	bl	d4a72 <_ZN7MCP98085beginEv>
   d456c:	b948      	cbnz	r0, d4582 <setup+0x17e>
      Serial.println("MCP9808 not found");
   d456e:	f002 fea5 	bl	d72bc <_Z16_fetch_usbserialv>
   d4572:	4920      	ldr	r1, [pc, #128]	; (d45f4 <setup+0x1f0>)
   d4574:	f002 f88d 	bl	d6692 <_ZN5Print7printlnEPKc>
      delay(500);
   d4578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d457c:	f002 fa6e 	bl	d6a5c <delay>
  //BLE.addCharacteristic(rxCharacteristic);
  BleAdvertisingData data;
  //data.appendServiceUUID(serviceUuid);
  data.appendLocalName("Todd");
  BLE.advertise(&data);
  while(! mcp.begin()){
   d4580:	e7f1      	b.n	d4566 <setup+0x162>
      Serial.println("MCP9808 not found");
      delay(500);
    }

  Serial.println("MCP9808 OK");
   d4582:	f002 fe9b 	bl	d72bc <_Z16_fetch_usbserialv>
   d4586:	491c      	ldr	r1, [pc, #112]	; (d45f8 <setup+0x1f4>)
   d4588:	f002 f883 	bl	d6692 <_ZN5Print7printlnEPKc>

}
   d458c:	b00c      	add	sp, #48	; 0x30
   d458e:	bd70      	pop	{r4, r5, r6, pc}
   d4590:	000d40b7 	.word	0x000d40b7
   d4594:	000d40b9 	.word	0x000d40b9
   d4598:	000d40bd 	.word	0x000d40bd
   d459c:	000d9628 	.word	0x000d9628
   d45a0:	2003e344 	.word	0x2003e344
   d45a4:	000d40b5 	.word	0x000d40b5
   d45a8:	000d9630 	.word	0x000d9630
   d45ac:	2003e32c 	.word	0x2003e32c
   d45b0:	000d40b3 	.word	0x000d40b3
   d45b4:	000d963a 	.word	0x000d963a
   d45b8:	2003e33c 	.word	0x2003e33c
   d45bc:	000d4629 	.word	0x000d4629
   d45c0:	000d964c 	.word	0x000d964c
   d45c4:	2003e268 	.word	0x2003e268
   d45c8:	000d40d9 	.word	0x000d40d9
   d45cc:	000d9659 	.word	0x000d9659
   d45d0:	2003e340 	.word	0x2003e340
   d45d4:	000d41cd 	.word	0x000d41cd
   d45d8:	000d9666 	.word	0x000d9666
   d45dc:	000d967d 	.word	0x000d967d
   d45e0:	000d9733 	.word	0x000d9733
   d45e4:	000d96ab 	.word	0x000d96ab
   d45e8:	000d96a7 	.word	0x000d96a7
   d45ec:	000d96c0 	.word	0x000d96c0
   d45f0:	2003e330 	.word	0x2003e330
   d45f4:	000d96c5 	.word	0x000d96c5
   d45f8:	000d96d7 	.word	0x000d96d7

000d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d45fc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d45fe:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4600:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4602:	b17c      	cbz	r4, d4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4604:	6863      	ldr	r3, [r4, #4]
   d4606:	3b01      	subs	r3, #1
   d4608:	6063      	str	r3, [r4, #4]
   d460a:	b95b      	cbnz	r3, d4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d460c:	6823      	ldr	r3, [r4, #0]
   d460e:	4620      	mov	r0, r4
   d4610:	689b      	ldr	r3, [r3, #8]
   d4612:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4614:	68a3      	ldr	r3, [r4, #8]
   d4616:	3b01      	subs	r3, #1
   d4618:	60a3      	str	r3, [r4, #8]
   d461a:	b91b      	cbnz	r3, d4624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d461c:	6823      	ldr	r3, [r4, #0]
   d461e:	4620      	mov	r0, r4
   d4620:	68db      	ldr	r3, [r3, #12]
   d4622:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4624:	4628      	mov	r0, r5
   d4626:	bd38      	pop	{r3, r4, r5, pc}

000d4628 <_Z20externalTempFunctionv>:
    Serial.println(fahreinheit); Serial.println(" (F)");
    delay(500);
  }
}

void externalTempFunction() {
   d4628:	b530      	push	{r4, r5, lr}
  while(1){
    //display external temp     SPRINTF
    //double temp = https://api.weatherbit.io/v2.0/current?city=Lombard,NC&key=c175924274b5402e8413adbee368dd35;
    char data[64];
    sprintf(data, "%f,%f", 41.8781, -87.6298);
   d462a:	a512      	add	r5, pc, #72	; (adr r5, d4674 <_Z20externalTempFunctionv+0x4c>)
   d462c:	e9d5 4500 	ldrd	r4, r5, [r5]
    Serial.println(fahreinheit); Serial.println(" (F)");
    delay(500);
  }
}

void externalTempFunction() {
   d4630:	b095      	sub	sp, #84	; 0x54
  while(1){
    //display external temp     SPRINTF
    //double temp = https://api.weatherbit.io/v2.0/current?city=Lombard,NC&key=c175924274b5402e8413adbee368dd35;
    char data[64];
    sprintf(data, "%f,%f", 41.8781, -87.6298);
   d4632:	a312      	add	r3, pc, #72	; (adr r3, d467c <_Z20externalTempFunctionv+0x54>)
   d4634:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4638:	e9cd 4500 	strd	r4, r5, [sp]
   d463c:	490a      	ldr	r1, [pc, #40]	; (d4668 <_Z20externalTempFunctionv+0x40>)
   d463e:	a804      	add	r0, sp, #16
   d4640:	f001 f9a4 	bl	d598c <sprintf>
   d4644:	4b09      	ldr	r3, [pc, #36]	; (d466c <_Z20externalTempFunctionv+0x44>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4646:	490a      	ldr	r1, [pc, #40]	; (d4670 <_Z20externalTempFunctionv+0x48>)
   d4648:	781b      	ldrb	r3, [r3, #0]
   d464a:	f88d 3000 	strb.w	r3, [sp]
   d464e:	aa04      	add	r2, sp, #16
   d4650:	233c      	movs	r3, #60	; 0x3c
   d4652:	a802      	add	r0, sp, #8
   d4654:	f002 fbe2 	bl	d6e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4658:	a803      	add	r0, sp, #12
   d465a:	f7ff ffcf 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("tempRead", data, PRIVATE);
    delay(30000);
   d465e:	f247 5030 	movw	r0, #30000	; 0x7530
   d4662:	f002 f9fb 	bl	d6a5c <delay>
   d4666:	e7e4      	b.n	d4632 <_Z20externalTempFunctionv+0xa>
   d4668:	000d96e2 	.word	0x000d96e2
   d466c:	2003e2cc 	.word	0x2003e2cc
   d4670:	000d9674 	.word	0x000d9674
   d4674:	a4a8c155 	.word	0xa4a8c155
   d4678:	c055e84e 	.word	0xc055e84e
   d467c:	94af4f0e 	.word	0x94af4f0e
   d4680:	4044f065 	.word	0x4044f065

000d4684 <loop>:

}



void loop() {
   d4684:	b570      	push	{r4, r5, r6, lr}
  if(button_touched == 1){
   d4686:	4b58      	ldr	r3, [pc, #352]	; (d47e8 <loop+0x164>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	2b01      	cmp	r3, #1

}



void loop() {
   d468c:	b092      	sub	sp, #72	; 0x48
  if(button_touched == 1){
   d468e:	d104      	bne.n	d469a <loop+0x16>
    Serial.println("button_on");
   d4690:	f002 fe14 	bl	d72bc <_Z16_fetch_usbserialv>
   d4694:	4955      	ldr	r1, [pc, #340]	; (d47ec <loop+0x168>)
   d4696:	f001 fffc 	bl	d6692 <_ZN5Print7printlnEPKc>
  }
  Serial1.printf("t0.txt=\"Test!\"\xFF\xFF\xFF");
   d469a:	f002 fe97 	bl	d73cc <_Z22__fetch_global_Serial1v>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d469e:	4a54      	ldr	r2, [pc, #336]	; (d47f0 <loop+0x16c>)
        Log.info("next read should show: %s", buf);
  }*/
//}
    static unsigned long waitMillis;
    struct epochMillis now;  //holds the unix epoch time to millisecond resolution
    if(millis() > waitMillis) {
   d46a0:	4c54      	ldr	r4, [pc, #336]	; (d47f4 <loop+0x170>)
   d46a2:	2100      	movs	r1, #0
   d46a4:	f002 f90d 	bl	d68c2 <_ZN5Print11printf_implEbPKcz>
void loop() {
  if(button_touched == 1){
    Serial.println("button_on");
  }
  Serial1.printf("t0.txt=\"Test!\"\xFF\xFF\xFF");
  delay(500);
   d46a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d46ac:	f002 f9d6 	bl	d6a5c <delay>
  Serial1.printf("t0.txt=\"Test!\"\xFF\xFF\xFF");
   d46b0:	f002 fe8c 	bl	d73cc <_Z22__fetch_global_Serial1v>
   d46b4:	4a4e      	ldr	r2, [pc, #312]	; (d47f0 <loop+0x16c>)
   d46b6:	2100      	movs	r1, #0
   d46b8:	f002 f903 	bl	d68c2 <_ZN5Print11printf_implEbPKcz>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46bc:	f000 fec2 	bl	d5444 <HAL_Timer_Get_Milli_Seconds>
        Log.info("next read should show: %s", buf);
  }*/
//}
    static unsigned long waitMillis;
    struct epochMillis now;  //holds the unix epoch time to millisecond resolution
    if(millis() > waitMillis) {
   d46c0:	6823      	ldr	r3, [r4, #0]
   d46c2:	4283      	cmp	r3, r0
   d46c4:	f080 808d 	bcs.w	d47e2 <loop+0x15e>
        ntpTime->nowMillis(&now);  //get the current NTP time
   d46c8:	4b4b      	ldr	r3, [pc, #300]	; (d47f8 <loop+0x174>)
   d46ca:	a902      	add	r1, sp, #8
   d46cc:	6818      	ldr	r0, [r3, #0]
   d46ce:	f000 f9fc 	bl	d4aca <_ZN7NtpTime9nowMillisEP11epochMillis>
        Particle.publish("NTP clock is: ", hhmmss(now.seconds) + "." + String::format("%03i",now.millis));
   d46d2:	9902      	ldr	r1, [sp, #8]
   d46d4:	a806      	add	r0, sp, #24
   d46d6:	f7ff fe3d 	bl	d4354 <_Z6hhmmssm>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d46da:	a906      	add	r1, sp, #24
   d46dc:	a80a      	add	r0, sp, #40	; 0x28
   d46de:	f001 faaf 	bl	d5c40 <_ZN6StringC1ERKS_>
   d46e2:	4946      	ldr	r1, [pc, #280]	; (d47fc <loop+0x178>)
   d46e4:	a80a      	add	r0, sp, #40	; 0x28
   d46e6:	f001 fb0a 	bl	d5cfe <_ZplRK15StringSumHelperPKc>
   d46ea:	9a03      	ldr	r2, [sp, #12]
   d46ec:	4944      	ldr	r1, [pc, #272]	; (d4800 <loop+0x17c>)
   d46ee:	4605      	mov	r5, r0
   d46f0:	a80e      	add	r0, sp, #56	; 0x38
   d46f2:	f001 fb29 	bl	d5d48 <_ZN6String6formatEPKcz>
   d46f6:	a90e      	add	r1, sp, #56	; 0x38
   d46f8:	4628      	mov	r0, r5
   d46fa:	f001 faf4 	bl	d5ce6 <_ZplRK15StringSumHelperRK6String>
   d46fe:	4d41      	ldr	r5, [pc, #260]	; (d4804 <loop+0x180>)
   d4700:	6802      	ldr	r2, [r0, #0]
   d4702:	782b      	ldrb	r3, [r5, #0]
   d4704:	4940      	ldr	r1, [pc, #256]	; (d4808 <loop+0x184>)
   d4706:	f88d 3000 	strb.w	r3, [sp]
   d470a:	a804      	add	r0, sp, #16
   d470c:	233c      	movs	r3, #60	; 0x3c
   d470e:	f002 fb85 	bl	d6e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4712:	a805      	add	r0, sp, #20
   d4714:	f7ff ff72 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4718:	a80e      	add	r0, sp, #56	; 0x38
   d471a:	f001 fa28 	bl	d5b6e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d471e:	a80a      	add	r0, sp, #40	; 0x28
   d4720:	f001 fa25 	bl	d5b6e <_ZN6StringD1Ev>
   d4724:	a806      	add	r0, sp, #24
   d4726:	f001 fa22 	bl	d5b6e <_ZN6StringD1Ev>
        Particle.publish("System clock is: ", hhmmss(Time.now()));
   d472a:	f002 f986 	bl	d6a3a <_ZN9TimeClass3nowEv>
   d472e:	4601      	mov	r1, r0
   d4730:	a80e      	add	r0, sp, #56	; 0x38
   d4732:	f7ff fe0f 	bl	d4354 <_Z6hhmmssm>
   d4736:	782b      	ldrb	r3, [r5, #0]
   d4738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d473a:	4934      	ldr	r1, [pc, #208]	; (d480c <loop+0x188>)
   d473c:	f88d 3000 	strb.w	r3, [sp]
   d4740:	a80a      	add	r0, sp, #40	; 0x28
   d4742:	233c      	movs	r3, #60	; 0x3c
   d4744:	f002 fb6a 	bl	d6e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4748:	a80b      	add	r0, sp, #44	; 0x2c
   d474a:	f7ff ff57 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d474e:	a80e      	add	r0, sp, #56	; 0x38
   d4750:	f001 fa0d 	bl	d5b6e <_ZN6StringD1Ev>
        Serial.println(hhmmss(now.seconds) + "." + String::format("%03i",now.millis));
   d4754:	f002 fdb2 	bl	d72bc <_Z16_fetch_usbserialv>
   d4758:	9902      	ldr	r1, [sp, #8]
   d475a:	4605      	mov	r5, r0
   d475c:	a806      	add	r0, sp, #24
   d475e:	f7ff fdf9 	bl	d4354 <_Z6hhmmssm>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4762:	a906      	add	r1, sp, #24
   d4764:	a80a      	add	r0, sp, #40	; 0x28
   d4766:	f001 fa6b 	bl	d5c40 <_ZN6StringC1ERKS_>
   d476a:	4924      	ldr	r1, [pc, #144]	; (d47fc <loop+0x178>)
   d476c:	a80a      	add	r0, sp, #40	; 0x28
   d476e:	f001 fac6 	bl	d5cfe <_ZplRK15StringSumHelperPKc>
   d4772:	9a03      	ldr	r2, [sp, #12]
   d4774:	4922      	ldr	r1, [pc, #136]	; (d4800 <loop+0x17c>)
   d4776:	4606      	mov	r6, r0
   d4778:	a80e      	add	r0, sp, #56	; 0x38
   d477a:	f001 fae5 	bl	d5d48 <_ZN6String6formatEPKcz>
   d477e:	a90e      	add	r1, sp, #56	; 0x38
   d4780:	4630      	mov	r0, r6
   d4782:	f001 fab0 	bl	d5ce6 <_ZplRK15StringSumHelperRK6String>
   d4786:	6801      	ldr	r1, [r0, #0]
   d4788:	4628      	mov	r0, r5
   d478a:	f001 ff82 	bl	d6692 <_ZN5Print7printlnEPKc>
   d478e:	a80e      	add	r0, sp, #56	; 0x38
   d4790:	f001 f9ed 	bl	d5b6e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4794:	a80a      	add	r0, sp, #40	; 0x28
   d4796:	f001 f9ea 	bl	d5b6e <_ZN6StringD1Ev>
   d479a:	a806      	add	r0, sp, #24
   d479c:	f001 f9e7 	bl	d5b6e <_ZN6StringD1Ev>
        Serial.println("System: " + hhmmss(Time.now()));
   d47a0:	f002 fd8c 	bl	d72bc <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47a4:	491a      	ldr	r1, [pc, #104]	; (d4810 <loop+0x18c>)
   d47a6:	4605      	mov	r5, r0
   d47a8:	a80e      	add	r0, sp, #56	; 0x38
   d47aa:	f001 fa27 	bl	d5bfc <_ZN6StringC1EPK19__FlashStringHelper>
   d47ae:	f002 f944 	bl	d6a3a <_ZN9TimeClass3nowEv>
   d47b2:	4601      	mov	r1, r0
   d47b4:	a80a      	add	r0, sp, #40	; 0x28
   d47b6:	f7ff fdcd 	bl	d4354 <_Z6hhmmssm>
   d47ba:	a90a      	add	r1, sp, #40	; 0x28
   d47bc:	a80e      	add	r0, sp, #56	; 0x38
   d47be:	f001 fa92 	bl	d5ce6 <_ZplRK15StringSumHelperRK6String>
   d47c2:	6801      	ldr	r1, [r0, #0]
   d47c4:	4628      	mov	r0, r5
   d47c6:	f001 ff64 	bl	d6692 <_ZN5Print7printlnEPKc>
   d47ca:	a80a      	add	r0, sp, #40	; 0x28
   d47cc:	f001 f9cf 	bl	d5b6e <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47d0:	a80e      	add	r0, sp, #56	; 0x38
   d47d2:	f001 f9cc 	bl	d5b6e <_ZN6StringD1Ev>
   d47d6:	f000 fe35 	bl	d5444 <HAL_Timer_Get_Milli_Seconds>
        waitMillis = millis() + (15*1000);  // wait 15 seconds
   d47da:	f500 506a 	add.w	r0, r0, #14976	; 0x3a80
   d47de:	3018      	adds	r0, #24
   d47e0:	6020      	str	r0, [r4, #0]
    default:
        break;
    }
}*/

   d47e2:	b012      	add	sp, #72	; 0x48
   d47e4:	bd70      	pop	{r4, r5, r6, pc}
   d47e6:	bf00      	nop
   d47e8:	2003e338 	.word	0x2003e338
   d47ec:	000d96e8 	.word	0x000d96e8
   d47f0:	000d96f2 	.word	0x000d96f2
   d47f4:	2003e270 	.word	0x2003e270
   d47f8:	2003e2c8 	.word	0x2003e2c8
   d47fc:	000d96be 	.word	0x000d96be
   d4800:	000d9704 	.word	0x000d9704
   d4804:	2003e26c 	.word	0x2003e26c
   d4808:	000d9709 	.word	0x000d9709
   d480c:	000d9718 	.word	0x000d9718
   d4810:	000d972a 	.word	0x000d972a

000d4814 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4814:	b510      	push	{r4, lr}
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4816:	4b04      	ldr	r3, [pc, #16]	; (d4828 <_ZN22BlynkTransportParticleD1Ev+0x14>)
   d4818:	4604      	mov	r4, r0
   d481a:	f840 3b18 	str.w	r3, [r0], #24
   d481e:	f7ff feed 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4822:	4620      	mov	r0, r4
   d4824:	bd10      	pop	{r4, pc}
   d4826:	bf00      	nop
   d4828:	000d9aa0 	.word	0x000d9aa0

000d482c <_GLOBAL__sub_I_Blynk>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d482c:	4b39      	ldr	r3, [pc, #228]	; (d4914 <_GLOBAL__sub_I_Blynk+0xe8>)
   d482e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4830:	2400      	movs	r4, #0
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4832:	4e39      	ldr	r6, [pc, #228]	; (d4918 <_GLOBAL__sub_I_Blynk+0xec>)
   d4834:	701c      	strb	r4, [r3, #0]
   d4836:	4b39      	ldr	r3, [pc, #228]	; (d491c <_GLOBAL__sub_I_Blynk+0xf0>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4838:	4d39      	ldr	r5, [pc, #228]	; (d4920 <_GLOBAL__sub_I_Blynk+0xf4>)
   d483a:	2701      	movs	r7, #1
   d483c:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d483e:	f000 fdb9 	bl	d53b4 <HAL_Pin_Map>
   d4842:	4630      	mov	r0, r6
   d4844:	f003 f986 	bl	d7b54 <_ZN9TCPClientC1Ev>
   d4848:	f106 001c 	add.w	r0, r6, #28
   d484c:	f002 fc86 	bl	d715c <_ZN9IPAddressC1Ev>
   d4850:	462a      	mov	r2, r5
   d4852:	4934      	ldr	r1, [pc, #208]	; (d4924 <_GLOBAL__sub_I_Blynk+0xf8>)
   d4854:	6374      	str	r4, [r6, #52]	; 0x34
   d4856:	4630      	mov	r0, r6
   d4858:	8734      	strh	r4, [r6, #56]	; 0x38
   d485a:	f003 fb0b 	bl	d7e74 <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d485e:	4b32      	ldr	r3, [pc, #200]	; (d4928 <_GLOBAL__sub_I_Blynk+0xfc>)
#include <cstdio>
#include <JsonParserGeneratorRK.h>
#include "Particle.h"
#include "application.h"

SYSTEM_THREAD(ENABLED);
   d4860:	4621      	mov	r1, r4
   d4862:	601e      	str	r6, [r3, #0]
   d4864:	605c      	str	r4, [r3, #4]
   d4866:	609c      	str	r4, [r3, #8]
   d4868:	60dc      	str	r4, [r3, #12]
   d486a:	611c      	str	r4, [r3, #16]
   d486c:	615c      	str	r4, [r3, #20]
   d486e:	831c      	strh	r4, [r3, #24]
   d4870:	835c      	strh	r4, [r3, #26]
   d4872:	771c      	strb	r4, [r3, #28]
   d4874:	775c      	strb	r4, [r3, #29]
   d4876:	4638      	mov	r0, r7
   d4878:	f000 ffbc 	bl	d57f4 <system_thread_set_state>
class JsonParserStatic : public JsonParser {
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d487c:	4e2b      	ldr	r6, [pc, #172]	; (d492c <_GLOBAL__sub_I_Blynk+0x100>)
   String minute = String::format("%02i",Time.minute(now));
   String second = String::format("%02i",Time.second(now));
   return hour + ":" + minute + ":" + second;
};

MCP9808 mcp = MCP9808();
   d487e:	482c      	ldr	r0, [pc, #176]	; (d4930 <_GLOBAL__sub_I_Blynk+0x104>)
   d4880:	2118      	movs	r1, #24
   d4882:	f000 f875 	bl	d4970 <_ZN7MCP9808C1Eh>
   d4886:	2332      	movs	r3, #50	; 0x32
   d4888:	9300      	str	r3, [sp, #0]
   d488a:	f106 012c 	add.w	r1, r6, #44	; 0x2c
   d488e:	f506 730b 	add.w	r3, r6, #556	; 0x22c
   d4892:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4896:	4630      	mov	r0, r6
   d4898:	f000 f9a0 	bl	d4bdc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d489c:	4b25      	ldr	r3, [pc, #148]	; (d4934 <_GLOBAL__sub_I_Blynk+0x108>)
   d489e:	6033      	str	r3, [r6, #0]
int lastResult = 0;

//void nfcCallback(nfc_event_type_t type, nfc_event_t* event, void* context);

JsonParserStatic<512, 50> jsonParser;
   d48a0:	4630      	mov	r0, r6
GoogleMapsDeviceLocator locator;
   d48a2:	4e25      	ldr	r6, [pc, #148]	; (d4938 <_GLOBAL__sub_I_Blynk+0x10c>)
MCP9808 mcp = MCP9808();
int lastResult = 0;

//void nfcCallback(nfc_event_type_t type, nfc_event_t* event, void* context);

JsonParserStatic<512, 50> jsonParser;
   d48a4:	4925      	ldr	r1, [pc, #148]	; (d493c <_GLOBAL__sub_I_Blynk+0x110>)
   d48a6:	462a      	mov	r2, r5
   d48a8:	f003 fae4 	bl	d7e74 <__aeabi_atexit>
GoogleMapsDeviceLocator locator;
   d48ac:	4630      	mov	r0, r6
   d48ae:	f000 fd19 	bl	d52e4 <_ZN23GoogleMapsDeviceLocatorC1Ev>
   d48b2:	4630      	mov	r0, r6
//DHT dhtTemp = DHT(internalTempValue, DHT11);
int button_touched = 0;

//uint8_t txBuf[UART_TX_BUF_SIZE];
size_t txLen = 0;
String tempRecieved; 
   d48b4:	4e22      	ldr	r6, [pc, #136]	; (d4940 <_GLOBAL__sub_I_Blynk+0x114>)
int lastResult = 0;

//void nfcCallback(nfc_event_type_t type, nfc_event_t* event, void* context);

JsonParserStatic<512, 50> jsonParser;
GoogleMapsDeviceLocator locator;
   d48b6:	4923      	ldr	r1, [pc, #140]	; (d4944 <_GLOBAL__sub_I_Blynk+0x118>)
   d48b8:	462a      	mov	r2, r5
   d48ba:	f003 fadb 	bl	d7e74 <__aeabi_atexit>
//DHT dhtTemp = DHT(internalTempValue, DHT11);
int button_touched = 0;

//uint8_t txBuf[UART_TX_BUF_SIZE];
size_t txLen = 0;
String tempRecieved; 
   d48be:	4922      	ldr	r1, [pc, #136]	; (d4948 <_GLOBAL__sub_I_Blynk+0x11c>)
   d48c0:	4630      	mov	r0, r6
   d48c2:	f001 f99b 	bl	d5bfc <_ZN6StringC1EPK19__FlashStringHelper>
   d48c6:	462a      	mov	r2, r5
   d48c8:	4920      	ldr	r1, [pc, #128]	; (d494c <_GLOBAL__sub_I_Blynk+0x120>)
   d48ca:	4630      	mov	r0, r6
   d48cc:	f003 fad2 	bl	d7e74 <__aeabi_atexit>

Thread internalTempThread;
   d48d0:	4e1f      	ldr	r6, [pc, #124]	; (d4950 <_GLOBAL__sub_I_Blynk+0x124>)

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d48d2:	4820      	ldr	r0, [pc, #128]	; (d4954 <_GLOBAL__sub_I_Blynk+0x128>)
   d48d4:	462a      	mov	r2, r5
   d48d6:	4631      	mov	r1, r6
   d48d8:	6004      	str	r4, [r0, #0]
   d48da:	f003 facb 	bl	d7e74 <__aeabi_atexit>
   d48de:	481e      	ldr	r0, [pc, #120]	; (d4958 <_GLOBAL__sub_I_Blynk+0x12c>)
Thread externalTempThread;
   d48e0:	462a      	mov	r2, r5
   d48e2:	4631      	mov	r1, r6
   d48e4:	6004      	str	r4, [r0, #0]
   d48e6:	f003 fac5 	bl	d7e74 <__aeabi_atexit>
   d48ea:	481c      	ldr	r0, [pc, #112]	; (d495c <_GLOBAL__sub_I_Blynk+0x130>)
Thread displayManagementThread; //handles UI and encoder interpret
   d48ec:	462a      	mov	r2, r5
   d48ee:	4631      	mov	r1, r6
   d48f0:	6004      	str	r4, [r0, #0]
   d48f2:	f003 fabf 	bl	d7e74 <__aeabi_atexit>
   d48f6:	481a      	ldr	r0, [pc, #104]	; (d4960 <_GLOBAL__sub_I_Blynk+0x134>)
Thread blynkDataPushThread;
   d48f8:	462a      	mov	r2, r5
   d48fa:	4631      	mov	r1, r6
   d48fc:	6004      	str	r4, [r0, #0]
   d48fe:	f003 fab9 	bl	d7e74 <__aeabi_atexit>
   d4902:	4818      	ldr	r0, [pc, #96]	; (d4964 <_GLOBAL__sub_I_Blynk+0x138>)
Thread nfcPairingThread;
   d4904:	462a      	mov	r2, r5
   d4906:	4631      	mov	r1, r6
   d4908:	6004      	str	r4, [r0, #0]
    default:
        break;
    }
}*/

   d490a:	b003      	add	sp, #12
   d490c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

Thread internalTempThread;
Thread externalTempThread;
Thread displayManagementThread; //handles UI and encoder interpret
Thread blynkDataPushThread;
Thread nfcPairingThread;
   d4910:	f003 bab0 	b.w	d7e74 <__aeabi_atexit>
   d4914:	2003e26c 	.word	0x2003e26c
   d4918:	2003e2f0 	.word	0x2003e2f0
   d491c:	2003e2cc 	.word	0x2003e2cc
   d4920:	2003dd18 	.word	0x2003dd18
   d4924:	000d4815 	.word	0x000d4815
   d4928:	2003e2d0 	.word	0x2003e2d0
   d492c:	2003dd1c 	.word	0x2003dd1c
   d4930:	2003e330 	.word	0x2003e330
   d4934:	000d9604 	.word	0x000d9604
   d4938:	2003e274 	.word	0x2003e274
   d493c:	000d41a1 	.word	0x000d41a1
   d4940:	2003e2b8 	.word	0x2003e2b8
   d4944:	000d52b1 	.word	0x000d52b1
   d4948:	000d98a4 	.word	0x000d98a4
   d494c:	000d5b6f 	.word	0x000d5b6f
   d4950:	000d425d 	.word	0x000d425d
   d4954:	2003e340 	.word	0x2003e340
   d4958:	2003e268 	.word	0x2003e268
   d495c:	2003e33c 	.word	0x2003e33c
   d4960:	2003e32c 	.word	0x2003e32c
   d4964:	2003e344 	.word	0x2003e344

000d4968 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4968:	6803      	ldr	r3, [r0, #0]
   d496a:	b2c9      	uxtb	r1, r1
   d496c:	689b      	ldr	r3, [r3, #8]
   d496e:	4718      	bx	r3

000d4970 <_ZN7MCP9808C1Eh>:
#include "MCP9808.h"

MCP9808::MCP9808(uint8_t addr){
	// Address can be changed from 0x18 to 0x1F, default is 0x18
	// Only the least significant bits can be modified with pins A0 to A2
	_i2cAddr = (MCP9808_DEFAULT_ADDRESS & addr == MCP9808_DEFAULT_ADDRESS) ? addr : MCP9808_DEFAULT_ADDRESS;
   d4970:	2318      	movs	r3, #24
   d4972:	7003      	strb	r3, [r0, #0]
}
   d4974:	4770      	bx	lr
	...

000d4978 <_ZN7MCP980814getTemperatureEv>:
	Wire.endTransmission();

	return true;
}

float MCP9808::getTemperature(){
   d4978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d497a:	4605      	mov	r5, r0
	Wire.requestFrom(_i2cAddr, 2);
   d497c:	f003 fa5a 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4980:	2202      	movs	r2, #2
   d4982:	7829      	ldrb	r1, [r5, #0]
   d4984:	f002 fdac 	bl	d74e0 <_ZN7TwoWire11requestFromEii>
   d4988:	2464      	movs	r4, #100	; 0x64
	int counter = 0;
	while(Wire.available()<2){
   d498a:	f003 fa53 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d498e:	6803      	ldr	r3, [r0, #0]
   d4990:	691b      	ldr	r3, [r3, #16]
   d4992:	4798      	blx	r3
   d4994:	2801      	cmp	r0, #1
   d4996:	dc07      	bgt.n	d49a8 <_ZN7MCP980814getTemperatureEv+0x30>
		counter++;
		delay(1);
   d4998:	2001      	movs	r0, #1
   d499a:	f002 f85f 	bl	d6a5c <delay>
		if(counter > 99)
   d499e:	3c01      	subs	r4, #1
   d49a0:	d1f3      	bne.n	d498a <_ZN7MCP980814getTemperatureEv+0x12>
			return -99.99;
   d49a2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; d4a18 <_ZN7MCP980814getTemperatureEv+0xa0>
   d49a6:	e036      	b.n	d4a16 <_ZN7MCP980814getTemperatureEv+0x9e>
	}
	byte msb = Wire.read();
   d49a8:	f003 fa44 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d49ac:	6803      	ldr	r3, [r0, #0]
   d49ae:	695b      	ldr	r3, [r3, #20]
   d49b0:	4798      	blx	r3
   d49b2:	4604      	mov	r4, r0
   d49b4:	b2c6      	uxtb	r6, r0
	byte lsb = Wire.read();
   d49b6:	f003 fa3d 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d49ba:	6803      	ldr	r3, [r0, #0]
   d49bc:	695b      	ldr	r3, [r3, #20]
   d49be:	4798      	blx	r3

	// Updating flag bits
	_criticalTemp = (msb & 0x80);
   d49c0:	09f3      	lsrs	r3, r6, #7
   d49c2:	706b      	strb	r3, [r5, #1]
	_upperTemp = (msb & 0x40);
   d49c4:	f3c4 1380 	ubfx	r3, r4, #6, #1
   d49c8:	70ab      	strb	r3, [r5, #2]
	_lowerTemp = (msb & 0x20);
	_negativeTemp = (msb & 0x10);
   d49ca:	f004 0710 	and.w	r7, r4, #16
	byte lsb = Wire.read();

	// Updating flag bits
	_criticalTemp = (msb & 0x80);
	_upperTemp = (msb & 0x40);
	_lowerTemp = (msb & 0x20);
   d49ce:	f3c4 1340 	ubfx	r3, r4, #5, #1
	_negativeTemp = (msb & 0x10);
   d49d2:	f3c4 1400 	ubfx	r4, r4, #4, #1
	byte lsb = Wire.read();

	// Updating flag bits
	_criticalTemp = (msb & 0x80);
	_upperTemp = (msb & 0x40);
	_lowerTemp = (msb & 0x20);
   d49d6:	70eb      	strb	r3, [r5, #3]
	_negativeTemp = (msb & 0x10);
   d49d8:	712c      	strb	r4, [r5, #4]

	msb &= 0x0F; // Clear flag bits

	float t = (msb * 16) + (lsb / 16.0);
   d49da:	b2c0      	uxtb	r0, r0
   d49dc:	f003 fd06 	bl	d83ec <__aeabi_i2d>
   d49e0:	2200      	movs	r2, #0
   d49e2:	4b0e      	ldr	r3, [pc, #56]	; (d4a1c <_ZN7MCP980814getTemperatureEv+0xa4>)
   d49e4:	f003 fd68 	bl	d84b8 <__aeabi_dmul>
	_criticalTemp = (msb & 0x80);
	_upperTemp = (msb & 0x40);
	_lowerTemp = (msb & 0x20);
	_negativeTemp = (msb & 0x10);

	msb &= 0x0F; // Clear flag bits
   d49e8:	f006 060f 	and.w	r6, r6, #15

	float t = (msb * 16) + (lsb / 16.0);
   d49ec:	4604      	mov	r4, r0
   d49ee:	0130      	lsls	r0, r6, #4
   d49f0:	460d      	mov	r5, r1
   d49f2:	f003 fcfb 	bl	d83ec <__aeabi_i2d>
   d49f6:	4602      	mov	r2, r0
   d49f8:	460b      	mov	r3, r1
   d49fa:	4620      	mov	r0, r4
   d49fc:	4629      	mov	r1, r5
   d49fe:	f003 fba9 	bl	d8154 <__adddf3>
   d4a02:	f004 f851 	bl	d8aa8 <__aeabi_d2f>
   d4a06:	ee00 0a10 	vmov	s0, r0

	if (_negativeTemp) // Ta < 0°C
   d4a0a:	b127      	cbz	r7, d4a16 <_ZN7MCP980814getTemperatureEv+0x9e>
		t -= 256;
   d4a0c:	eddf 7a04 	vldr	s15, [pc, #16]	; d4a20 <_ZN7MCP980814getTemperatureEv+0xa8>
   d4a10:	ee30 0a67 	vsub.f32	s0, s0, s15
   d4a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	return t;
}
   d4a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4a18:	c2c7fae1 	.word	0xc2c7fae1
   d4a1c:	3fb00000 	.word	0x3fb00000
   d4a20:	43800000 	.word	0x43800000

000d4a24 <_ZN7MCP98086read16Eh>:
	Wire.beginTransmission(_i2cAddr);
	Wire.write(MCP9808_REG_AMBIENT_TEMP); // set the pointer back to ambient temp register
	Wire.endTransmission();
}

uint16_t MCP9808::read16(uint8_t reg) {
   d4a24:	b538      	push	{r3, r4, r5, lr}
   d4a26:	4604      	mov	r4, r0
   d4a28:	460d      	mov	r5, r1
	uint16_t val;

	Wire.beginTransmission(_i2cAddr);
   d4a2a:	f003 fa03 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a2e:	7821      	ldrb	r1, [r4, #0]
   d4a30:	f002 fd5b 	bl	d74ea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((uint8_t)reg);
   d4a34:	f003 f9fe 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a38:	6803      	ldr	r3, [r0, #0]
   d4a3a:	4629      	mov	r1, r5
   d4a3c:	689b      	ldr	r3, [r3, #8]
   d4a3e:	4798      	blx	r3
	Wire.endTransmission();
   d4a40:	f003 f9f8 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a44:	f002 fd59 	bl	d74fa <_ZN7TwoWire15endTransmissionEv>

	Wire.requestFrom((uint8_t)_i2cAddr, (uint8_t)2);
   d4a48:	f003 f9f4 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a4c:	7821      	ldrb	r1, [r4, #0]
   d4a4e:	2202      	movs	r2, #2
   d4a50:	f002 fd43 	bl	d74da <_ZN7TwoWire11requestFromEhh>
	val = Wire.read();
   d4a54:	f003 f9ee 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a58:	6803      	ldr	r3, [r0, #0]
   d4a5a:	695b      	ldr	r3, [r3, #20]
   d4a5c:	4798      	blx	r3
   d4a5e:	b284      	uxth	r4, r0
	val <<= 8;
	val |= Wire.read();
   d4a60:	f003 f9e8 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a64:	6803      	ldr	r3, [r0, #0]
   d4a66:	695b      	ldr	r3, [r3, #20]
   d4a68:	4798      	blx	r3
   d4a6a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
	return val;
}
   d4a6e:	b280      	uxth	r0, r0
   d4a70:	bd38      	pop	{r3, r4, r5, pc}

000d4a72 <_ZN7MCP98085beginEv>:
	// Address can be changed from 0x18 to 0x1F, default is 0x18
	// Only the least significant bits can be modified with pins A0 to A2
	_i2cAddr = (MCP9808_DEFAULT_ADDRESS & addr == MCP9808_DEFAULT_ADDRESS) ? addr : MCP9808_DEFAULT_ADDRESS;
}

bool MCP9808::begin(){
   d4a72:	b510      	push	{r4, lr}
   d4a74:	4604      	mov	r4, r0
	// Only join the I2C bus as master if needed
	if(! Wire.isEnabled())
   d4a76:	f003 f9dd 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a7a:	f002 fd41 	bl	d7500 <_ZN7TwoWire9isEnabledEv>
   d4a7e:	b918      	cbnz	r0, d4a88 <_ZN7MCP98085beginEv+0x16>
		Wire.begin();
   d4a80:	f003 f9d8 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4a84:	f002 fd1a 	bl	d74bc <_ZN7TwoWire5beginEv>

	// Cheking if we can find the sensor on the bus
	if (read16(MCP9808_REG_MANUF_ID) != 0x0054) return false;
   d4a88:	2106      	movs	r1, #6
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f7ff ffca 	bl	d4a24 <_ZN7MCP98086read16Eh>
   d4a90:	2854      	cmp	r0, #84	; 0x54
   d4a92:	d001      	beq.n	d4a98 <_ZN7MCP98085beginEv+0x26>
   d4a94:	2000      	movs	r0, #0
   d4a96:	bd10      	pop	{r4, pc}
	if (read16(MCP9808_REG_DEVICE_ID_REV) != 0x0400) return false;
   d4a98:	2107      	movs	r1, #7
   d4a9a:	4620      	mov	r0, r4
   d4a9c:	f7ff ffc2 	bl	d4a24 <_ZN7MCP98086read16Eh>
   d4aa0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d4aa4:	d1f6      	bne.n	d4a94 <_ZN7MCP98085beginEv+0x22>

	Wire.beginTransmission(_i2cAddr);
   d4aa6:	f003 f9c5 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4aaa:	7821      	ldrb	r1, [r4, #0]
   d4aac:	f002 fd1d 	bl	d74ea <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(MCP9808_REG_AMBIENT_TEMP); // set the pointer back to ambient temp register
   d4ab0:	f003 f9c0 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4ab4:	2105      	movs	r1, #5
   d4ab6:	f7ff ff57 	bl	d4968 <_ZN7TwoWire5writeEi>
	Wire.endTransmission();
   d4aba:	f003 f9bb 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d4abe:	f002 fd1c 	bl	d74fa <_ZN7TwoWire15endTransmissionEv>

	return true;
   d4ac2:	2001      	movs	r0, #1
}
   d4ac4:	bd10      	pop	{r4, pc}

000d4ac6 <_GLOBAL__sub_I__ZN7MCP9808C2Eh>:
   d4ac6:	f000 bc75 	b.w	d53b4 <HAL_Pin_Map>

000d4aca <_ZN7NtpTime9nowMillisEP11epochMillis>:

/*
 * Return the current time to the millisecond.
 */
void NtpTime::nowMillis(epochMillis* _now)
{
   d4aca:	b570      	push	{r4, r5, r6, lr}
  if(!synced)
   d4acc:	f890 6052 	ldrb.w	r6, [r0, #82]	; 0x52

/*
 * Return the current time to the millisecond.
 */
void NtpTime::nowMillis(epochMillis* _now)
{
   d4ad0:	4604      	mov	r4, r0
   d4ad2:	460d      	mov	r5, r1
  if(!synced)
   d4ad4:	b926      	cbnz	r6, d4ae0 <_ZN7NtpTime9nowMillisEP11epochMillis+0x16>
  {
    _now->seconds = Time.now();  //We haven't had a successful time request, so do the best we can.
   d4ad6:	f001 ffb0 	bl	d6a3a <_ZN9TimeClass3nowEv>
    _now->millis = 0;
   d4ada:	e885 0041 	stmia.w	r5, {r0, r6}
   d4ade:	bd70      	pop	{r4, r5, r6, pc}
   d4ae0:	f000 fcb0 	bl	d5444 <HAL_Timer_Get_Milli_Seconds>
  }
  else
  {
    int nowMillis = (millis() - updateSystemMillis + NTPMillis);
   d4ae4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   d4ae6:	6f63      	ldr	r3, [r4, #116]	; 0x74
   d4ae8:	1a9b      	subs	r3, r3, r2
   d4aea:	4418      	add	r0, r3
    _now->seconds =  NTPTime - ntpTimeEpochStart + (nowMillis / 1000);
   d4aec:	6da2      	ldr	r2, [r4, #88]	; 0x58
   d4aee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   d4af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4af4:	1a9b      	subs	r3, r3, r2
   d4af6:	fb90 f2f1 	sdiv	r2, r0, r1
   d4afa:	4413      	add	r3, r2
    _now->millis = nowMillis % 1000;
   d4afc:	fb01 0012 	mls	r0, r1, r2, r0
    _now->millis = 0;
  }
  else
  {
    int nowMillis = (millis() - updateSystemMillis + NTPMillis);
    _now->seconds =  NTPTime - ntpTimeEpochStart + (nowMillis / 1000);
   d4b00:	602b      	str	r3, [r5, #0]
    _now->millis = nowMillis % 1000;
   d4b02:	6068      	str	r0, [r5, #4]
   d4b04:	bd70      	pop	{r4, r5, r6, pc}

000d4b06 <_GLOBAL__sub_I__ZN7NtpTimeC2Ev>:
   d4b06:	f000 bc55 	b.w	d53b4 <HAL_Pin_Map>
	...

000d4b0c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4b0c:	b510      	push	{r4, lr}
   d4b0e:	4b05      	ldr	r3, [pc, #20]	; (d4b24 <_ZN10JsonBufferD1Ev+0x18>)
   d4b10:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4b12:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4b14:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4b16:	b91b      	cbnz	r3, d4b20 <_ZN10JsonBufferD1Ev+0x14>
   d4b18:	6840      	ldr	r0, [r0, #4]
   d4b1a:	b108      	cbz	r0, d4b20 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4b1c:	f000 ff26 	bl	d596c <free>
	}
}
   d4b20:	4620      	mov	r0, r4
   d4b22:	bd10      	pop	{r4, pc}
   d4b24:	000d9748 	.word	0x000d9748

000d4b28 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d4b28:	b510      	push	{r4, lr}
   d4b2a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d4b2c:	f7ff ffee 	bl	d4b0c <_ZN10JsonBufferD1Ev>
   d4b30:	4620      	mov	r0, r4
   d4b32:	2114      	movs	r1, #20
   d4b34:	f003 f9ac 	bl	d7e90 <_ZdlPvj>
   d4b38:	4620      	mov	r0, r4
   d4b3a:	bd10      	pop	{r4, pc}

000d4b3c <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4b3c:	b510      	push	{r4, lr}
   d4b3e:	4b07      	ldr	r3, [pc, #28]	; (d4b5c <_ZN10JsonParserD1Ev+0x20>)
   d4b40:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d4b42:	7c03      	ldrb	r3, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4b44:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d4b46:	b91b      	cbnz	r3, d4b50 <_ZN10JsonParserD1Ev+0x14>
   d4b48:	6940      	ldr	r0, [r0, #20]
   d4b4a:	b108      	cbz	r0, d4b50 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d4b4c:	f000 ff0e 	bl	d596c <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4b50:	4620      	mov	r0, r4
   d4b52:	f7ff ffdb 	bl	d4b0c <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d4b56:	4620      	mov	r0, r4
   d4b58:	bd10      	pop	{r4, pc}
   d4b5a:	bf00      	nop
   d4b5c:	000d9784 	.word	0x000d9784

000d4b60 <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   d4b60:	b510      	push	{r4, lr}
   d4b62:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
   d4b64:	f7ff ffea 	bl	d4b3c <_ZN10JsonParserD1Ev>
   d4b68:	4620      	mov	r0, r4
   d4b6a:	212c      	movs	r1, #44	; 0x2c
   d4b6c:	f003 f990 	bl	d7e90 <_ZdlPvj>
   d4b70:	4620      	mov	r0, r4
   d4b72:	bd10      	pop	{r4, pc}

000d4b74 <_ZN10JsonBuffer8allocateEj>:

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d4b74:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d4b76:	7c03      	ldrb	r3, [r0, #16]

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {

}

bool JsonBuffer::allocate(size_t len) {
   d4b78:	4604      	mov	r4, r0
   d4b7a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d4b7c:	b10b      	cbz	r3, d4b82 <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
   d4b7e:	2000      	movs	r0, #0
   d4b80:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
   d4b82:	6840      	ldr	r0, [r0, #4]
   d4b84:	b110      	cbz	r0, d4b8c <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
   d4b86:	f000 fef9 	bl	d597c <realloc>
   d4b8a:	e002      	b.n	d4b92 <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
   d4b8c:	4608      	mov	r0, r1
   d4b8e:	f000 fee5 	bl	d595c <malloc>
		}
		if (newBuffer) {
   d4b92:	2800      	cmp	r0, #0
   d4b94:	d0f3      	beq.n	d4b7e <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
   d4b96:	6060      	str	r0, [r4, #4]
			bufferLen = len;
   d4b98:	60a5      	str	r5, [r4, #8]
			return true;
   d4b9a:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
   d4b9c:	bd38      	pop	{r3, r4, r5, pc}

000d4b9e <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d4b9e:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   d4ba0:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d4ba2:	460e      	mov	r6, r1
   d4ba4:	4604      	mov	r4, r0
   d4ba6:	4615      	mov	r5, r2
   d4ba8:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
   d4baa:	b17b      	cbz	r3, d4bcc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d4bac:	1853      	adds	r3, r2, r1
   d4bae:	6882      	ldr	r2, [r0, #8]
   d4bb0:	4293      	cmp	r3, r2
   d4bb2:	d80b      	bhi.n	d4bcc <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
   d4bb4:	68e3      	ldr	r3, [r4, #12]
   d4bb6:	6860      	ldr	r0, [r4, #4]
   d4bb8:	462a      	mov	r2, r5
   d4bba:	4631      	mov	r1, r6
   d4bbc:	4418      	add	r0, r3
   d4bbe:	f004 f8d8 	bl	d8d72 <memcpy>
	offset += dataLen;
   d4bc2:	68e3      	ldr	r3, [r4, #12]
   d4bc4:	441d      	add	r5, r3
   d4bc6:	60e5      	str	r5, [r4, #12]

	return true;
   d4bc8:	2001      	movs	r0, #1
   d4bca:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
   d4bcc:	4429      	add	r1, r5
   d4bce:	4620      	mov	r0, r4
   d4bd0:	f7ff ffd0 	bl	d4b74 <_ZN10JsonBuffer8allocateEj>
   d4bd4:	2800      	cmp	r0, #0
   d4bd6:	d1ed      	bne.n	d4bb4 <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
   d4bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4bdc <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d4bdc:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4bde:	6082      	str	r2, [r0, #8]
   d4be0:	2200      	movs	r2, #0
   d4be2:	60c2      	str	r2, [r0, #12]
   d4be4:	2201      	movs	r2, #1
   d4be6:	7402      	strb	r2, [r0, #16]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d4be8:	6143      	str	r3, [r0, #20]
   d4bea:	4a03      	ldr	r2, [pc, #12]	; (d4bf8 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d4bec:	9b02      	ldr	r3, [sp, #8]
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4bee:	6041      	str	r1, [r0, #4]

JsonParser::JsonParser() : JsonBuffer(), tokens(0), maxTokens(0) {
}

JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d4bf0:	6002      	str	r2, [r0, #0]
   d4bf2:	61c3      	str	r3, [r0, #28]

}
   d4bf4:	bd10      	pop	{r4, pc}
   d4bf6:	bf00      	nop
   d4bf8:	000d9784 	.word	0x000d9784

000d4bfc <_ZNK10JsonParser14getOuterObjectEv>:
	return 0;
}


const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   d4bfc:	6943      	ldr	r3, [r0, #20]
   d4bfe:	6982      	ldr	r2, [r0, #24]
   d4c00:	4293      	cmp	r3, r2
   d4c02:	d205      	bcs.n	d4c10 <_ZNK10JsonParser14getOuterObjectEv+0x14>
   d4c04:	781a      	ldrb	r2, [r3, #0]
   d4c06:	2a01      	cmp	r2, #1
   d4c08:	bf0c      	ite	eq
   d4c0a:	4618      	moveq	r0, r3
   d4c0c:	2000      	movne	r0, #0
   d4c0e:	4770      	bx	lr
		return &tokens[0];
	}
	else {
		return 0;
   d4c10:	2000      	movs	r0, #0
	}
}
   d4c12:	4770      	bx	lr

000d4c14 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d4c14:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d4c16:	6813      	ldr	r3, [r2, #0]
   d4c18:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d4c1a:	6813      	ldr	r3, [r2, #0]
   d4c1c:	f103 0410 	add.w	r4, r3, #16
   d4c20:	6014      	str	r4, [r2, #0]
   d4c22:	6986      	ldr	r6, [r0, #24]
   d4c24:	42b4      	cmp	r4, r6
   d4c26:	d20a      	bcs.n	d4c3e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d4c28:	699b      	ldr	r3, [r3, #24]
   d4c2a:	688c      	ldr	r4, [r1, #8]
   d4c2c:	42a3      	cmp	r3, r4
   d4c2e:	da01      	bge.n	d4c34 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d4c30:	429d      	cmp	r5, r3
   d4c32:	daf2      	bge.n	d4c1a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
   d4c34:	42a3      	cmp	r3, r4
   d4c36:	bfcc      	ite	gt
   d4c38:	2000      	movgt	r0, #0
   d4c3a:	2001      	movle	r0, #1
   d4c3c:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
   d4c3e:	2000      	movs	r0, #0
	}
	return true;
}
   d4c40:	bd70      	pop	{r4, r5, r6, pc}

000d4c42 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4c42:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4c46:	ad02      	add	r5, sp, #8
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4c48:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4c4a:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4c4e:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4c50:	f845 3d04 	str.w	r3, [r5, #-4]!
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4c54:	4607      	mov	r7, r0
   d4c56:	460c      	mov	r4, r1
   d4c58:	4691      	mov	r9, r2

	size_t index = 0;
   d4c5a:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d4c5e:	9b01      	ldr	r3, [sp, #4]
   d4c60:	69ba      	ldr	r2, [r7, #24]
   d4c62:	429a      	cmp	r2, r3
   d4c64:	d91e      	bls.n	d4ca4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
   d4c66:	6899      	ldr	r1, [r3, #8]
   d4c68:	68a2      	ldr	r2, [r4, #8]
   d4c6a:	4291      	cmp	r1, r2
   d4c6c:	da1a      	bge.n	d4ca4 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
   d4c6e:	45b0      	cmp	r8, r6
   d4c70:	d10b      	bne.n	d4c8a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
   d4c72:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
   d4c76:	462a      	mov	r2, r5
   d4c78:	4621      	mov	r1, r4
   d4c7a:	4638      	mov	r0, r7
   d4c7c:	f7ff ffca 	bl	d4c14 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d4c80:	b118      	cbz	r0, d4c8a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
   d4c82:	9b01      	ldr	r3, [sp, #4]
   d4c84:	f8ca 3000 	str.w	r3, [sl]
				return true;
   d4c88:	e00d      	b.n	d4ca6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
   d4c8a:	462a      	mov	r2, r5
   d4c8c:	4621      	mov	r1, r4
   d4c8e:	4638      	mov	r0, r7
   d4c90:	f7ff ffc0 	bl	d4c14 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d4c94:	462a      	mov	r2, r5
   d4c96:	4621      	mov	r1, r4
   d4c98:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
   d4c9a:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
   d4c9e:	f7ff ffb9 	bl	d4c14 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
   d4ca2:	e7dc      	b.n	d4c5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
   d4ca4:	2000      	movs	r0, #0
}
   d4ca6:	b002      	add	sp, #8
   d4ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4cac <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d4cac:	b538      	push	{r3, r4, r5, lr}
   d4cae:	4604      	mov	r4, r0
	if (str) {
   d4cb0:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d4cb2:	460d      	mov	r5, r1
	if (str) {
   d4cb4:	b110      	cbz	r0, d4cbc <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
   d4cb6:	f001 f809 	bl	d5ccc <_ZN6String6concatEc>
   d4cba:	e007      	b.n	d4ccc <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
   d4cbc:	6861      	ldr	r1, [r4, #4]
   d4cbe:	b129      	cbz	r1, d4ccc <_ZN16JsonParserString6appendEc+0x20>
   d4cc0:	68a3      	ldr	r3, [r4, #8]
   d4cc2:	68e2      	ldr	r2, [r4, #12]
   d4cc4:	3b01      	subs	r3, #1
   d4cc6:	429a      	cmp	r2, r3
			buf[length] = ch;
   d4cc8:	bf38      	it	cc
   d4cca:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
   d4ccc:	68e3      	ldr	r3, [r4, #12]
   d4cce:	3301      	adds	r3, #1
   d4cd0:	60e3      	str	r3, [r4, #12]
   d4cd2:	bd38      	pop	{r3, r4, r5, pc}

000d4cd4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
   d4cd4:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d4cd6:	b570      	push	{r4, r5, r6, lr}
   d4cd8:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
   d4cda:	d801      	bhi.n	d4ce0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
   d4cdc:	b2c1      	uxtb	r1, r0
   d4cde:	e019      	b.n	d4d14 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
   d4ce0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   d4ce4:	ea4f 15a0 	mov.w	r5, r0, asr #6
   d4ce8:	f000 063f 	and.w	r6, r0, #63	; 0x3f
   d4cec:	d203      	bcs.n	d4cf6 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
   d4cee:	f065 013f 	orn	r1, r5, #63	; 0x3f
   d4cf2:	b2c9      	uxtb	r1, r1
   d4cf4:	e009      	b.n	d4d0a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
   d4cf6:	0b01      	lsrs	r1, r0, #12
   d4cf8:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	f7ff ffd5 	bl	d4cac <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
   d4d02:	f005 013f 	and.w	r1, r5, #63	; 0x3f
   d4d06:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff ffce 	bl	d4cac <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d4d10:	f046 0180 	orr.w	r1, r6, #128	; 0x80
   d4d14:	4620      	mov	r0, r4
	}
}
   d4d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
   d4d1a:	f7ff bfc7 	b.w	d4cac <_ZN16JsonParserString6appendEc>
	...

000d4d20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d4d20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d4d24:	684d      	ldr	r5, [r1, #4]
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d4d26:	4680      	mov	r8, r0
   d4d28:	460f      	mov	r7, r1
   d4d2a:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;
   d4d2c:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
   d4d2e:	68b8      	ldr	r0, [r7, #8]
   d4d30:	4285      	cmp	r5, r0
   d4d32:	da46      	bge.n	d4dc2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa2>
   d4d34:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
   d4d38:	b3cc      	cbz	r4, d4dae <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8e>
			escape = false;
			switch(buffer[ii]) {
   d4d3a:	5d59      	ldrb	r1, [r3, r5]
   d4d3c:	296e      	cmp	r1, #110	; 0x6e
   d4d3e:	eb03 0205 	add.w	r2, r3, r5
   d4d42:	d00f      	beq.n	d4d64 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
   d4d44:	d805      	bhi.n	d4d52 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x32>
   d4d46:	2962      	cmp	r1, #98	; 0x62
   d4d48:	d00a      	beq.n	d4d60 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x40>
   d4d4a:	2966      	cmp	r1, #102	; 0x66
   d4d4c:	d10b      	bne.n	d4d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d4d4e:	210c      	movs	r1, #12
   d4d50:	e009      	b.n	d4d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
   d4d52:	2974      	cmp	r1, #116	; 0x74
   d4d54:	d00e      	beq.n	d4d74 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x54>
   d4d56:	2975      	cmp	r1, #117	; 0x75
   d4d58:	d00e      	beq.n	d4d78 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x58>
   d4d5a:	2972      	cmp	r1, #114	; 0x72
   d4d5c:	d103      	bne.n	d4d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
   d4d5e:	e007      	b.n	d4d70 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x50>
			case 'b':
				str.append('\b');
   d4d60:	2108      	movs	r1, #8
   d4d62:	e000      	b.n	d4d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
   d4d64:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
   d4d66:	4630      	mov	r0, r6
   d4d68:	f7ff ffa0 	bl	d4cac <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
   d4d6c:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
   d4d6e:	e026      	b.n	d4dbe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
   d4d70:	210d      	movs	r1, #13
   d4d72:	e7f8      	b.n	d4d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 't':
				str.append('\t');
   d4d74:	2109      	movs	r1, #9
   d4d76:	e7f6      	b.n	d4d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x46>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
   d4d78:	1d2b      	adds	r3, r5, #4
   d4d7a:	4298      	cmp	r0, r3
   d4d7c:	ddf6      	ble.n	d4d6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
   d4d7e:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
   d4d80:	a802      	add	r0, sp, #8
   d4d82:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d4d86:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
   d4d88:	3301      	adds	r3, #1
   d4d8a:	2b04      	cmp	r3, #4
   d4d8c:	d1f8      	bne.n	d4d80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x60>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d4d8e:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4d90:	aa01      	add	r2, sp, #4
   d4d92:	490e      	ldr	r1, [pc, #56]	; (d4dcc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xac>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
   d4d94:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4d98:	f000 fe00 	bl	d599c <sscanf>
   d4d9c:	2801      	cmp	r0, #1
   d4d9e:	d1e5      	bne.n	d4d6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
						appendUtf8((uint16_t)unicode, str);
   d4da0:	4631      	mov	r1, r6
   d4da2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4da6:	f7ff ff95 	bl	d4cd4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d4daa:	3505      	adds	r5, #5
   d4dac:	e7de      	b.n	d4d6c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4c>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
   d4dae:	5d59      	ldrb	r1, [r3, r5]
   d4db0:	295c      	cmp	r1, #92	; 0x5c
   d4db2:	d003      	beq.n	d4dbc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
   d4db4:	4630      	mov	r0, r6
   d4db6:	f7ff ff79 	bl	d4cac <_ZN16JsonParserString6appendEc>
   d4dba:	e000      	b.n	d4dbe <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9e>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
   d4dbc:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
   d4dbe:	3501      	adds	r5, #1
   d4dc0:	e7b5      	b.n	d4d2e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
   d4dc2:	2001      	movs	r0, #1
   d4dc4:	b004      	add	sp, #16
   d4dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4dca:	bf00      	nop
   d4dcc:	000d9754 	.word	0x000d9754

000d4dd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d4dd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4dd2:	460c      	mov	r4, r1
   d4dd4:	4606      	mov	r6, r0

	result = "";
   d4dd6:	490c      	ldr	r1, [pc, #48]	; (d4e08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d4dd8:	4610      	mov	r0, r2
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d4dda:	4615      	mov	r5, r2

	result = "";
   d4ddc:	f000 ff3b 	bl	d5c56 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d4de0:	68a3      	ldr	r3, [r4, #8]
   d4de2:	6861      	ldr	r1, [r4, #4]
   d4de4:	1a59      	subs	r1, r3, r1
   d4de6:	3101      	adds	r1, #1
   d4de8:	4628      	mov	r0, r5
   d4dea:	f000 fede 	bl	d5baa <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d4dee:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d4df0:	466a      	mov	r2, sp
   d4df2:	4621      	mov	r1, r4
   d4df4:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d4df6:	9500      	str	r5, [sp, #0]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	9302      	str	r3, [sp, #8]
   d4dfc:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
   d4dfe:	f7ff ff8f 	bl	d4d20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d4e02:	b004      	add	sp, #16
   d4e04:	bd70      	pop	{r4, r5, r6, pc}
   d4e06:	bf00      	nop
   d4e08:	000d98a4 	.word	0x000d98a4

000d4e0c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e10:	b089      	sub	sp, #36	; 0x24
   d4e12:	4606      	mov	r6, r0
   d4e14:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4e16:	a804      	add	r0, sp, #16
   d4e18:	4911      	ldr	r1, [pc, #68]	; (d4e60 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4e1a:	4690      	mov	r8, r2
   d4e1c:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4e1e:	f000 feed 	bl	d5bfc <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d4e22:	2500      	movs	r5, #0
   d4e24:	9500      	str	r5, [sp, #0]
   d4e26:	464b      	mov	r3, r9
   d4e28:	aa03      	add	r2, sp, #12
   d4e2a:	4639      	mov	r1, r7
   d4e2c:	4630      	mov	r0, r6
   d4e2e:	f7ff ff08 	bl	d4c42 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d4e32:	4604      	mov	r4, r0
   d4e34:	b168      	cbz	r0, d4e52 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
   d4e36:	aa04      	add	r2, sp, #16
   d4e38:	9903      	ldr	r1, [sp, #12]
   d4e3a:	4630      	mov	r0, r6
   d4e3c:	f7ff ffc8 	bl	d4dd0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d4e40:	4604      	mov	r4, r0
   d4e42:	b120      	cbz	r0, d4e4e <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4e44:	4641      	mov	r1, r8
   d4e46:	a804      	add	r0, sp, #16
   d4e48:	f000 ff6b 	bl	d5d22 <_ZNK6String6equalsEPKc>
   d4e4c:	b908      	cbnz	r0, d4e52 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d4e4e:	3501      	adds	r5, #1
   d4e50:	e7e8      	b.n	d4e24 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
   d4e52:	a804      	add	r0, sp, #16
   d4e54:	f000 fe8b 	bl	d5b6e <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
   d4e58:	4620      	mov	r0, r4
   d4e5a:	b009      	add	sp, #36	; 0x24
   d4e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e60:	000d98a4 	.word	0x000d98a4

000d4e64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d4e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d4e68:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4e6a:	f04f 35ff 	mov.w	r5, #4294967295
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d4e6e:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d4e72:	f8d0 c000 	ldr.w	ip, [r0]
   d4e76:	4594      	cmp	ip, r2
   d4e78:	f080 819e 	bcs.w	d51b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
   d4e7c:	f811 800c 	ldrb.w	r8, [r1, ip]
   d4e80:	f1b8 0f00 	cmp.w	r8, #0
   d4e84:	f000 8198 	beq.w	d51b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d4e88:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d4e8c:	f000 8116 	beq.w	d50bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
   d4e90:	d818      	bhi.n	d4ec4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
   d4e92:	f1b8 0f0d 	cmp.w	r8, #13
   d4e96:	f000 818b 	beq.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4e9a:	d806      	bhi.n	d4eaa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
   d4e9c:	f1a8 0809 	sub.w	r8, r8, #9
   d4ea0:	f1b8 0f01 	cmp.w	r8, #1
   d4ea4:	f240 8184 	bls.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4ea8:	e13d      	b.n	d5126 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d4eaa:	f1b8 0f20 	cmp.w	r8, #32
   d4eae:	f000 817f 	beq.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4eb2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d4eb6:	f040 8136 	bne.w	d5126 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
   d4eba:	f10c 0901 	add.w	r9, ip, #1
   d4ebe:	f8c0 9000 	str.w	r9, [r0]
   d4ec2:	e092      	b.n	d4fea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d4ec4:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d4ec8:	d03c      	beq.n	d4f44 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d4eca:	d807      	bhi.n	d4edc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
   d4ecc:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d4ed0:	f000 80f0 	beq.w	d50b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
   d4ed4:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d4ed8:	d007      	beq.n	d4eea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d4eda:	e124      	b.n	d5126 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
   d4edc:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d4ee0:	d003      	beq.n	d4eea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
   d4ee2:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d4ee6:	d02d      	beq.n	d4f44 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
   d4ee8:	e11d      	b.n	d5126 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
   d4eea:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d4eec:	2b00      	cmp	r3, #0
   d4eee:	f000 815f 	beq.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d4ef2:	6847      	ldr	r7, [r0, #4]
   d4ef4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d4ef6:	42be      	cmp	r6, r7
   d4ef8:	f240 817d 	bls.w	d51f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x392>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d4efc:	f107 0c01 	add.w	ip, r7, #1
   d4f00:	f8c0 c004 	str.w	ip, [r0, #4]
   d4f04:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   d4f08:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
   d4f0c:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4f0e:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
   d4f12:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d4f16:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
   d4f1a:	6887      	ldr	r7, [r0, #8]
   d4f1c:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d4f1e:	bf1f      	itttt	ne
   d4f20:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d4f24:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d4f28:	3701      	addne	r7, #1
   d4f2a:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d4f2e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d4f32:	bf14      	ite	ne
   d4f34:	2702      	movne	r7, #2
   d4f36:	2701      	moveq	r7, #1
   d4f38:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
   d4f3c:	6807      	ldr	r7, [r0, #0]
   d4f3e:	f8ca 7004 	str.w	r7, [sl, #4]
   d4f42:	e0b7      	b.n	d50b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d4f44:	2b00      	cmp	r3, #0
   d4f46:	f000 8133 	beq.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d4f4a:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d4f4c:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d4f50:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
   d4f54:	f108 38ff 	add.w	r8, r8, #4294967295
   d4f58:	bf14      	ite	ne
   d4f5a:	f04f 0a02 	movne.w	sl, #2
   d4f5e:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d4f62:	f107 39ff 	add.w	r9, r7, #4294967295
   d4f66:	eb03 1808 	add.w	r8, r3, r8, lsl #4
   d4f6a:	f1b9 0f00 	cmp.w	r9, #0
   d4f6e:	db19      	blt.n	d4fa4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d4f70:	f8d8 7004 	ldr.w	r7, [r8, #4]
   d4f74:	3701      	adds	r7, #1
   d4f76:	d010      	beq.n	d4f9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
   d4f78:	f8d8 7008 	ldr.w	r7, [r8, #8]
   d4f7c:	1c7e      	adds	r6, r7, #1
   d4f7e:	d10c      	bne.n	d4f9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
   d4f80:	f898 b000 	ldrb.w	fp, [r8]
   d4f84:	45d3      	cmp	fp, sl
   d4f86:	f040 8129 	bne.w	d51dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d4f8a:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d4f8c:	f10c 0701 	add.w	r7, ip, #1
   d4f90:	f8c8 7008 	str.w	r7, [r8, #8]
   d4f94:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
   d4f98:	e011      	b.n	d4fbe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d4f9a:	f109 39ff 	add.w	r9, r9, #4294967295
   d4f9e:	f1a8 0810 	sub.w	r8, r8, #16
   d4fa2:	e7e2      	b.n	d4f6a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d4fa4:	f1b9 3fff 	cmp.w	r9, #4294967295
   d4fa8:	f040 8102 	bne.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d4fac:	e116      	b.n	d51dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
				for (; i >= 0; i--) {
   d4fae:	f109 39ff 	add.w	r9, r9, #4294967295
   d4fb2:	f1b9 3fff 	cmp.w	r9, #4294967295
   d4fb6:	f1ac 0c10 	sub.w	ip, ip, #16
   d4fba:	f000 80f9 	beq.w	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d4fbe:	f8dc 7004 	ldr.w	r7, [ip, #4]
   d4fc2:	3701      	adds	r7, #1
   d4fc4:	d0f3      	beq.n	d4fae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
   d4fc6:	f8dc 7008 	ldr.w	r7, [ip, #8]
   d4fca:	3701      	adds	r7, #1
   d4fcc:	d1ef      	bne.n	d4fae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
   d4fce:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
   d4fd2:	e0ed      	b.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d4fd4:	f811 7008 	ldrb.w	r7, [r1, r8]
   d4fd8:	2f00      	cmp	r7, #0
   d4fda:	d068      	beq.n	d50ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
   d4fdc:	2f22      	cmp	r7, #34	; 0x22
   d4fde:	d009      	beq.n	d4ff4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d4fe0:	2f5c      	cmp	r7, #92	; 0x5c
   d4fe2:	d026      	beq.n	d5032 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d4fe4:	6807      	ldr	r7, [r0, #0]
   d4fe6:	3701      	adds	r7, #1
   d4fe8:	6007      	str	r7, [r0, #0]
   d4fea:	f8d0 8000 	ldr.w	r8, [r0]
   d4fee:	4542      	cmp	r2, r8
   d4ff0:	d8f0      	bhi.n	d4fd4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
   d4ff2:	e05c      	b.n	d50ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
   d4ff4:	2b00      	cmp	r3, #0
   d4ff6:	f000 80ce 	beq.w	d5196 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d4ffa:	6847      	ldr	r7, [r0, #4]
   d4ffc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d4ffe:	42be      	cmp	r6, r7
   d5000:	f240 80f7 	bls.w	d51f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d5004:	f107 0c01 	add.w	ip, r7, #1
   d5008:	013f      	lsls	r7, r7, #4
   d500a:	f8c0 c004 	str.w	ip, [r0, #4]
   d500e:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d5012:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5014:	f8cc 5008 	str.w	r5, [ip, #8]
   d5018:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
   d501c:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d5020:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d5024:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
   d5028:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
   d502c:	f8cc 8008 	str.w	r8, [ip, #8]
   d5030:	e0b1      	b.n	d5196 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
   d5032:	f108 0701 	add.w	r7, r8, #1
   d5036:	42ba      	cmp	r2, r7
   d5038:	d9d4      	bls.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
   d503a:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d503c:	5dcf      	ldrb	r7, [r1, r7]
   d503e:	2f66      	cmp	r7, #102	; 0x66
   d5040:	d0d0      	beq.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5042:	d808      	bhi.n	d5056 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
   d5044:	2f2f      	cmp	r7, #47	; 0x2f
   d5046:	d0cd      	beq.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5048:	d801      	bhi.n	d504e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
   d504a:	2f22      	cmp	r7, #34	; 0x22
   d504c:	e007      	b.n	d505e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d504e:	2f5c      	cmp	r7, #92	; 0x5c
   d5050:	d0c8      	beq.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5052:	2f62      	cmp	r7, #98	; 0x62
   d5054:	e003      	b.n	d505e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
   d5056:	2f72      	cmp	r7, #114	; 0x72
   d5058:	d0c4      	beq.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d505a:	d802      	bhi.n	d5062 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
   d505c:	2f6e      	cmp	r7, #110	; 0x6e
   d505e:	d175      	bne.n	d514c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
   d5060:	e7c0      	b.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5062:	2f74      	cmp	r7, #116	; 0x74
   d5064:	d0be      	beq.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5066:	2f75      	cmp	r7, #117	; 0x75
   d5068:	d170      	bne.n	d514c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
   d506a:	f108 0702 	add.w	r7, r8, #2
   d506e:	6007      	str	r7, [r0, #0]
   d5070:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5074:	f8d0 8000 	ldr.w	r8, [r0]
   d5078:	4542      	cmp	r2, r8
   d507a:	d803      	bhi.n	d5084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
   d507c:	6807      	ldr	r7, [r0, #0]
   d507e:	3f01      	subs	r7, #1
   d5080:	6007      	str	r7, [r0, #0]
   d5082:	e7af      	b.n	d4fe4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5084:	f811 7008 	ldrb.w	r7, [r1, r8]
   d5088:	2f00      	cmp	r7, #0
   d508a:	d0f7      	beq.n	d507c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d508c:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d5090:	f1bb 0f09 	cmp.w	fp, #9
   d5094:	d904      	bls.n	d50a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
   d5096:	f027 0720 	bic.w	r7, r7, #32
   d509a:	3f41      	subs	r7, #65	; 0x41
   d509c:	2f05      	cmp	r7, #5
   d509e:	d855      	bhi.n	d514c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d50a0:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d50a4:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
   d50a8:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d50aa:	d1e3      	bne.n	d5074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
   d50ac:	e7e6      	b.n	d507c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
   d50ae:	f8c0 c000 	str.w	ip, [r0]
   d50b2:	e09a      	b.n	d51ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   d50b4:	6847      	ldr	r7, [r0, #4]
   d50b6:	3f01      	subs	r7, #1
   d50b8:	6087      	str	r7, [r0, #8]
				break;
   d50ba:	e079      	b.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
   d50bc:	2b00      	cmp	r3, #0
   d50be:	d077      	beq.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d50c0:	6887      	ldr	r7, [r0, #8]
   d50c2:	1c7e      	adds	r6, r7, #1
   d50c4:	d074      	beq.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d50c6:	013f      	lsls	r7, r7, #4
   d50c8:	5ddf      	ldrb	r7, [r3, r7]
   d50ca:	3f01      	subs	r7, #1
   d50cc:	2f01      	cmp	r7, #1
   d50ce:	d96f      	bls.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d50d0:	6847      	ldr	r7, [r0, #4]
   d50d2:	f107 38ff 	add.w	r8, r7, #4294967295
   d50d6:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d50da:	f1b8 0f00 	cmp.w	r8, #0
   d50de:	db67      	blt.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d50e0:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
   d50e4:	3f01      	subs	r7, #1
   d50e6:	2f01      	cmp	r7, #1
   d50e8:	d80a      	bhi.n	d5100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d50ea:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
   d50ee:	3701      	adds	r7, #1
   d50f0:	d006      	beq.n	d5100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
   d50f2:	f85c 7c08 	ldr.w	r7, [ip, #-8]
   d50f6:	3701      	adds	r7, #1
   d50f8:	d102      	bne.n	d5100 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
   d50fa:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d50fe:	e057      	b.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5100:	f108 38ff 	add.w	r8, r8, #4294967295
   d5104:	f1ac 0c10 	sub.w	ip, ip, #16
   d5108:	e7e7      	b.n	d50da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d510a:	f811 7008 	ldrb.w	r7, [r1, r8]
   d510e:	b307      	cbz	r7, d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d5110:	2f20      	cmp	r7, #32
   d5112:	d01e      	beq.n	d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5114:	d810      	bhi.n	d5138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
   d5116:	2f09      	cmp	r7, #9
   d5118:	d20a      	bcs.n	d5130 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d511a:	3f20      	subs	r7, #32
   d511c:	2f5e      	cmp	r7, #94	; 0x5e
   d511e:	d815      	bhi.n	d514c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5120:	f108 0701 	add.w	r7, r8, #1
   d5124:	6007      	str	r7, [r0, #0]
   d5126:	f8d0 8000 	ldr.w	r8, [r0]
   d512a:	4542      	cmp	r2, r8
   d512c:	d8ed      	bhi.n	d510a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
   d512e:	e010      	b.n	d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
   d5130:	2f0a      	cmp	r7, #10
   d5132:	d90e      	bls.n	d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5134:	2f0d      	cmp	r7, #13
   d5136:	e007      	b.n	d5148 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d5138:	2f3a      	cmp	r7, #58	; 0x3a
   d513a:	d00a      	beq.n	d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d513c:	d801      	bhi.n	d5142 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
   d513e:	2f2c      	cmp	r7, #44	; 0x2c
   d5140:	e002      	b.n	d5148 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
   d5142:	2f5d      	cmp	r7, #93	; 0x5d
   d5144:	d005      	beq.n	d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
   d5146:	2f7d      	cmp	r7, #125	; 0x7d
   d5148:	d1e7      	bne.n	d511a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
   d514a:	e002      	b.n	d5152 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
   d514c:	f8c0 c000 	str.w	ip, [r0]
   d5150:	e044      	b.n	d51dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x378>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
   d5152:	b913      	cbnz	r3, d515a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
   d5154:	f108 37ff 	add.w	r7, r8, #4294967295
   d5158:	e01c      	b.n	d5194 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
   d515a:	6847      	ldr	r7, [r0, #4]
   d515c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d515e:	42be      	cmp	r6, r7
   d5160:	d947      	bls.n	d51f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
   d5162:	f107 0801 	add.w	r8, r7, #1
   d5166:	013f      	lsls	r7, r7, #4
   d5168:	f8c0 8004 	str.w	r8, [r0, #4]
   d516c:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
   d5170:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
   d5172:	f8c8 5008 	str.w	r5, [r8, #8]
   d5176:	f8c8 5004 	str.w	r5, [r8, #4]
	tok->size = 0;
   d517a:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d517e:	f04f 0604 	mov.w	r6, #4
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d5182:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
   d5186:	55de      	strb	r6, [r3, r7]
	token->start = start;
   d5188:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
   d518c:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
   d5190:	6807      	ldr	r7, [r0, #0]
   d5192:	3f01      	subs	r7, #1
   d5194:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
   d5196:	6887      	ldr	r7, [r0, #8]
   d5198:	1c7e      	adds	r6, r7, #1
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
   d519a:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d519e:	d007      	beq.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
   d51a0:	b133      	cbz	r3, d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
					tokens[parser->toksuper].size++;
   d51a2:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
   d51a6:	f8dc 700c 	ldr.w	r7, [ip, #12]
   d51aa:	3701      	adds	r7, #1
   d51ac:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d51b0:	6807      	ldr	r7, [r0, #0]
   d51b2:	3701      	adds	r7, #1
   d51b4:	6007      	str	r7, [r0, #0]
   d51b6:	e65c      	b.n	d4e72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
   d51b8:	b1a3      	cbz	r3, d51e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d51ba:	6842      	ldr	r2, [r0, #4]
   d51bc:	1e51      	subs	r1, r2, #1
   d51be:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d51c2:	2900      	cmp	r1, #0
   d51c4:	db0e      	blt.n	d51e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x380>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d51c6:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d51ca:	3201      	adds	r2, #1
   d51cc:	d003      	beq.n	d51d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x372>
   d51ce:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d51d2:	3201      	adds	r2, #1
   d51d4:	d009      	beq.n	d51ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x386>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
   d51d6:	3901      	subs	r1, #1
   d51d8:	3b10      	subs	r3, #16
   d51da:	e7f2      	b.n	d51c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
   d51dc:	f06f 0001 	mvn.w	r0, #1
   d51e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51e4:	4620      	mov	r0, r4
   d51e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
   d51ea:	f06f 0002 	mvn.w	r0, #2
   d51ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
   d51f2:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
   d51f6:	f04f 30ff 	mov.w	r0, #4294967295
   d51fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d51fe <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d51fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (tokens) {
   d5200:	6943      	ldr	r3, [r0, #20]
	else {
		return false;
	}
}

bool JsonParser::parse() {
   d5202:	4604      	mov	r4, r0
   d5204:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   d5208:	b1f3      	cbz	r3, d5248 <_ZN10JsonParser5parseEv+0x4a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d520a:	2200      	movs	r2, #0
   d520c:	6202      	str	r2, [r0, #32]
	parser->toknext = 0;
   d520e:	6242      	str	r2, [r0, #36]	; 0x24
	parser->toksuper = -1;
   d5210:	f04f 32ff 	mov.w	r2, #4294967295
   d5214:	6282      	str	r2, [r0, #40]	; 0x28

bool JsonParser::parse() {
	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5216:	69c2      	ldr	r2, [r0, #28]
   d5218:	9200      	str	r2, [sp, #0]
   d521a:	68c2      	ldr	r2, [r0, #12]
   d521c:	6841      	ldr	r1, [r0, #4]
   d521e:	4630      	mov	r0, r6
   d5220:	f7ff fe20 	bl	d4e64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d5224:	1c43      	adds	r3, r0, #1
   d5226:	d109      	bne.n	d523c <_ZN10JsonParser5parseEv+0x3e>
			if (staticBuffers) {
   d5228:	7c25      	ldrb	r5, [r4, #16]
   d522a:	b10d      	cbz	r5, d5230 <_ZN10JsonParser5parseEv+0x32>
				// If using static buffers and there is not enough space, fail
				return false;
   d522c:	2000      	movs	r0, #0
   d522e:	e033      	b.n	d5298 <_ZN10JsonParser5parseEv+0x9a>
			}
			free(tokens);
   d5230:	6960      	ldr	r0, [r4, #20]
   d5232:	f000 fb9b 	bl	d596c <free>
			tokens = 0;
   d5236:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d5238:	61e5      	str	r5, [r4, #28]
   d523a:	e005      	b.n	d5248 <_ZN10JsonParser5parseEv+0x4a>
		}
		else
		if (result < 0) {
   d523c:	2800      	cmp	r0, #0
   d523e:	dbf5      	blt.n	d522c <_ZN10JsonParser5parseEv+0x2e>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
   d5240:	6963      	ldr	r3, [r4, #20]
   d5242:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   d5246:	e025      	b.n	d5294 <_ZN10JsonParser5parseEv+0x96>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5248:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
   d524a:	f04f 37ff 	mov.w	r7, #4294967295
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d524e:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d5250:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d5252:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d5254:	9500      	str	r5, [sp, #0]
   d5256:	462b      	mov	r3, r5
   d5258:	68e2      	ldr	r2, [r4, #12]
   d525a:	6861      	ldr	r1, [r4, #4]
   d525c:	4630      	mov	r0, r6
   d525e:	f7ff fe01 	bl	d4e64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d5262:	2800      	cmp	r0, #0
   d5264:	dbe2      	blt.n	d522c <_ZN10JsonParser5parseEv+0x2e>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
   d5266:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d5268:	d013      	beq.n	d5292 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d526a:	0100      	lsls	r0, r0, #4
   d526c:	f000 fb76 	bl	d595c <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5270:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d5272:	6160      	str	r0, [r4, #20]
   d5274:	4603      	mov	r3, r0

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5276:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d5278:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
   d527a:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
   d527c:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d527e:	68e2      	ldr	r2, [r4, #12]
   d5280:	6861      	ldr	r1, [r4, #4]
   d5282:	4630      	mov	r0, r6
   d5284:	f7ff fdee 	bl	d4e64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
   d5288:	6963      	ldr	r3, [r4, #20]
   d528a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d528e:	61a0      	str	r0, [r4, #24]
   d5290:	e001      	b.n	d5296 <_ZN10JsonParser5parseEv+0x98>
	}
	else {
		tokensEnd = tokens;
   d5292:	6963      	ldr	r3, [r4, #20]
   d5294:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
   d5296:	2001      	movs	r0, #1
}
   d5298:	b003      	add	sp, #12
   d529a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d529c <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d529c:	f000 b88a 	b.w	d53b4 <HAL_Pin_Map>

000d52a0 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
   d52a0:	f000 b888 	b.w	d53b4 <HAL_Pin_Map>

000d52a4 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d52a4:	f000 b886 	b.w	d53b4 <HAL_Pin_Map>

000d52a8 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d52a8:	f000 b884 	b.w	d53b4 <HAL_Pin_Map>

000d52ac <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d52ac:	f000 b882 	b.w	d53b4 <HAL_Pin_Map>

000d52b0 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d52b0:	b510      	push	{r4, lr}
   d52b2:	4b06      	ldr	r3, [pc, #24]	; (d52cc <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
   d52b4:	4604      	mov	r4, r0
   d52b6:	f840 3b2c 	str.w	r3, [r0], #44
   d52ba:	f000 fc58 	bl	d5b6e <_ZN6StringD1Ev>
   d52be:	f104 000c 	add.w	r0, r4, #12
   d52c2:	f000 fc54 	bl	d5b6e <_ZN6StringD1Ev>

}
   d52c6:	4620      	mov	r0, r4
   d52c8:	bd10      	pop	{r4, pc}
   d52ca:	bf00      	nop
   d52cc:	000d9794 	.word	0x000d9794

000d52d0 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
   d52d0:	b510      	push	{r4, lr}
   d52d2:	4604      	mov	r4, r0

}
   d52d4:	f7ff ffec 	bl	d52b0 <_ZN23GoogleMapsDeviceLocatorD1Ev>
   d52d8:	4620      	mov	r0, r4
   d52da:	2144      	movs	r1, #68	; 0x44
   d52dc:	f002 fdd8 	bl	d7e90 <_ZdlPvj>
   d52e0:	4620      	mov	r0, r4
   d52e2:	bd10      	pop	{r4, pc}

000d52e4 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d52e4:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d52e6:	4b0f      	ldr	r3, [pc, #60]	; (d5324 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
   d52e8:	6003      	str	r3, [r0, #0]
   d52ea:	2500      	movs	r5, #0
   d52ec:	f242 7310 	movw	r3, #10000	; 0x2710

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
   d52f0:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
   d52f2:	6045      	str	r5, [r0, #4]
   d52f4:	6083      	str	r3, [r0, #8]
   d52f6:	490c      	ldr	r1, [pc, #48]	; (d5328 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
   d52f8:	300c      	adds	r0, #12
   d52fa:	f000 fc7f 	bl	d5bfc <_ZN6StringC1EPK19__FlashStringHelper>
   d52fe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d5302:	62a3      	str	r3, [r4, #40]	; 0x28
   d5304:	61e5      	str	r5, [r4, #28]
   d5306:	6225      	str	r5, [r4, #32]
   d5308:	6265      	str	r5, [r4, #36]	; 0x24
   d530a:	4908      	ldr	r1, [pc, #32]	; (d532c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
   d530c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5310:	f000 fc74 	bl	d5bfc <_ZN6StringC1EPK19__FlashStringHelper>
   d5314:	f44f 739b 	mov.w	r3, #310	; 0x136
   d5318:	63e3      	str	r3, [r4, #60]	; 0x3c
   d531a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   d531e:	6423      	str	r3, [r4, #64]	; 0x40

}
   d5320:	4620      	mov	r0, r4
   d5322:	bd38      	pop	{r3, r4, r5, pc}
   d5324:	000d9794 	.word	0x000d9794
   d5328:	000d97d4 	.word	0x000d97d4
   d532c:	000d97e2 	.word	0x000d97e2

000d5330 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
   d5330:	4b02      	ldr	r3, [pc, #8]	; (d533c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
   d5332:	2201      	movs	r2, #1
   d5334:	701a      	strb	r2, [r3, #0]
   d5336:	f000 b83d 	b.w	d53b4 <HAL_Pin_Map>
   d533a:	bf00      	nop
   d533c:	2003e348 	.word	0x2003e348

000d5340 <_GLOBAL__sub_I__ZN8NexGaugeC2EhhPKcPv>:
   d5340:	f000 b838 	b.w	d53b4 <HAL_Pin_Map>

000d5344 <_GLOBAL__sub_I__Z14NexSendCommandPKcz>:
   d5344:	f000 b836 	b.w	d53b4 <HAL_Pin_Map>

000d5348 <_GLOBAL__sub_I__ZN14NexProgressBarC2EhhPKcPv>:
   d5348:	f000 b834 	b.w	d53b4 <HAL_Pin_Map>

000d534c <_GLOBAL__sub_I__ZN11NexWaveformC2EhhPKcPv>:
   d534c:	f000 b832 	b.w	d53b4 <HAL_Pin_Map>

000d5350 <_GLOBAL__sub_I__ZN9NexButtonC2EhhPKcPv>:
   d5350:	f000 b830 	b.w	d53b4 <HAL_Pin_Map>

000d5354 <_GLOBAL__sub_I__ZN8NexTimerC2EhhPKcPv>:
   d5354:	f000 b82e 	b.w	d53b4 <HAL_Pin_Map>

000d5358 <_GLOBAL__sub_I__ZN6NexVarC2EhhPKc>:
   d5358:	f000 b82c 	b.w	d53b4 <HAL_Pin_Map>

000d535c <_GLOBAL__sub_I__ZN9NexNumberC2EhhPKc>:
   d535c:	f000 b82a 	b.w	d53b4 <HAL_Pin_Map>

000d5360 <_GLOBAL__sub_I_ITEADLIB_Nextion.cpp>:
   d5360:	f000 b828 	b.w	d53b4 <HAL_Pin_Map>

000d5364 <_GLOBAL__sub_I__ZN9NexObjectC2EhhPKcPv>:
   d5364:	f000 b826 	b.w	d53b4 <HAL_Pin_Map>

000d5368 <_GLOBAL__sub_I__ZN11NexDSButtonC2EhhPKc>:
   d5368:	f000 b824 	b.w	d53b4 <HAL_Pin_Map>

000d536c <_GLOBAL__sub_I__Z11clearScreenm>:
   d536c:	f000 b822 	b.w	d53b4 <HAL_Pin_Map>

000d5370 <_GLOBAL__sub_I__ZN7NexCropC2EhhPKcPv>:
   d5370:	f000 b820 	b.w	d53b4 <HAL_Pin_Map>

000d5374 <_GLOBAL__sub_I__ZN9NexSliderC2EhhPKcPv>:
   d5374:	f000 b81e 	b.w	d53b4 <HAL_Pin_Map>

000d5378 <_GLOBAL__sub_I_bkCmd>:
   d5378:	f000 b81c 	b.w	d53b4 <HAL_Pin_Map>

000d537c <_GLOBAL__sub_I__ZN10NexHotspotC2EhhPKcPv>:
   d537c:	f000 b81a 	b.w	d53b4 <HAL_Pin_Map>

000d5380 <_GLOBAL__sub_I__ZN7NexPageC2EhhPKcPv>:
   d5380:	f000 b818 	b.w	d53b4 <HAL_Pin_Map>

000d5384 <_GLOBAL__sub_I__ZN7NexTextC2EhhPKcPv>:
   d5384:	f000 b816 	b.w	d53b4 <HAL_Pin_Map>

000d5388 <_GLOBAL__sub_I__ZN10NexPictureC2EhhPKcPv>:
   d5388:	f000 b814 	b.w	d53b4 <HAL_Pin_Map>

000d538c <_GLOBAL__sub_I__ZN8NexTouchC2EhhPKcPv>:
   d538c:	f000 b812 	b.w	d53b4 <HAL_Pin_Map>

000d5390 <_GLOBAL__sub_I_CellularHelper.cpp>:
   d5390:	f000 b810 	b.w	d53b4 <HAL_Pin_Map>

000d5394 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <netdb_freeaddrinfo+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	689b      	ldr	r3, [r3, #8]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	00030268 	.word	0x00030268

000d53a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <netdb_getaddrinfo+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	68db      	ldr	r3, [r3, #12]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	00030268 	.word	0x00030268

000d53b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <HAL_Pin_Map+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	681b      	ldr	r3, [r3, #0]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	0003022c 	.word	0x0003022c

000d53c4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <HAL_Pin_Mode+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	689b      	ldr	r3, [r3, #8]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003022c 	.word	0x0003022c

000d53d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <HAL_Get_Pin_Mode+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	68db      	ldr	r3, [r3, #12]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003022c 	.word	0x0003022c

000d53e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <HAL_GPIO_Write+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	691b      	ldr	r3, [r3, #16]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003022c 	.word	0x0003022c

000d53f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <HAL_SPI_Init+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	69db      	ldr	r3, [r3, #28]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030230 	.word	0x00030230

000d5404 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <HAL_SPI_Is_Enabled+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	6a1b      	ldr	r3, [r3, #32]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030230 	.word	0x00030230

000d5414 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <if_index_to_name+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	695b      	ldr	r3, [r3, #20]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	0003026c 	.word	0x0003026c

000d5424 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <HAL_RNG_GetRandomNumber+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	685b      	ldr	r3, [r3, #4]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030218 	.word	0x00030218

000d5434 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <HAL_Delay_Microseconds+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	68db      	ldr	r3, [r3, #12]
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030218 	.word	0x00030218

000d5444 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	695b      	ldr	r3, [r3, #20]
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030218 	.word	0x00030218

000d5454 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <HAL_RTC_Get_UnixTime+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	69db      	ldr	r3, [r3, #28]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030218 	.word	0x00030218

000d5464 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <HAL_RTC_Time_Is_Valid+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030218 	.word	0x00030218

000d5474 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <hal_ble_stack_init+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	689b      	ldr	r3, [r3, #8]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030278 	.word	0x00030278

000d5484 <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <hal_ble_set_callback_on_events+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	695b      	ldr	r3, [r3, #20]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030278 	.word	0x00030278

000d5494 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <hal_ble_gap_set_advertising_data+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030278 	.word	0x00030278

000d54a4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <hal_ble_gap_set_scan_response_data+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030278 	.word	0x00030278

000d54b4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <hal_ble_gap_start_advertising+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030278 	.word	0x00030278

000d54c4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <os_thread_create+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	685b      	ldr	r3, [r3, #4]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030248 	.word	0x00030248

000d54d4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <os_thread_is_current+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	689b      	ldr	r3, [r3, #8]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030248 	.word	0x00030248

000d54e4 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <os_thread_yield+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	68db      	ldr	r3, [r3, #12]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030248 	.word	0x00030248

000d54f4 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <os_thread_join+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	691b      	ldr	r3, [r3, #16]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030248 	.word	0x00030248

000d5504 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <os_thread_cleanup+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	695b      	ldr	r3, [r3, #20]
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030248 	.word	0x00030248

000d5514 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <os_mutex_create+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030248 	.word	0x00030248

000d5524 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <os_mutex_recursive_create+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030248 	.word	0x00030248

000d5534 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <os_mutex_recursive_lock+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	00030248 	.word	0x00030248

000d5544 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <os_mutex_recursive_unlock+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	00030248 	.word	0x00030248

000d5554 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <os_thread_exit+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	00030248 	.word	0x00030248

000d5564 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <inet_inet_ntop+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	695b      	ldr	r3, [r3, #20]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	00030264 	.word	0x00030264

000d5574 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <inet_htonl+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	6a1b      	ldr	r3, [r3, #32]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	00030264 	.word	0x00030264

000d5584 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <inet_htons+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	00030264 	.word	0x00030264

000d5594 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <HAL_USART_Init+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	681b      	ldr	r3, [r3, #0]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	0003023c 	.word	0x0003023c

000d55a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <HAL_USART_Write_Data+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	68db      	ldr	r3, [r3, #12]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	0003023c 	.word	0x0003023c

000d55b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <HAL_USART_Available_Data+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	691b      	ldr	r3, [r3, #16]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	0003023c 	.word	0x0003023c

000d55c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <HAL_USART_Read_Data+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	695b      	ldr	r3, [r3, #20]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	0003023c 	.word	0x0003023c

000d55d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <HAL_USART_Peek_Data+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	699b      	ldr	r3, [r3, #24]
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	0003023c 	.word	0x0003023c

000d55e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <HAL_USART_Flush_Data+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	69db      	ldr	r3, [r3, #28]
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	0003023c 	.word	0x0003023c

000d55f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <HAL_USART_Is_Enabled+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	6a1b      	ldr	r3, [r3, #32]
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	0003023c 	.word	0x0003023c

000d5604 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <HAL_USART_Available_Data_For_Write+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	0003023c 	.word	0x0003023c

000d5614 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <HAL_USART_BeginConfig+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	0003023c 	.word	0x0003023c

000d5624 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <HAL_I2C_Begin+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	68db      	ldr	r3, [r3, #12]
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030228 	.word	0x00030228

000d5634 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <HAL_I2C_Request_Data+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	695b      	ldr	r3, [r3, #20]
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030228 	.word	0x00030228

000d5644 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <HAL_I2C_Begin_Transmission+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	699b      	ldr	r3, [r3, #24]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030228 	.word	0x00030228

000d5654 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <HAL_I2C_End_Transmission+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	69db      	ldr	r3, [r3, #28]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030228 	.word	0x00030228

000d5664 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <HAL_I2C_Write_Data+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6a1b      	ldr	r3, [r3, #32]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030228 	.word	0x00030228

000d5674 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <HAL_I2C_Available_Data+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030228 	.word	0x00030228

000d5684 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <HAL_I2C_Read_Data+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030228 	.word	0x00030228

000d5694 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <HAL_I2C_Peek_Data+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030228 	.word	0x00030228

000d56a4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <HAL_I2C_Flush_Data+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030228 	.word	0x00030228

000d56b4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <HAL_I2C_Is_Enabled+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030228 	.word	0x00030228

000d56c4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_I2C_Init+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	00030228 	.word	0x00030228

000d56d4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <sock_setsockopt+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	699b      	ldr	r3, [r3, #24]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	00030238 	.word	0x00030238

000d56e4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <sock_close+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	69db      	ldr	r3, [r3, #28]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030238 	.word	0x00030238

000d56f4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <sock_connect+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	6a1b      	ldr	r3, [r3, #32]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030238 	.word	0x00030238

000d5704 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <sock_recv+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030238 	.word	0x00030238

000d5714 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <sock_send+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030238 	.word	0x00030238

000d5724 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <sock_socket+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030238 	.word	0x00030238

000d5734 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <HAL_USB_USART_Init+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	681b      	ldr	r3, [r3, #0]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	0003024c 	.word	0x0003024c

000d5744 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <HAL_USB_USART_Begin+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	685b      	ldr	r3, [r3, #4]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	0003024c 	.word	0x0003024c

000d5754 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <HAL_USB_USART_Available_Data+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	691b      	ldr	r3, [r3, #16]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	0003024c 	.word	0x0003024c

000d5764 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	695b      	ldr	r3, [r3, #20]
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	0003024c 	.word	0x0003024c

000d5774 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <HAL_USB_USART_Receive_Data+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	699b      	ldr	r3, [r3, #24]
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	0003024c 	.word	0x0003024c

000d5784 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <HAL_USB_USART_Send_Data+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	69db      	ldr	r3, [r3, #28]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	0003024c 	.word	0x0003024c

000d5794 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <HAL_USB_USART_Flush_Data+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6a1b      	ldr	r3, [r3, #32]
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	0003024c 	.word	0x0003024c

000d57a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <panic_+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	00030260 	.word	0x00030260

000d57b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <log_message+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	00030260 	.word	0x00030260

000d57c4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <system_mode+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	681b      	ldr	r3, [r3, #0]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	00030220 	.word	0x00030220

000d57d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <set_system_mode+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	685b      	ldr	r3, [r3, #4]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	00030220 	.word	0x00030220

000d57e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <system_delay_ms+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	695b      	ldr	r3, [r3, #20]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	00030220 	.word	0x00030220

000d57f4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <system_thread_set_state+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	00030220 	.word	0x00030220

000d5804 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <application_thread_current+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	00030220 	.word	0x00030220

000d5814 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5814:	b508      	push	{r3, lr}
   d5816:	4b02      	ldr	r3, [pc, #8]	; (d5820 <application_thread_invoke+0xc>)
   d5818:	681b      	ldr	r3, [r3, #0]
   d581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d581c:	9301      	str	r3, [sp, #4]
   d581e:	bd08      	pop	{r3, pc}
   d5820:	00030220 	.word	0x00030220

000d5824 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5824:	b508      	push	{r3, lr}
   d5826:	4b02      	ldr	r3, [pc, #8]	; (d5830 <system_thread_get_state+0xc>)
   d5828:	681b      	ldr	r3, [r3, #0]
   d582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d582c:	9301      	str	r3, [sp, #4]
   d582e:	bd08      	pop	{r3, pc}
   d5830:	00030220 	.word	0x00030220

000d5834 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5834:	b508      	push	{r3, lr}
   d5836:	4b03      	ldr	r3, [pc, #12]	; (d5844 <system_ctrl_set_app_request_handler+0x10>)
   d5838:	681b      	ldr	r3, [r3, #0]
   d583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d583e:	9301      	str	r3, [sp, #4]
   d5840:	bd08      	pop	{r3, pc}
   d5842:	0000      	.short	0x0000
   d5844:	00030220 	.word	0x00030220

000d5848 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b03      	ldr	r3, [pc, #12]	; (d5858 <system_ctrl_set_result+0x10>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5852:	9301      	str	r3, [sp, #4]
   d5854:	bd08      	pop	{r3, pc}
   d5856:	0000      	.short	0x0000
   d5858:	00030220 	.word	0x00030220

000d585c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <network_connect+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	685b      	ldr	r3, [r3, #4]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030240 	.word	0x00030240

000d586c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <network_connecting+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	689b      	ldr	r3, [r3, #8]
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030240 	.word	0x00030240

000d587c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <network_disconnect+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	68db      	ldr	r3, [r3, #12]
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030240 	.word	0x00030240

000d588c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <network_ready+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	691b      	ldr	r3, [r3, #16]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030240 	.word	0x00030240

000d589c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <network_on+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	695b      	ldr	r3, [r3, #20]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030240 	.word	0x00030240

000d58ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <network_off+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	699b      	ldr	r3, [r3, #24]
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030240 	.word	0x00030240

000d58bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <network_listen+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	69db      	ldr	r3, [r3, #28]
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030240 	.word	0x00030240

000d58cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <network_listening+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	6a1b      	ldr	r3, [r3, #32]
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030240 	.word	0x00030240

000d58dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <network_set_listen_timeout+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030240 	.word	0x00030240

000d58ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <network_get_listen_timeout+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030240 	.word	0x00030240

000d58fc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <spark_process+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	689b      	ldr	r3, [r3, #8]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030244 	.word	0x00030244

000d590c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <spark_cloud_flag_connected+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	695b      	ldr	r3, [r3, #20]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030244 	.word	0x00030244

000d591c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <spark_send_event+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	6a1b      	ldr	r3, [r3, #32]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030244 	.word	0x00030244

000d592c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <spark_subscribe+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030244 	.word	0x00030244

000d593c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <spark_sync_time_pending+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030244 	.word	0x00030244

000d594c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030244 	.word	0x00030244

000d595c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <malloc+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	681b      	ldr	r3, [r3, #0]
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	0003021c 	.word	0x0003021c

000d596c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <free+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	685b      	ldr	r3, [r3, #4]
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	0003021c 	.word	0x0003021c

000d597c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <realloc+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	689b      	ldr	r3, [r3, #8]
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003021c 	.word	0x0003021c

000d598c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <sprintf+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	68db      	ldr	r3, [r3, #12]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003021c 	.word	0x0003021c

000d599c <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <sscanf+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	695b      	ldr	r3, [r3, #20]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	0003021c 	.word	0x0003021c

000d59ac <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <siscanf+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	699b      	ldr	r3, [r3, #24]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003021c 	.word	0x0003021c

000d59bc <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <vsnprintf+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003021c 	.word	0x0003021c

000d59cc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <abort+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003021c 	.word	0x0003021c

000d59dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <_malloc_r+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003021c 	.word	0x0003021c

000d59ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <__errno+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003021c 	.word	0x0003021c

000d59fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59fc:	2200      	movs	r2, #0
   d59fe:	4611      	mov	r1, r2
   d5a00:	6840      	ldr	r0, [r0, #4]
   d5a02:	f7ff bf63 	b.w	d58cc <network_listening>

000d5a06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a06:	2200      	movs	r2, #0
   d5a08:	4611      	mov	r1, r2
   d5a0a:	6840      	ldr	r0, [r0, #4]
   d5a0c:	f7ff bf6e 	b.w	d58ec <network_get_listen_timeout>

000d5a10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a10:	2200      	movs	r2, #0
   d5a12:	6840      	ldr	r0, [r0, #4]
   d5a14:	f7ff bf62 	b.w	d58dc <network_set_listen_timeout>

000d5a18 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a18:	2200      	movs	r2, #0
   d5a1a:	f081 0101 	eor.w	r1, r1, #1
   d5a1e:	6840      	ldr	r0, [r0, #4]
   d5a20:	f7ff bf4c 	b.w	d58bc <network_listen>

000d5a24 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5a24:	2300      	movs	r3, #0
   d5a26:	461a      	mov	r2, r3
   d5a28:	4619      	mov	r1, r3
   d5a2a:	6840      	ldr	r0, [r0, #4]
   d5a2c:	f7ff bf3e 	b.w	d58ac <network_off>

000d5a30 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a30:	2300      	movs	r3, #0
   d5a32:	461a      	mov	r2, r3
   d5a34:	4619      	mov	r1, r3
   d5a36:	6840      	ldr	r0, [r0, #4]
   d5a38:	f7ff bf30 	b.w	d589c <network_on>

000d5a3c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a3c:	2200      	movs	r2, #0
   d5a3e:	4611      	mov	r1, r2
   d5a40:	6840      	ldr	r0, [r0, #4]
   d5a42:	f7ff bf23 	b.w	d588c <network_ready>

000d5a46 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a46:	2200      	movs	r2, #0
   d5a48:	4611      	mov	r1, r2
   d5a4a:	6840      	ldr	r0, [r0, #4]
   d5a4c:	f7ff bf0e 	b.w	d586c <network_connecting>

000d5a50 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a50:	2200      	movs	r2, #0
   d5a52:	2102      	movs	r1, #2
   d5a54:	6840      	ldr	r0, [r0, #4]
   d5a56:	f7ff bf11 	b.w	d587c <network_disconnect>

000d5a5a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a5a:	2300      	movs	r3, #0
   d5a5c:	461a      	mov	r2, r3
   d5a5e:	6840      	ldr	r0, [r0, #4]
   d5a60:	f7ff befc 	b.w	d585c <network_connect>

000d5a64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a64:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a66:	2203      	movs	r2, #3
   d5a68:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a6a:	4a02      	ldr	r2, [pc, #8]	; (d5a74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a6c:	601a      	str	r2, [r3, #0]
   d5a6e:	4770      	bx	lr
   d5a70:	2003e34c 	.word	0x2003e34c
   d5a74:	000d982c 	.word	0x000d982c

000d5a78 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5a78:	4770      	bx	lr

000d5a7a <_ZN8SPIClassD0Ev>:
   d5a7a:	b510      	push	{r4, lr}
   d5a7c:	2110      	movs	r1, #16
   d5a7e:	4604      	mov	r4, r0
   d5a80:	f002 fa06 	bl	d7e90 <_ZdlPvj>
   d5a84:	4620      	mov	r0, r4
   d5a86:	bd10      	pop	{r4, pc}

000d5a88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a88:	b570      	push	{r4, r5, r6, lr}
   d5a8a:	4b08      	ldr	r3, [pc, #32]	; (d5aac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5a8c:	6003      	str	r3, [r0, #0]
   d5a8e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5a90:	2500      	movs	r5, #0
   d5a92:	460e      	mov	r6, r1
   d5a94:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5a98:	f7ff fd3c 	bl	d5514 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5a9c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5a9e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5aa0:	f7ff fca8 	bl	d53f4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5aa4:	60a5      	str	r5, [r4, #8]
}
   d5aa6:	4620      	mov	r0, r4
   d5aa8:	bd70      	pop	{r4, r5, r6, pc}
   d5aaa:	bf00      	nop
   d5aac:	000d9860 	.word	0x000d9860

000d5ab0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5ab0:	7900      	ldrb	r0, [r0, #4]
   d5ab2:	f7ff bca7 	b.w	d5404 <HAL_SPI_Is_Enabled>
	...

000d5ab8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5ab8:	4b04      	ldr	r3, [pc, #16]	; (d5acc <_GLOBAL__sub_I_System+0x14>)
   d5aba:	2000      	movs	r0, #0
   d5abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5ac0:	7018      	strb	r0, [r3, #0]
   d5ac2:	8058      	strh	r0, [r3, #2]
   d5ac4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ac6:	f7ff be85 	b.w	d57d4 <set_system_mode>
   d5aca:	bf00      	nop
   d5acc:	2003e354 	.word	0x2003e354

000d5ad0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5ad0:	b510      	push	{r4, lr}
   d5ad2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5ad4:	f003 f9d1 	bl	d8e7a <strlen>
   d5ad8:	3801      	subs	r0, #1
   d5ada:	1823      	adds	r3, r4, r0
   d5adc:	4620      	mov	r0, r4
	while(i<j){
   d5ade:	4298      	cmp	r0, r3
   d5ae0:	d206      	bcs.n	d5af0 <_Z11str_reversePc+0x20>
		c = *i;
   d5ae2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5ae4:	7819      	ldrb	r1, [r3, #0]
   d5ae6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5aea:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d5aee:	e7f6      	b.n	d5ade <_Z11str_reversePc+0xe>
   d5af0:	bd10      	pop	{r4, pc}

000d5af2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5af2:	b570      	push	{r4, r5, r6, lr}
   d5af4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5af6:	1e91      	subs	r1, r2, #2
   d5af8:	2922      	cmp	r1, #34	; 0x22
   d5afa:	d820      	bhi.n	d5b3e <ultoa+0x4c>
   d5afc:	4625      	mov	r5, r4
   d5afe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5b00:	b910      	cbnz	r0, d5b08 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5b02:	4423      	add	r3, r4
            *ptr++ = '0';
   d5b04:	2230      	movs	r2, #48	; 0x30
   d5b06:	e00e      	b.n	d5b26 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5b08:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5b0c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5b10:	b2c1      	uxtb	r1, r0
   d5b12:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d5b16:	2809      	cmp	r0, #9
                *ptr += '0';
   d5b18:	bf94      	ite	ls
   d5b1a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5b1c:	3157      	addhi	r1, #87	; 0x57
   d5b1e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5b22:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5b24:	e7eb      	b.n	d5afe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5b26:	4299      	cmp	r1, r3
   d5b28:	d202      	bcs.n	d5b30 <ultoa+0x3e>
            *ptr++ = '0';
   d5b2a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5b2e:	e7fa      	b.n	d5b26 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5b30:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5b32:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5b34:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d5b36:	f7ff ffcb 	bl	d5ad0 <_Z11str_reversePc>
	return buffer;
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5b3e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5b40:	bd70      	pop	{r4, r5, r6, pc}

000d5b42 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5b42:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5b44:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5b46:	460c      	mov	r4, r1
   d5b48:	4615      	mov	r5, r2
	if(a<0){
   d5b4a:	da0b      	bge.n	d5b64 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5b50:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5b54:	bf14      	ite	ne
   d5b56:	4258      	negne	r0, r3
   d5b58:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5b5a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d5b5c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d5b5e:	462a      	mov	r2, r5
   d5b60:	4419      	add	r1, r3
   d5b62:	e000      	b.n	d5b66 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d5b64:	2301      	movs	r3, #1
   d5b66:	f7ff ffc4 	bl	d5af2 <ultoa>
	}
	return buffer;
}
   d5b6a:	4620      	mov	r0, r4
   d5b6c:	bd38      	pop	{r3, r4, r5, pc}

000d5b6e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5b6e:	b510      	push	{r4, lr}
   d5b70:	4604      	mov	r4, r0
{
	free(buffer);
   d5b72:	6800      	ldr	r0, [r0, #0]
   d5b74:	f7ff fefa 	bl	d596c <free>
}
   d5b78:	4620      	mov	r0, r4
   d5b7a:	bd10      	pop	{r4, pc}

000d5b7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5b7c:	b510      	push	{r4, lr}
   d5b7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5b80:	6800      	ldr	r0, [r0, #0]
   d5b82:	b108      	cbz	r0, d5b88 <_ZN6String10invalidateEv+0xc>
   d5b84:	f7ff fef2 	bl	d596c <free>
	buffer = NULL;
   d5b88:	2300      	movs	r3, #0
   d5b8a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5b8c:	60a3      	str	r3, [r4, #8]
   d5b8e:	6063      	str	r3, [r4, #4]
   d5b90:	bd10      	pop	{r4, pc}

000d5b92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5b92:	b538      	push	{r3, r4, r5, lr}
   d5b94:	4604      	mov	r4, r0
   d5b96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5b98:	6800      	ldr	r0, [r0, #0]
   d5b9a:	3101      	adds	r1, #1
   d5b9c:	f7ff feee 	bl	d597c <realloc>
	if (newbuffer) {
   d5ba0:	b110      	cbz	r0, d5ba8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5ba2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5ba6:	2001      	movs	r0, #1
	}
	return 0;
}
   d5ba8:	bd38      	pop	{r3, r4, r5, pc}

000d5baa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5baa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5bac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5bae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5bb0:	b113      	cbz	r3, d5bb8 <_ZN6String7reserveEj+0xe>
   d5bb2:	6843      	ldr	r3, [r0, #4]
   d5bb4:	428b      	cmp	r3, r1
   d5bb6:	d207      	bcs.n	d5bc8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5bb8:	4620      	mov	r0, r4
   d5bba:	f7ff ffea 	bl	d5b92 <_ZN6String12changeBufferEj>
   d5bbe:	b120      	cbz	r0, d5bca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5bc0:	68a3      	ldr	r3, [r4, #8]
   d5bc2:	b90b      	cbnz	r3, d5bc8 <_ZN6String7reserveEj+0x1e>
   d5bc4:	6822      	ldr	r2, [r4, #0]
   d5bc6:	7013      	strb	r3, [r2, #0]
   d5bc8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5bca:	bd10      	pop	{r4, pc}

000d5bcc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5bcc:	b570      	push	{r4, r5, r6, lr}
   d5bce:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5bd0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5bd2:	4604      	mov	r4, r0
   d5bd4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5bd6:	f7ff ffe8 	bl	d5baa <_ZN6String7reserveEj>
   d5bda:	b918      	cbnz	r0, d5be4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ffcd 	bl	d5b7c <_ZN6String10invalidateEv>
		return *this;
   d5be2:	e009      	b.n	d5bf8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5be4:	462a      	mov	r2, r5
   d5be6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5be8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5bea:	6820      	ldr	r0, [r4, #0]
   d5bec:	f003 f8c1 	bl	d8d72 <memcpy>
	buffer[len] = 0;
   d5bf0:	6822      	ldr	r2, [r4, #0]
   d5bf2:	68a3      	ldr	r3, [r4, #8]
   d5bf4:	2100      	movs	r1, #0
   d5bf6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd70      	pop	{r4, r5, r6, pc}

000d5bfc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5bfc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5bfe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c04:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c08:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5c0a:	460d      	mov	r5, r1
   d5c0c:	b139      	cbz	r1, d5c1e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5c0e:	4608      	mov	r0, r1
   d5c10:	f003 f933 	bl	d8e7a <strlen>
   d5c14:	4629      	mov	r1, r5
   d5c16:	4602      	mov	r2, r0
   d5c18:	4620      	mov	r0, r4
   d5c1a:	f7ff ffd7 	bl	d5bcc <_ZN6String4copyEPKcj>
}
   d5c1e:	4620      	mov	r0, r4
   d5c20:	bd38      	pop	{r3, r4, r5, pc}

000d5c22 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5c22:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5c24:	b510      	push	{r4, lr}
   d5c26:	460b      	mov	r3, r1
   d5c28:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5c2a:	d007      	beq.n	d5c3c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5c2c:	6809      	ldr	r1, [r1, #0]
   d5c2e:	b119      	cbz	r1, d5c38 <_ZN6StringaSERKS_+0x16>
   d5c30:	689a      	ldr	r2, [r3, #8]
   d5c32:	f7ff ffcb 	bl	d5bcc <_ZN6String4copyEPKcj>
   d5c36:	e001      	b.n	d5c3c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5c38:	f7ff ffa0 	bl	d5b7c <_ZN6String10invalidateEv>

	return *this;
}
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	bd10      	pop	{r4, pc}

000d5c40 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5c40:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c42:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5c44:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c46:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c48:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c4a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c4c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5c4e:	f7ff ffe8 	bl	d5c22 <_ZN6StringaSERKS_>
}
   d5c52:	4620      	mov	r0, r4
   d5c54:	bd10      	pop	{r4, pc}

000d5c56 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5c56:	b538      	push	{r3, r4, r5, lr}
   d5c58:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5c5a:	460c      	mov	r4, r1
   d5c5c:	b141      	cbz	r1, d5c70 <_ZN6StringaSEPKc+0x1a>
   d5c5e:	4608      	mov	r0, r1
   d5c60:	f003 f90b 	bl	d8e7a <strlen>
   d5c64:	4621      	mov	r1, r4
   d5c66:	4602      	mov	r2, r0
   d5c68:	4628      	mov	r0, r5
   d5c6a:	f7ff ffaf 	bl	d5bcc <_ZN6String4copyEPKcj>
   d5c6e:	e001      	b.n	d5c74 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5c70:	f7ff ff84 	bl	d5b7c <_ZN6String10invalidateEv>

	return *this;
}
   d5c74:	4628      	mov	r0, r5
   d5c76:	bd38      	pop	{r3, r4, r5, pc}

000d5c78 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5c78:	b510      	push	{r4, lr}
   d5c7a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c7c:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5c7e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c80:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5c82:	6063      	str	r3, [r4, #4]
	len = 0;
   d5c84:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5c86:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5c88:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d5c8a:	a901      	add	r1, sp, #4
   d5c8c:	f7ff ff59 	bl	d5b42 <itoa>
	*this = buf;
   d5c90:	a901      	add	r1, sp, #4
   d5c92:	4620      	mov	r0, r4
   d5c94:	f7ff ffdf 	bl	d5c56 <_ZN6StringaSEPKc>
}
   d5c98:	4620      	mov	r0, r4
   d5c9a:	b00a      	add	sp, #40	; 0x28
   d5c9c:	bd10      	pop	{r4, pc}

000d5c9e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5c9e:	b570      	push	{r4, r5, r6, lr}
   d5ca0:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5ca2:	460e      	mov	r6, r1
   d5ca4:	b909      	cbnz	r1, d5caa <_ZN6String6concatEPKcj+0xc>
   d5ca6:	2000      	movs	r0, #0
   d5ca8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5caa:	b16a      	cbz	r2, d5cc8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5cac:	6883      	ldr	r3, [r0, #8]
   d5cae:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5cb0:	4629      	mov	r1, r5
   d5cb2:	f7ff ff7a 	bl	d5baa <_ZN6String7reserveEj>
   d5cb6:	2800      	cmp	r0, #0
   d5cb8:	d0f5      	beq.n	d5ca6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5cba:	6820      	ldr	r0, [r4, #0]
   d5cbc:	68a3      	ldr	r3, [r4, #8]
   d5cbe:	4631      	mov	r1, r6
   d5cc0:	4418      	add	r0, r3
   d5cc2:	f003 f8b7 	bl	d8e34 <strcpy>
	len = newlen;
   d5cc6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5cc8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5cca:	bd70      	pop	{r4, r5, r6, pc}

000d5ccc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5ccc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5cce:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d5cd0:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d5cd4:	2201      	movs	r2, #1
   d5cd6:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5cd8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5cdc:	f7ff ffdf 	bl	d5c9e <_ZN6String6concatEPKcj>
}
   d5ce0:	b003      	add	sp, #12
   d5ce2:	f85d fb04 	ldr.w	pc, [sp], #4

000d5ce6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5ce6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5ce8:	688a      	ldr	r2, [r1, #8]
   d5cea:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5cec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5cee:	f7ff ffd6 	bl	d5c9e <_ZN6String6concatEPKcj>
   d5cf2:	b910      	cbnz	r0, d5cfa <_ZplRK15StringSumHelperRK6String+0x14>
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	f7ff ff41 	bl	d5b7c <_ZN6String10invalidateEv>
	return a;
}
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	bd10      	pop	{r4, pc}

000d5cfe <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5cfe:	b538      	push	{r3, r4, r5, lr}
   d5d00:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5d02:	460d      	mov	r5, r1
   d5d04:	b141      	cbz	r1, d5d18 <_ZplRK15StringSumHelperPKc+0x1a>
   d5d06:	4608      	mov	r0, r1
   d5d08:	f003 f8b7 	bl	d8e7a <strlen>
   d5d0c:	4629      	mov	r1, r5
   d5d0e:	4602      	mov	r2, r0
   d5d10:	4620      	mov	r0, r4
   d5d12:	f7ff ffc4 	bl	d5c9e <_ZN6String6concatEPKcj>
   d5d16:	b910      	cbnz	r0, d5d1e <_ZplRK15StringSumHelperPKc+0x20>
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff ff2f 	bl	d5b7c <_ZN6String10invalidateEv>
	return a;
}
   d5d1e:	4620      	mov	r0, r4
   d5d20:	bd38      	pop	{r3, r4, r5, pc}

000d5d22 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5d22:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d24:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5d26:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d28:	b912      	cbnz	r2, d5d30 <_ZNK6String6equalsEPKc+0xe>
   d5d2a:	b919      	cbnz	r1, d5d34 <_ZNK6String6equalsEPKc+0x12>
   d5d2c:	2001      	movs	r0, #1
   d5d2e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5d30:	b911      	cbnz	r1, d5d38 <_ZNK6String6equalsEPKc+0x16>
   d5d32:	6803      	ldr	r3, [r0, #0]
   d5d34:	7818      	ldrb	r0, [r3, #0]
   d5d36:	e002      	b.n	d5d3e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5d38:	6800      	ldr	r0, [r0, #0]
   d5d3a:	f003 f871 	bl	d8e20 <strcmp>
   d5d3e:	fab0 f080 	clz	r0, r0
   d5d42:	0940      	lsrs	r0, r0, #5
}
   d5d44:	bd08      	pop	{r3, pc}
	...

000d5d48 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d5d48:	b40e      	push	{r1, r2, r3}
   d5d4a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d5d4c:	ac09      	add	r4, sp, #36	; 0x24
   d5d4e:	4605      	mov	r5, r0
   d5d50:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d5d54:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5d56:	4623      	mov	r3, r4
   d5d58:	463a      	mov	r2, r7
   d5d5a:	2105      	movs	r1, #5
   d5d5c:	a802      	add	r0, sp, #8
   d5d5e:	f7ff fe2d 	bl	d59bc <vsnprintf>
    va_end(marker);

    String result;
   d5d62:	490c      	ldr	r1, [pc, #48]	; (d5d94 <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d5d64:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d5d66:	4628      	mov	r0, r5
   d5d68:	f7ff ff48 	bl	d5bfc <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d5d6c:	4631      	mov	r1, r6
   d5d6e:	4628      	mov	r0, r5
   d5d70:	f7ff ff1b 	bl	d5baa <_ZN6String7reserveEj>
    if (result.buffer) {
   d5d74:	6828      	ldr	r0, [r5, #0]
   d5d76:	b130      	cbz	r0, d5d86 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5d78:	4623      	mov	r3, r4
   d5d7a:	463a      	mov	r2, r7
   d5d7c:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d5d7e:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d5d80:	f7ff fe1c 	bl	d59bc <vsnprintf>
        va_end(marker);
        result.len = n;
   d5d84:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d5d86:	4628      	mov	r0, r5
   d5d88:	b004      	add	sp, #16
   d5d8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5d8e:	b003      	add	sp, #12
   d5d90:	4770      	bx	lr
   d5d92:	bf00      	nop
   d5d94:	000d98a4 	.word	0x000d98a4

000d5d98 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5d98:	4770      	bx	lr

000d5d9a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5d9a:	2000      	movs	r0, #0
   d5d9c:	4770      	bx	lr

000d5d9e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5d9e:	b510      	push	{r4, lr}
   d5da0:	2114      	movs	r1, #20
   d5da2:	4604      	mov	r4, r0
   d5da4:	f002 f874 	bl	d7e90 <_ZdlPvj>
   d5da8:	4620      	mov	r0, r4
   d5daa:	bd10      	pop	{r4, pc}

000d5dac <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5dac:	f7fe b975 	b.w	d409a <_ZdlPv>

000d5db0 <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d5db0:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d5db2:	7982      	ldrb	r2, [r0, #6]
   d5db4:	798b      	ldrb	r3, [r1, #6]
   d5db6:	429a      	cmp	r2, r3
   d5db8:	d106      	bne.n	d5dc8 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5dba:	2206      	movs	r2, #6
   d5dbc:	f002 ffca 	bl	d8d54 <memcmp>
   d5dc0:	fab0 f080 	clz	r0, r0
   d5dc4:	0940      	lsrs	r0, r0, #5
   d5dc6:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d5dc8:	2000      	movs	r0, #0
    }
   d5dca:	bd08      	pop	{r3, pc}

000d5dcc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5dcc:	b510      	push	{r4, lr}
            locked_(false) {
   d5dce:	2300      	movs	r3, #0
   d5dd0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5dd2:	4b04      	ldr	r3, [pc, #16]	; (d5de4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	6818      	ldr	r0, [r3, #0]
   d5dd8:	f7ff fbac 	bl	d5534 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5ddc:	2301      	movs	r3, #1
   d5dde:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5de0:	4620      	mov	r0, r4
   d5de2:	bd10      	pop	{r4, pc}
   d5de4:	2003e380 	.word	0x2003e380

000d5de8 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5de8:	b510      	push	{r4, lr}
        if (locked_) {
   d5dea:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5dec:	4604      	mov	r4, r0
        if (locked_) {
   d5dee:	b11b      	cbz	r3, d5df8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5df0:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5df2:	6818      	ldr	r0, [r3, #0]
   d5df4:	f7ff fba6 	bl	d5544 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5df8:	4620      	mov	r0, r4
   d5dfa:	bd10      	pop	{r4, pc}
   d5dfc:	2003e380 	.word	0x2003e380

000d5e00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5e02:	b18b      	cbz	r3, d5e28 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5e04:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5e06:	1ce5      	adds	r5, r4, #3
   d5e08:	428d      	cmp	r5, r1
   d5e0a:	d80f      	bhi.n	d5e2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5e0c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5e0e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5e10:	5d87      	ldrb	r7, [r0, r6]
   d5e12:	4297      	cmp	r7, r2
   d5e14:	d105      	bne.n	d5e22 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5e16:	442e      	add	r6, r5
   d5e18:	42b1      	cmp	r1, r6
   d5e1a:	d307      	bcc.n	d5e2c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5e1c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5e1e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5e22:	3501      	adds	r5, #1
   d5e24:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5e26:	e7ee      	b.n	d5e06 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5e28:	4618      	mov	r0, r3
   d5e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5e2c:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5e30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5e34:	4604      	mov	r4, r0
   d5e36:	460e      	mov	r6, r1
   d5e38:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5e3a:	4617      	mov	r7, r2
   d5e3c:	2a00      	cmp	r2, #0
   d5e3e:	d03a      	beq.n	d5eb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5e40:	460a      	mov	r2, r1
   d5e42:	ab01      	add	r3, sp, #4
   d5e44:	6a01      	ldr	r1, [r0, #32]
   d5e46:	f7ff ffdb 	bl	d5e00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5e4a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5e4e:	6a22      	ldr	r2, [r4, #32]
   d5e50:	bb03      	cbnz	r3, d5e94 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5e52:	b1f8      	cbz	r0, d5e94 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5e54:	1c96      	adds	r6, r2, #2
   d5e56:	442e      	add	r6, r5
   d5e58:	1a36      	subs	r6, r6, r0
   d5e5a:	2e1f      	cmp	r6, #31
   d5e5c:	d82b      	bhi.n	d5eb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5e5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5e62:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5e66:	ebc8 0202 	rsb	r2, r8, r2
   d5e6a:	1a12      	subs	r2, r2, r0
   d5e6c:	eb00 0108 	add.w	r1, r0, r8
   d5e70:	eb05 0009 	add.w	r0, r5, r9
   d5e74:	b292      	uxth	r2, r2
   d5e76:	4421      	add	r1, r4
   d5e78:	4420      	add	r0, r4
   d5e7a:	f002 ff85 	bl	d8d88 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5e7e:	1c6b      	adds	r3, r5, #1
   d5e80:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5e84:	462a      	mov	r2, r5
   d5e86:	4639      	mov	r1, r7
   d5e88:	eb04 0009 	add.w	r0, r4, r9
   d5e8c:	f002 ff71 	bl	d8d72 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5e90:	6226      	str	r6, [r4, #32]
   d5e92:	e010      	b.n	d5eb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5e94:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5e96:	182b      	adds	r3, r5, r0
   d5e98:	2b1f      	cmp	r3, #31
   d5e9a:	d80c      	bhi.n	d5eb6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5e9c:	1c6b      	adds	r3, r5, #1
   d5e9e:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ea0:	4422      	add	r2, r4
   d5ea2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5ea4:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ea6:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5ea8:	4420      	add	r0, r4
   d5eaa:	462a      	mov	r2, r5
   d5eac:	f002 ff61 	bl	d8d72 <memcpy>
        selfLen_ += len;
   d5eb0:	6a22      	ldr	r2, [r4, #32]
   d5eb2:	442a      	add	r2, r5
   d5eb4:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5eb6:	6a20      	ldr	r0, [r4, #32]
}
   d5eb8:	b003      	add	sp, #12
   d5eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ebe <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5ebe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5ec0:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5ec2:	4603      	mov	r3, r0
   d5ec4:	f100 021f 	add.w	r2, r0, #31
   d5ec8:	2000      	movs	r0, #0
   d5eca:	f803 0b01 	strb.w	r0, [r3], #1
   d5ece:	4293      	cmp	r3, r2
   d5ed0:	f04f 0100 	mov.w	r1, #0
   d5ed4:	d1f9      	bne.n	d5eca <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5ed6:	aa04      	add	r2, sp, #16
   d5ed8:	2306      	movs	r3, #6
   d5eda:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5ede:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5ee0:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5ee2:	9100      	str	r1, [sp, #0]
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	4619      	mov	r1, r3
   d5ee8:	f7ff ffa2 	bl	d5e30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5eec:	4620      	mov	r0, r4
   d5eee:	b004      	add	sp, #16
   d5ef0:	bd10      	pop	{r4, pc}

000d5ef2 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d5ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ef4:	4605      	mov	r5, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d5ef6:	4608      	mov	r0, r1
        selfLen_ += len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::appendLocalName(const char* name) {
   d5ef8:	460c      	mov	r4, r1
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strlen(name), false);
   d5efa:	f002 ffbe 	bl	d8e7a <strlen>
   d5efe:	2300      	movs	r3, #0
   d5f00:	9300      	str	r3, [sp, #0]
   d5f02:	4622      	mov	r2, r4
   d5f04:	4603      	mov	r3, r0
   d5f06:	2109      	movs	r1, #9
   d5f08:	4628      	mov	r0, r5
   d5f0a:	f7ff ff91 	bl	d5e30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5f0e:	b003      	add	sp, #12
   d5f10:	bd30      	pop	{r4, r5, pc}

000d5f12 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5f14:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5f16:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5f18:	ab01      	add	r3, sp, #4
   d5f1a:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5f1c:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5f1e:	f7ff ff6f 	bl	d5e00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5f22:	4605      	mov	r5, r0
   d5f24:	b178      	cbz	r0, d5f46 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5f26:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5f28:	6a22      	ldr	r2, [r4, #32]
   d5f2a:	1829      	adds	r1, r5, r0
   d5f2c:	1a12      	subs	r2, r2, r0
   d5f2e:	1b52      	subs	r2, r2, r5
   d5f30:	4421      	add	r1, r4
   d5f32:	4420      	add	r0, r4
   d5f34:	f002 ff1d 	bl	d8d72 <memcpy>
        selfLen_ -= len;
   d5f38:	6a23      	ldr	r3, [r4, #32]
   d5f3a:	1b5d      	subs	r5, r3, r5
   d5f3c:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5f3e:	4631      	mov	r1, r6
   d5f40:	4620      	mov	r0, r4
   d5f42:	f7ff ffe6 	bl	d5f12 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5f46:	b002      	add	sp, #8
   d5f48:	bd70      	pop	{r4, r5, r6, pc}

000d5f4a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d5f4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5f4e:	e890 0050 	ldmia.w	r0, {r4, r6}
   d5f52:	460d      	mov	r5, r1
   d5f54:	4617      	mov	r7, r2
   d5f56:	4698      	mov	r8, r3
   d5f58:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d5f5c:	42a6      	cmp	r6, r4
   d5f5e:	d033      	beq.n	d5fc8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d5f60:	6823      	ldr	r3, [r4, #0]
   d5f62:	699a      	ldr	r2, [r3, #24]
   d5f64:	69d9      	ldr	r1, [r3, #28]
   d5f66:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d5f6a:	4291      	cmp	r1, r2
   d5f6c:	d01b      	beq.n	d5fa6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d5f6e:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d5f70:	b19b      	cbz	r3, d5f9a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d5f72:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d5f76:	42a8      	cmp	r0, r5
   d5f78:	d011      	beq.n	d5f9e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d5f7a:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d5f7e:	42a8      	cmp	r0, r5
   d5f80:	d00d      	beq.n	d5f9e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d5f82:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d5f86:	42a8      	cmp	r0, r5
   d5f88:	d009      	beq.n	d5f9e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d5f8a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d5f8e:	42a8      	cmp	r0, r5
   d5f90:	d005      	beq.n	d5f9e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d5f92:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d5f96:	42a8      	cmp	r0, r5
   d5f98:	d001      	beq.n	d5f9e <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d5f9a:	3208      	adds	r2, #8
   d5f9c:	e7e5      	b.n	d5f6a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d5f9e:	b117      	cbz	r7, d5fa6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d5fa0:	f1b8 0f00 	cmp.w	r8, #0
   d5fa4:	d101      	bne.n	d5faa <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d5fa6:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d5fa8:	e7d8      	b.n	d5f5c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d5faa:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d5fae:	f1b9 0f00 	cmp.w	r9, #0
   d5fb2:	d0f8      	beq.n	d5fa6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d5fb4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d5fb8:	42aa      	cmp	r2, r5
   d5fba:	d1f4      	bne.n	d5fa6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d5fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5fbe:	9a08      	ldr	r2, [sp, #32]
   d5fc0:	4641      	mov	r1, r8
   d5fc2:	4638      	mov	r0, r7
   d5fc4:	47c8      	blx	r9
   d5fc6:	e7ee      	b.n	d5fa6 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d5fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5fcc <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	6800      	ldr	r0, [r0, #0]
   d5fd0:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d5fd2:	8ac2      	ldrh	r2, [r0, #22]
   d5fd4:	8acb      	ldrh	r3, [r1, #22]
   d5fd6:	429a      	cmp	r2, r3
   d5fd8:	d104      	bne.n	d5fe4 <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d5fda:	3101      	adds	r1, #1
   d5fdc:	3001      	adds	r0, #1
   d5fde:	f7ff fee7 	bl	d5db0 <_ZNK8particle10BleAddresseqERKS0_>
   d5fe2:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5fe4:	2000      	movs	r0, #0
}
   d5fe6:	bd08      	pop	{r3, pc}

000d5fe8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5fe8:	4608      	mov	r0, r1
   d5fea:	b909      	cbnz	r1, d5ff0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5fec:	460a      	mov	r2, r1
   d5fee:	e001      	b.n	d5ff4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5ff0:	6a09      	ldr	r1, [r1, #32]
   d5ff2:	2200      	movs	r2, #0
   d5ff4:	f7ff ba4e 	b.w	d5494 <hal_ble_gap_set_advertising_data>

000d5ff8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5ff8:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5ffa:	460c      	mov	r4, r1
   d5ffc:	b911      	cbnz	r1, d6004 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5ffe:	460a      	mov	r2, r1
   d6000:	4608      	mov	r0, r1
   d6002:	e006      	b.n	d6012 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6004:	2101      	movs	r1, #1
   d6006:	4620      	mov	r0, r4
   d6008:	f7ff ff83 	bl	d5f12 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d600c:	6a21      	ldr	r1, [r4, #32]
   d600e:	2200      	movs	r2, #0
   d6010:	4620      	mov	r0, r4
    }
}
   d6012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6016:	f7ff ba45 	b.w	d54a4 <hal_ble_gap_set_scan_response_data>

000d601a <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d601a:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d601c:	a801      	add	r0, sp, #4
   d601e:	f7ff fed5 	bl	d5dcc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d6022:	2000      	movs	r0, #0
   d6024:	f7ff fa46 	bl	d54b4 <hal_ble_gap_start_advertising>
   d6028:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d602a:	a801      	add	r0, sp, #4
   d602c:	f7ff fedc 	bl	d5de8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d6030:	4620      	mov	r0, r4
   d6032:	b002      	add	sp, #8
   d6034:	bd10      	pop	{r4, pc}

000d6036 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6036:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6038:	4605      	mov	r5, r0
   d603a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d603c:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d603e:	4616      	mov	r6, r2
    WiringBleLock lk;
   d6040:	f7ff fec4 	bl	d5dcc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d6044:	4621      	mov	r1, r4
   d6046:	4628      	mov	r0, r5
   d6048:	f7ff ffce 	bl	d5fe8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d604c:	2800      	cmp	r0, #0
   d604e:	db08      	blt.n	d6062 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d6050:	4631      	mov	r1, r6
   d6052:	4628      	mov	r0, r5
   d6054:	f7ff ffd0 	bl	d5ff8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6058:	2800      	cmp	r0, #0
   d605a:	db02      	blt.n	d6062 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d605c:	4628      	mov	r0, r5
   d605e:	f7ff ffdc 	bl	d601a <_ZNK8particle14BleLocalDevice9advertiseEv>
   d6062:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d6064:	a801      	add	r0, sp, #4
   d6066:	f7ff febf 	bl	d5de8 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d606a:	4620      	mov	r0, r4
   d606c:	b002      	add	sp, #8
   d606e:	bd70      	pop	{r4, r5, r6, pc}

000d6070 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d6070:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6072:	6983      	ldr	r3, [r0, #24]
   d6074:	e893 0014 	ldmia.w	r3, {r2, r4}
   d6078:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d607c:	42a2      	cmp	r2, r4
   d607e:	4613      	mov	r3, r2
   d6080:	d007      	beq.n	d6092 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d6082:	681d      	ldr	r5, [r3, #0]
   d6084:	8aed      	ldrh	r5, [r5, #22]
   d6086:	428d      	cmp	r5, r1
   d6088:	f102 0208 	add.w	r2, r2, #8
   d608c:	d1f6      	bne.n	d607c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d608e:	4618      	mov	r0, r3
   d6090:	bd30      	pop	{r4, r5, pc}
   d6092:	69c2      	ldr	r2, [r0, #28]
   d6094:	6813      	ldr	r3, [r2, #0]
   d6096:	6852      	ldr	r2, [r2, #4]
   d6098:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d609c:	429a      	cmp	r2, r3
   d609e:	4618      	mov	r0, r3
   d60a0:	d006      	beq.n	d60b0 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d60a2:	6804      	ldr	r4, [r0, #0]
   d60a4:	8ae4      	ldrh	r4, [r4, #22]
   d60a6:	428c      	cmp	r4, r1
   d60a8:	f103 0308 	add.w	r3, r3, #8
   d60ac:	d1f6      	bne.n	d609c <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d60ae:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d60b0:	2000      	movs	r0, #0
}
   d60b2:	bd30      	pop	{r4, r5, pc}

000d60b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d60b4:	680b      	ldr	r3, [r1, #0]
   d60b6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d60b8:	b113      	cbz	r3, d60c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d60ba:	685a      	ldr	r2, [r3, #4]
   d60bc:	3201      	adds	r2, #1
   d60be:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d60c0:	4770      	bx	lr

000d60c2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60c2:	b510      	push	{r4, lr}
   d60c4:	f851 3b04 	ldr.w	r3, [r1], #4
   d60c8:	4604      	mov	r4, r0
   d60ca:	f840 3b04 	str.w	r3, [r0], #4
   d60ce:	f7ff fff1 	bl	d60b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d60d2:	4620      	mov	r0, r4
   d60d4:	bd10      	pop	{r4, pc}

000d60d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d60d6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d60d8:	6804      	ldr	r4, [r0, #0]
   d60da:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d60dc:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d60de:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d60e2:	42a6      	cmp	r6, r4
   d60e4:	d004      	beq.n	d60f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d60e6:	1d20      	adds	r0, r4, #4
   d60e8:	f7fe fa88 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60ec:	3408      	adds	r4, #8
   d60ee:	e7f8      	b.n	d60e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d60f0:	6828      	ldr	r0, [r5, #0]
   d60f2:	f7ff fc3b 	bl	d596c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d60f6:	4628      	mov	r0, r5
   d60f8:	bd70      	pop	{r4, r5, r6, pc}

000d60fa <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d60fa:	b538      	push	{r3, r4, r5, lr}
   d60fc:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d60fe:	2010      	movs	r0, #16
   d6100:	780d      	ldrb	r5, [r1, #0]
   d6102:	f7fd ffc8 	bl	d4096 <_Znwj>
   d6106:	b120      	cbz	r0, d6112 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6108:	2300      	movs	r3, #0
   d610a:	6003      	str	r3, [r0, #0]
   d610c:	6043      	str	r3, [r0, #4]
   d610e:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d6110:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6112:	6020      	str	r0, [r4, #0]
   d6114:	4620      	mov	r0, r4
   d6116:	bd38      	pop	{r3, r4, r5, pc}

000d6118 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d6118:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d611a:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d611c:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d611e:	b134      	cbz	r4, d612e <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d6120:	4620      	mov	r0, r4
   d6122:	f7ff ffd8 	bl	d60d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6126:	2110      	movs	r1, #16
   d6128:	4620      	mov	r0, r4
   d612a:	f001 feb1 	bl	d7e90 <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d612e:	4628      	mov	r0, r5
   d6130:	bd38      	pop	{r3, r4, r5, pc}

000d6132 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6132:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6134:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d6136:	f104 001c 	add.w	r0, r4, #28
   d613a:	f7ff ffed 	bl	d6118 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d613e:	4620      	mov	r0, r4
   d6140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6144:	f7fd bfa9 	b.w	d409a <_ZdlPv>

000d6148 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d6148:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d614a:	6804      	ldr	r4, [r0, #0]
   d614c:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d614e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6150:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6154:	42a6      	cmp	r6, r4
   d6156:	d004      	beq.n	d6162 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6158:	1d20      	adds	r0, r4, #4
   d615a:	f7fe fa4f 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d615e:	3408      	adds	r4, #8
   d6160:	e7f8      	b.n	d6154 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6162:	2300      	movs	r3, #0
   d6164:	606b      	str	r3, [r5, #4]
   d6166:	bd70      	pop	{r4, r5, r6, pc}

000d6168 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6168:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d616c:	4606      	mov	r6, r0
   d616e:	460c      	mov	r4, r1
   d6170:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6172:	d914      	bls.n	d619e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6174:	4290      	cmp	r0, r2
   d6176:	d213      	bcs.n	d61a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6178:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d617c:	1a6c      	subs	r4, r5, r1
   d617e:	f1a1 0708 	sub.w	r7, r1, #8
   d6182:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6184:	42af      	cmp	r7, r5
   d6186:	d018      	beq.n	d61ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6188:	b11c      	cbz	r4, d6192 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d618a:	4629      	mov	r1, r5
   d618c:	4620      	mov	r0, r4
   d618e:	f7ff ff98 	bl	d60c2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6192:	1d28      	adds	r0, r5, #4
   d6194:	f7fe fa32 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6198:	3d08      	subs	r5, #8
   d619a:	3c08      	subs	r4, #8
   d619c:	e7f2      	b.n	d6184 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d619e:	d00c      	beq.n	d61ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d61a0:	42ac      	cmp	r4, r5
   d61a2:	d00a      	beq.n	d61ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d61a4:	b11e      	cbz	r6, d61ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d61a6:	4621      	mov	r1, r4
   d61a8:	4630      	mov	r0, r6
   d61aa:	f7ff ff8a 	bl	d60c2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d61ae:	1d20      	adds	r0, r4, #4
   d61b0:	f7fe fa24 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d61b4:	3408      	adds	r4, #8
   d61b6:	3608      	adds	r6, #8
   d61b8:	e7f2      	b.n	d61a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d61ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61bc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d61bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d61be:	680b      	ldr	r3, [r1, #0]
   d61c0:	69da      	ldr	r2, [r3, #28]
   d61c2:	460e      	mov	r6, r1
   d61c4:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d61c6:	6851      	ldr	r1, [r2, #4]
   d61c8:	4605      	mov	r5, r0
   d61ca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d61ce:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d61d0:	4299      	cmp	r1, r3
   d61d2:	d00d      	beq.n	d61f0 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d61d4:	6818      	ldr	r0, [r3, #0]
   d61d6:	6982      	ldr	r2, [r0, #24]
   d61d8:	69c0      	ldr	r0, [r0, #28]
   d61da:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d61de:	4290      	cmp	r0, r2
   d61e0:	d004      	beq.n	d61ec <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d61e2:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d61e6:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d61ea:	e7f8      	b.n	d61de <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d61ec:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d61ee:	e7ef      	b.n	d61d0 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d61f0:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d61f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d61f6:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d61f8:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d61fa:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d61fc:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d61fe:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d6200:	f8c3 200a 	str.w	r2, [r3, #10]
   d6204:	f8c3 200e 	str.w	r2, [r3, #14]
   d6208:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d620c:	682c      	ldr	r4, [r5, #0]
   d620e:	686b      	ldr	r3, [r5, #4]
   d6210:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6214:	42bc      	cmp	r4, r7
   d6216:	d016      	beq.n	d6246 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d6218:	4631      	mov	r1, r6
   d621a:	4620      	mov	r0, r4
   d621c:	f7ff fed6 	bl	d5fcc <_ZN8particle13BlePeerDeviceeqERKS0_>
   d6220:	b908      	cbnz	r0, d6226 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6222:	3408      	adds	r4, #8
   d6224:	e7f6      	b.n	d6214 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6226:	b174      	cbz	r4, d6246 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d6228:	1d20      	adds	r0, r4, #4
   d622a:	f7fe f9e7 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d622e:	682b      	ldr	r3, [r5, #0]
   d6230:	686a      	ldr	r2, [r5, #4]
   d6232:	f104 0108 	add.w	r1, r4, #8
   d6236:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d623a:	4620      	mov	r0, r4
   d623c:	f7ff ff94 	bl	d6168 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6240:	686b      	ldr	r3, [r5, #4]
   d6242:	3b01      	subs	r3, #1
   d6244:	606b      	str	r3, [r5, #4]
   d6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6248 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d624a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d624c:	6846      	ldr	r6, [r0, #4]
   d624e:	4668      	mov	r0, sp
   d6250:	f7ff ff37 	bl	d60c2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6254:	6867      	ldr	r7, [r4, #4]
   d6256:	68a3      	ldr	r3, [r4, #8]
   d6258:	429f      	cmp	r7, r3
   d625a:	db14      	blt.n	d6286 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d625c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d625e:	2f00      	cmp	r7, #0
   d6260:	dd0b      	ble.n	d627a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6262:	00f8      	lsls	r0, r7, #3
   d6264:	f7ff fb7a 	bl	d595c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6268:	4605      	mov	r5, r0
   d626a:	b300      	cbz	r0, d62ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d626c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6270:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6274:	f7ff ff78 	bl	d6168 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6278:	e000      	b.n	d627c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d627a:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d627c:	6820      	ldr	r0, [r4, #0]
   d627e:	f7ff fb75 	bl	d596c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6282:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6284:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6286:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6288:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d628a:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d628e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6292:	4629      	mov	r1, r5
   d6294:	f105 0008 	add.w	r0, r5, #8
   d6298:	f7ff ff66 	bl	d6168 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d629c:	b11d      	cbz	r5, d62a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d629e:	4669      	mov	r1, sp
   d62a0:	4628      	mov	r0, r5
   d62a2:	f7ff ff0e 	bl	d60c2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d62a6:	6863      	ldr	r3, [r4, #4]
   d62a8:	3301      	adds	r3, #1
   d62aa:	6063      	str	r3, [r4, #4]
   d62ac:	2501      	movs	r5, #1
   d62ae:	a801      	add	r0, sp, #4
   d62b0:	f7fe f9a4 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d62b4:	4628      	mov	r0, r5
   d62b6:	b003      	add	sp, #12
   d62b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d62ba:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d62bc:	6804      	ldr	r4, [r0, #0]
   d62be:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d62c0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d62c2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d62c6:	42a6      	cmp	r6, r4
   d62c8:	d004      	beq.n	d62d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d62ca:	1d20      	adds	r0, r4, #4
   d62cc:	f7fe f996 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62d0:	3408      	adds	r4, #8
   d62d2:	e7f8      	b.n	d62c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d62d4:	6828      	ldr	r0, [r5, #0]
   d62d6:	f7ff fb49 	bl	d596c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d62da:	4628      	mov	r0, r5
   d62dc:	bd70      	pop	{r4, r5, r6, pc}

000d62de <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d62de:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62e0:	4604      	mov	r4, r0
   d62e2:	b138      	cbz	r0, d62f4 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d62e4:	f7ff ffe9 	bl	d62ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d62e8:	4620      	mov	r0, r4
   d62ea:	210c      	movs	r1, #12
      }
   d62ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62f0:	f001 bdce 	b.w	d7e90 <_ZdlPvj>
   d62f4:	bd10      	pop	{r4, pc}

000d62f6 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d62f6:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d62f8:	4604      	mov	r4, r0
   d62fa:	b138      	cbz	r0, d630c <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d62fc:	f7ff ffdd 	bl	d62ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d6300:	4620      	mov	r0, r4
   d6302:	210c      	movs	r1, #12
      }
   d6304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6308:	f001 bdc2 	b.w	d7e90 <_ZdlPvj>
   d630c:	bd10      	pop	{r4, pc}
	...

000d6310 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6310:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d6312:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6314:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d6316:	6005      	str	r5, [r0, #0]
   d6318:	6045      	str	r5, [r0, #4]
   d631a:	6085      	str	r5, [r0, #8]
   d631c:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d631e:	6105      	str	r5, [r0, #16]
   d6320:	6145      	str	r5, [r0, #20]
   d6322:	6185      	str	r5, [r0, #24]
   d6324:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6326:	4628      	mov	r0, r5
   d6328:	f7ff f8a4 	bl	d5474 <hal_ble_stack_init>
   d632c:	b120      	cbz	r0, d6338 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d632e:	4a25      	ldr	r2, [pc, #148]	; (d63c4 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d6330:	4629      	mov	r1, r5
   d6332:	200a      	movs	r0, #10
   d6334:	f7ff fa36 	bl	d57a4 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d6338:	2301      	movs	r3, #1
   d633a:	f10d 0103 	add.w	r1, sp, #3
   d633e:	a801      	add	r0, sp, #4
   d6340:	f88d 3003 	strb.w	r3, [sp, #3]
   d6344:	f7ff fed9 	bl	d60fa <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6348:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d634a:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d634c:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d634e:	2200      	movs	r2, #0
   d6350:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6352:	b135      	cbz	r5, d6362 <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d6354:	4628      	mov	r0, r5
   d6356:	f7ff febe 	bl	d60d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d635a:	2110      	movs	r1, #16
   d635c:	4628      	mov	r0, r5
   d635e:	f001 fd97 	bl	d7e90 <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d6362:	a801      	add	r0, sp, #4
   d6364:	f7ff fed8 	bl	d6118 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6368:	2001      	movs	r0, #1
   d636a:	f7fd fe94 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d636e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6370:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6372:	b11b      	cbz	r3, d637c <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6374:	2101      	movs	r1, #1
   d6376:	4618      	mov	r0, r3
   d6378:	f001 fd8a 	bl	d7e90 <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d637c:	200c      	movs	r0, #12
   d637e:	f7fd fe8a 	bl	d4096 <_Znwj>
   d6382:	4603      	mov	r3, r0
   d6384:	b118      	cbz	r0, d638e <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d6386:	2200      	movs	r2, #0
   d6388:	6002      	str	r2, [r0, #0]
   d638a:	6042      	str	r2, [r0, #4]
   d638c:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d638e:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6390:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6392:	b108      	cbz	r0, d6398 <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d6394:	f7ff ffa3 	bl	d62de <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6398:	200c      	movs	r0, #12
   d639a:	f7fd fe7c 	bl	d4096 <_Znwj>
   d639e:	4603      	mov	r3, r0
   d63a0:	b118      	cbz	r0, d63aa <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d63a2:	2200      	movs	r2, #0
   d63a4:	6002      	str	r2, [r0, #0]
   d63a6:	6042      	str	r2, [r0, #4]
   d63a8:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63aa:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d63ac:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d63ae:	b108      	cbz	r0, d63b4 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d63b0:	f7ff ffa1 	bl	d62f6 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d63b4:	2200      	movs	r2, #0
   d63b6:	4621      	mov	r1, r4
   d63b8:	4803      	ldr	r0, [pc, #12]	; (d63c8 <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d63ba:	f7ff f863 	bl	d5484 <hal_ble_set_callback_on_events>
}
   d63be:	4620      	mov	r0, r4
   d63c0:	b003      	add	sp, #12
   d63c2:	bd30      	pop	{r4, r5, pc}
   d63c4:	000d5435 	.word	0x000d5435
   d63c8:	000d64bd 	.word	0x000d64bd

000d63cc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d63cc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d63ce:	4c0a      	ldr	r4, [pc, #40]	; (d63f8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d63d0:	6823      	ldr	r3, [r4, #0]
   d63d2:	07db      	lsls	r3, r3, #31
   d63d4:	d40e      	bmi.n	d63f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d63d6:	4620      	mov	r0, r4
   d63d8:	f7fd fe63 	bl	d40a2 <__cxa_guard_acquire>
   d63dc:	b150      	cbz	r0, d63f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d63de:	4807      	ldr	r0, [pc, #28]	; (d63fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d63e0:	f7ff ff96 	bl	d6310 <_ZN8particle14BleLocalDeviceC1Ev>
   d63e4:	4620      	mov	r0, r4
   d63e6:	f7fd fe61 	bl	d40ac <__cxa_guard_release>
   d63ea:	4a05      	ldr	r2, [pc, #20]	; (d6400 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d63ec:	4905      	ldr	r1, [pc, #20]	; (d6404 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d63ee:	4803      	ldr	r0, [pc, #12]	; (d63fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d63f0:	f001 fd40 	bl	d7e74 <__aeabi_atexit>
    return instance;
}
   d63f4:	4801      	ldr	r0, [pc, #4]	; (d63fc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d63f6:	bd10      	pop	{r4, pc}
   d63f8:	2003e37c 	.word	0x2003e37c
   d63fc:	2003e35c 	.word	0x2003e35c
   d6400:	2003dd18 	.word	0x2003dd18
   d6404:	000d6409 	.word	0x000d6409

000d6408 <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6408:	b510      	push	{r4, lr}
   d640a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d640c:	69c0      	ldr	r0, [r0, #28]
   d640e:	b108      	cbz	r0, d6414 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d6410:	f7ff ff71 	bl	d62f6 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6414:	69a0      	ldr	r0, [r4, #24]
   d6416:	b108      	cbz	r0, d641c <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d6418:	f7ff ff61 	bl	d62de <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d641c:	6960      	ldr	r0, [r4, #20]
   d641e:	b110      	cbz	r0, d6426 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6420:	2101      	movs	r1, #1
   d6422:	f001 fd35 	bl	d7e90 <_ZdlPvj>
   d6426:	f104 0010 	add.w	r0, r4, #16
   d642a:	f7ff fe75 	bl	d6118 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d642e:	4620      	mov	r0, r4
   d6430:	bd10      	pop	{r4, pc}
	...

000d6434 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d6434:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6436:	2500      	movs	r5, #0
   d6438:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d643a:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d643c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d643e:	2020      	movs	r0, #32
   d6440:	f7fd fe29 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6444:	4604      	mov	r4, r0
   d6446:	b1b0      	cbz	r0, d6476 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d6448:	4603      	mov	r3, r0
   d644a:	a901      	add	r1, sp, #4
   d644c:	f803 5b01 	strb.w	r5, [r3], #1
   d6450:	f8c0 5001 	str.w	r5, [r0, #1]
   d6454:	605d      	str	r5, [r3, #4]
   d6456:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d645a:	82c3      	strh	r3, [r0, #22]
   d645c:	237f      	movs	r3, #127	; 0x7f
   d645e:	f8c0 500a 	str.w	r5, [r0, #10]
   d6462:	f8c0 500e 	str.w	r5, [r0, #14]
   d6466:	f8c0 5012 	str.w	r5, [r0, #18]
   d646a:	7603      	strb	r3, [r0, #24]
   d646c:	301c      	adds	r0, #28
   d646e:	f88d 5004 	strb.w	r5, [sp, #4]
   d6472:	f7ff fe42 	bl	d60fa <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6476:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6478:	2014      	movs	r0, #20
   d647a:	9301      	str	r3, [sp, #4]
   d647c:	f7fd fe0b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6480:	b128      	cbz	r0, d648e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6482:	2301      	movs	r3, #1
   d6484:	6043      	str	r3, [r0, #4]
   d6486:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6488:	4b06      	ldr	r3, [pc, #24]	; (d64a4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d648a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d648c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d648e:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6490:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6492:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6494:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6496:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6498:	f7fe f8b0 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d649c:	4630      	mov	r0, r6
   d649e:	b002      	add	sp, #8
   d64a0:	bd70      	pop	{r4, r5, r6, pc}
   d64a2:	bf00      	nop
   d64a4:	000d9870 	.word	0x000d9870

000d64a8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d64a8:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d64aa:	f04f 0100 	mov.w	r1, #0
   d64ae:	aa01      	add	r2, sp, #4
   d64b0:	4604      	mov	r4, r0
   d64b2:	f7ff ffbf 	bl	d6434 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d64b6:	4620      	mov	r0, r4
   d64b8:	b002      	add	sp, #8
   d64ba:	bd10      	pop	{r4, pc}

000d64bc <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d64bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64be:	4604      	mov	r4, r0
   d64c0:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d64c2:	460d      	mov	r5, r1
   d64c4:	2900      	cmp	r1, #0
   d64c6:	f000 80a5 	beq.w	d6614 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d64ca:	a803      	add	r0, sp, #12
   d64cc:	f7ff fc7e 	bl	d5dcc <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d64d0:	6863      	ldr	r3, [r4, #4]
   d64d2:	3b03      	subs	r3, #3
   d64d4:	2b07      	cmp	r3, #7
   d64d6:	f200 809a 	bhi.w	d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d64da:	e8df f003 	tbb	[pc, r3]
   d64de:	4404      	.short	0x4404
   d64e0:	98989898 	.word	0x98989898
   d64e4:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d64e6:	a806      	add	r0, sp, #24
   d64e8:	f7ff ffde 	bl	d64a8 <_ZN8particle13BlePeerDeviceC1Ev>
   d64ec:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d64ee:	89a2      	ldrh	r2, [r4, #12]
   d64f0:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d64f2:	8962      	ldrh	r2, [r4, #10]
   d64f4:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d64f6:	8922      	ldrh	r2, [r4, #8]
   d64f8:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d64fa:	8922      	ldrh	r2, [r4, #8]
   d64fc:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d64fe:	8b22      	ldrh	r2, [r4, #24]
   d6500:	82da      	strh	r2, [r3, #22]
   d6502:	4622      	mov	r2, r4
   d6504:	7da1      	ldrb	r1, [r4, #22]
   d6506:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d650a:	9004      	str	r0, [sp, #16]
   d650c:	8892      	ldrh	r2, [r2, #4]
   d650e:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d6512:	9804      	ldr	r0, [sp, #16]
   d6514:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d6518:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d651a:	f8c3 0001 	str.w	r0, [r3, #1]
   d651e:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d6522:	682b      	ldr	r3, [r5, #0]
   d6524:	b113      	cbz	r3, d652c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d6526:	68a9      	ldr	r1, [r5, #8]
   d6528:	a806      	add	r0, sp, #24
   d652a:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d652c:	7ba3      	ldrb	r3, [r4, #14]
   d652e:	2b01      	cmp	r3, #1
   d6530:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d6532:	bf0b      	itete	eq
   d6534:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d6536:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d6538:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d653a:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d653c:	bf0c      	ite	eq
   d653e:	69ac      	ldreq	r4, [r5, #24]
   d6540:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d6542:	6863      	ldr	r3, [r4, #4]
   d6544:	2b00      	cmp	r3, #0
   d6546:	dc0a      	bgt.n	d655e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6548:	a906      	add	r1, sp, #24
   d654a:	a808      	add	r0, sp, #32
   d654c:	f7ff fdb9 	bl	d60c2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d6550:	a908      	add	r1, sp, #32
   d6552:	4620      	mov	r0, r4
   d6554:	f7ff fe78 	bl	d6248 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6558:	a809      	add	r0, sp, #36	; 0x24
   d655a:	f7fe f84f 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d655e:	a807      	add	r0, sp, #28
   d6560:	f7fe f84c 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6564:	e053      	b.n	d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d6566:	89a1      	ldrh	r1, [r4, #12]
   d6568:	4628      	mov	r0, r5
   d656a:	f7ff fd81 	bl	d6070 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d656e:	4604      	mov	r4, r0
   d6570:	2800      	cmp	r0, #0
   d6572:	d04c      	beq.n	d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d6574:	686b      	ldr	r3, [r5, #4]
   d6576:	b10b      	cbz	r3, d657c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d6578:	68e9      	ldr	r1, [r5, #12]
   d657a:	4798      	blx	r3
   d657c:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d657e:	781a      	ldrb	r2, [r3, #0]
   d6580:	2a01      	cmp	r2, #1
   d6582:	d104      	bne.n	d658e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d6584:	4621      	mov	r1, r4
   d6586:	69e8      	ldr	r0, [r5, #28]
   d6588:	f7ff fe18 	bl	d61bc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d658c:	e03f      	b.n	d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d658e:	69da      	ldr	r2, [r3, #28]
   d6590:	69a8      	ldr	r0, [r5, #24]
   d6592:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6594:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d6596:	2600      	movs	r6, #0
   d6598:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d659c:	4299      	cmp	r1, r3
   d659e:	d00d      	beq.n	d65bc <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d65a0:	681d      	ldr	r5, [r3, #0]
   d65a2:	69aa      	ldr	r2, [r5, #24]
   d65a4:	69ed      	ldr	r5, [r5, #28]
   d65a6:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d65aa:	4295      	cmp	r5, r2
   d65ac:	d004      	beq.n	d65b8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d65ae:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d65b2:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d65b6:	e7f8      	b.n	d65aa <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d65b8:	3308      	adds	r3, #8
   d65ba:	e7ef      	b.n	d659c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d65bc:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d65be:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d65c2:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d65c4:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d65c6:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d65c8:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d65ca:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d65cc:	f8c3 200a 	str.w	r2, [r3, #10]
   d65d0:	f8c3 200e 	str.w	r2, [r3, #14]
   d65d4:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d65d8:	f7ff fdb6 	bl	d6148 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d65dc:	e017      	b.n	d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d65de:	8aa1      	ldrh	r1, [r4, #20]
   d65e0:	4628      	mov	r0, r5
   d65e2:	f7ff fd45 	bl	d6070 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d65e6:	b190      	cbz	r0, d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d65e8:	8ae1      	ldrh	r1, [r4, #22]
   d65ea:	9000      	str	r0, [sp, #0]
   d65ec:	68e3      	ldr	r3, [r4, #12]
   d65ee:	6922      	ldr	r2, [r4, #16]
   d65f0:	6928      	ldr	r0, [r5, #16]
   d65f2:	e00a      	b.n	d660a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d65f4:	8aa1      	ldrh	r1, [r4, #20]
   d65f6:	4628      	mov	r0, r5
   d65f8:	f7ff fd3a 	bl	d6070 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d65fc:	b138      	cbz	r0, d660e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d65fe:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d6600:	8ae1      	ldrh	r1, [r4, #22]
   d6602:	9000      	str	r0, [sp, #0]
   d6604:	68e3      	ldr	r3, [r4, #12]
   d6606:	6922      	ldr	r2, [r4, #16]
   d6608:	69e8      	ldr	r0, [r5, #28]
   d660a:	f7ff fc9e 	bl	d5f4a <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d660e:	a803      	add	r0, sp, #12
   d6610:	f7ff fbea 	bl	d5de8 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d6614:	b00b      	add	sp, #44	; 0x2c
   d6616:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6618 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6618:	4802      	ldr	r0, [pc, #8]	; (d6624 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d661a:	2300      	movs	r3, #0
   d661c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d661e:	f7fe bf81 	b.w	d5524 <os_mutex_recursive_create>
   d6622:	bf00      	nop
   d6624:	2003e380 	.word	0x2003e380

000d6628 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d662a:	4606      	mov	r6, r0
   d662c:	460d      	mov	r5, r1
   d662e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6630:	2400      	movs	r4, #0
  while (size--) {
   d6632:	42bd      	cmp	r5, r7
   d6634:	d00c      	beq.n	d6650 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6636:	6833      	ldr	r3, [r6, #0]
   d6638:	f815 1b01 	ldrb.w	r1, [r5], #1
   d663c:	689b      	ldr	r3, [r3, #8]
   d663e:	4630      	mov	r0, r6
   d6640:	4798      	blx	r3
     if (chunk>=0)
   d6642:	2800      	cmp	r0, #0
   d6644:	db01      	blt.n	d664a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6646:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6648:	e7f3      	b.n	d6632 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d664a:	2c00      	cmp	r4, #0
   d664c:	bf08      	it	eq
   d664e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6650:	4620      	mov	r0, r4
   d6652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6654 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6654:	b570      	push	{r4, r5, r6, lr}
   d6656:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6658:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d665a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d665c:	b149      	cbz	r1, d6672 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d665e:	f002 fc0c 	bl	d8e7a <strlen>
   d6662:	682b      	ldr	r3, [r5, #0]
   d6664:	4602      	mov	r2, r0
   d6666:	4621      	mov	r1, r4
   d6668:	4628      	mov	r0, r5
   d666a:	68db      	ldr	r3, [r3, #12]
    }
   d666c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6670:	4718      	bx	r3
    }
   d6672:	bd70      	pop	{r4, r5, r6, pc}

000d6674 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6674:	6803      	ldr	r3, [r0, #0]
   d6676:	689b      	ldr	r3, [r3, #8]
   d6678:	4718      	bx	r3

000d667a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d667a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d667c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d667e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6680:	f7ff fff8 	bl	d6674 <_ZN5Print5printEc>
  n += print('\n');
   d6684:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6686:	4604      	mov	r4, r0
  n += print('\n');
   d6688:	4628      	mov	r0, r5
   d668a:	f7ff fff3 	bl	d6674 <_ZN5Print5printEc>
  return n;
}
   d668e:	4420      	add	r0, r4
   d6690:	bd38      	pop	{r3, r4, r5, pc}

000d6692 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6692:	b538      	push	{r3, r4, r5, lr}
   d6694:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6696:	f7ff ffdd 	bl	d6654 <_ZN5Print5writeEPKc>
   d669a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d669c:	4628      	mov	r0, r5
   d669e:	f7ff ffec 	bl	d667a <_ZN5Print7printlnEv>
  return n;
}
   d66a2:	4420      	add	r0, r4
   d66a4:	bd38      	pop	{r3, r4, r5, pc}

000d66a6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d66a6:	b530      	push	{r4, r5, lr}
   d66a8:	b08b      	sub	sp, #44	; 0x2c
   d66aa:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d66ac:	2100      	movs	r1, #0
   d66ae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d66b2:	2a01      	cmp	r2, #1
   d66b4:	bf98      	it	ls
   d66b6:	220a      	movls	r2, #10
   d66b8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d66bc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d66c0:	fb05 3312 	mls	r3, r5, r2, r3
   d66c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d66c8:	2b09      	cmp	r3, #9
   d66ca:	bf94      	ite	ls
   d66cc:	3330      	addls	r3, #48	; 0x30
   d66ce:	3337      	addhi	r3, #55	; 0x37
   d66d0:	b2db      	uxtb	r3, r3
   d66d2:	4621      	mov	r1, r4
   d66d4:	f804 3901 	strb.w	r3, [r4], #-1
   d66d8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d66da:	2d00      	cmp	r5, #0
   d66dc:	d1ee      	bne.n	d66bc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d66de:	f7ff ffb9 	bl	d6654 <_ZN5Print5writeEPKc>
}
   d66e2:	b00b      	add	sp, #44	; 0x2c
   d66e4:	bd30      	pop	{r4, r5, pc}

000d66e6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d66e6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d66e8:	b92a      	cbnz	r2, d66f6 <_ZN5Print5printEmi+0x10>
   d66ea:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d66ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d66f0:	689b      	ldr	r3, [r3, #8]
   d66f2:	b2c9      	uxtb	r1, r1
   d66f4:	4718      	bx	r3
  else return printNumber(n, base);
   d66f6:	b2d2      	uxtb	r2, r2
}
   d66f8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d66fc:	f7ff bfd3 	b.w	d66a6 <_ZN5Print11printNumberEmh>

000d6700 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6700:	f7ff bff1 	b.w	d66e6 <_ZN5Print5printEmi>

000d6704 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6708:	4607      	mov	r7, r0
   d670a:	460e      	mov	r6, r1
  if (base == 0) {
   d670c:	4615      	mov	r5, r2
   d670e:	b92a      	cbnz	r2, d671c <_ZN5Print5printEli+0x18>
    return write(n);
   d6710:	6803      	ldr	r3, [r0, #0]
   d6712:	b2c9      	uxtb	r1, r1
   d6714:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d671a:	4718      	bx	r3
  } else if (base == 10) {
   d671c:	2a0a      	cmp	r2, #10
   d671e:	d102      	bne.n	d6726 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d6720:	2900      	cmp	r1, #0
   d6722:	da01      	bge.n	d6728 <_ZN5Print5printEli+0x24>
   d6724:	e004      	b.n	d6730 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6726:	b2d2      	uxtb	r2, r2
  }
}
   d6728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d672c:	f7ff bfbb 	b.w	d66a6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6730:	212d      	movs	r1, #45	; 0x2d
   d6732:	f7ff ff9f 	bl	d6674 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6736:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6738:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d673a:	4271      	negs	r1, r6
   d673c:	4638      	mov	r0, r7
   d673e:	f7ff ffb2 	bl	d66a6 <_ZN5Print11printNumberEmh>
   d6742:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6748 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d674c:	ec57 6b10 	vmov	r6, r7, d0
   d6750:	4682      	mov	sl, r0
   d6752:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6754:	ee10 2a10 	vmov	r2, s0
   d6758:	463b      	mov	r3, r7
   d675a:	ee10 0a10 	vmov	r0, s0
   d675e:	4639      	mov	r1, r7
   d6760:	f002 f944 	bl	d89ec <__aeabi_dcmpun>
   d6764:	b108      	cbz	r0, d676a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6766:	4948      	ldr	r1, [pc, #288]	; (d6888 <_ZN5Print10printFloatEdh+0x140>)
   d6768:	e012      	b.n	d6790 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d676a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d676e:	f04f 32ff 	mov.w	r2, #4294967295
   d6772:	4b46      	ldr	r3, [pc, #280]	; (d688c <_ZN5Print10printFloatEdh+0x144>)
   d6774:	4630      	mov	r0, r6
   d6776:	4649      	mov	r1, r9
   d6778:	f002 f938 	bl	d89ec <__aeabi_dcmpun>
   d677c:	b968      	cbnz	r0, d679a <_ZN5Print10printFloatEdh+0x52>
   d677e:	f04f 32ff 	mov.w	r2, #4294967295
   d6782:	4b42      	ldr	r3, [pc, #264]	; (d688c <_ZN5Print10printFloatEdh+0x144>)
   d6784:	4630      	mov	r0, r6
   d6786:	4649      	mov	r1, r9
   d6788:	f002 f912 	bl	d89b0 <__aeabi_dcmple>
   d678c:	b928      	cbnz	r0, d679a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d678e:	4940      	ldr	r1, [pc, #256]	; (d6890 <_ZN5Print10printFloatEdh+0x148>)
   d6790:	4650      	mov	r0, sl
   d6792:	f7ff ff5f 	bl	d6654 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d679a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d679e:	4b3d      	ldr	r3, [pc, #244]	; (d6894 <_ZN5Print10printFloatEdh+0x14c>)
   d67a0:	4630      	mov	r0, r6
   d67a2:	4639      	mov	r1, r7
   d67a4:	f002 f918 	bl	d89d8 <__aeabi_dcmpgt>
   d67a8:	b108      	cbz	r0, d67ae <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67aa:	493b      	ldr	r1, [pc, #236]	; (d6898 <_ZN5Print10printFloatEdh+0x150>)
   d67ac:	e7f0      	b.n	d6790 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d67ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d67b2:	4b3a      	ldr	r3, [pc, #232]	; (d689c <_ZN5Print10printFloatEdh+0x154>)
   d67b4:	4630      	mov	r0, r6
   d67b6:	4639      	mov	r1, r7
   d67b8:	f002 f8f0 	bl	d899c <__aeabi_dcmplt>
   d67bc:	2800      	cmp	r0, #0
   d67be:	d1f4      	bne.n	d67aa <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d67c0:	2200      	movs	r2, #0
   d67c2:	2300      	movs	r3, #0
   d67c4:	4630      	mov	r0, r6
   d67c6:	4639      	mov	r1, r7
   d67c8:	f002 f8e8 	bl	d899c <__aeabi_dcmplt>
   d67cc:	b140      	cbz	r0, d67e0 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d67ce:	212d      	movs	r1, #45	; 0x2d
   d67d0:	4650      	mov	r0, sl
   d67d2:	f7ff ff4f 	bl	d6674 <_ZN5Print5printEc>
     number = -number;
   d67d6:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d67da:	4604      	mov	r4, r0
     number = -number;
   d67dc:	461f      	mov	r7, r3
   d67de:	e000      	b.n	d67e2 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d67e0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d67e2:	492f      	ldr	r1, [pc, #188]	; (d68a0 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d67e4:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d67e8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d67ea:	fa5f f388 	uxtb.w	r3, r8
   d67ee:	429d      	cmp	r5, r3
   d67f0:	d906      	bls.n	d6800 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d67f2:	2200      	movs	r2, #0
   d67f4:	4b2b      	ldr	r3, [pc, #172]	; (d68a4 <_ZN5Print10printFloatEdh+0x15c>)
   d67f6:	f001 ff89 	bl	d870c <__aeabi_ddiv>
   d67fa:	f108 0801 	add.w	r8, r8, #1
   d67fe:	e7f4      	b.n	d67ea <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6800:	4632      	mov	r2, r6
   d6802:	463b      	mov	r3, r7
   d6804:	f001 fca6 	bl	d8154 <__adddf3>
   d6808:	460f      	mov	r7, r1
   d680a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d680c:	f002 f92c 	bl	d8a68 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6810:	220a      	movs	r2, #10
   d6812:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6814:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6816:	4650      	mov	r0, sl
   d6818:	f7ff ff45 	bl	d66a6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d681c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d681e:	b37d      	cbz	r5, d6880 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d6820:	4640      	mov	r0, r8
   d6822:	f001 fdd3 	bl	d83cc <__aeabi_ui2d>
   d6826:	4602      	mov	r2, r0
   d6828:	460b      	mov	r3, r1
   d682a:	4630      	mov	r0, r6
   d682c:	4639      	mov	r1, r7
   d682e:	f001 fc8f 	bl	d8150 <__aeabi_dsub>
   d6832:	4606      	mov	r6, r0
   d6834:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6836:	4650      	mov	r0, sl
   d6838:	491b      	ldr	r1, [pc, #108]	; (d68a8 <_ZN5Print10printFloatEdh+0x160>)
   d683a:	f7ff ff0b 	bl	d6654 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d683e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d6840:	4b18      	ldr	r3, [pc, #96]	; (d68a4 <_ZN5Print10printFloatEdh+0x15c>)
   d6842:	2200      	movs	r2, #0
   d6844:	4630      	mov	r0, r6
   d6846:	4639      	mov	r1, r7
   d6848:	f001 fe36 	bl	d84b8 <__aeabi_dmul>
   d684c:	460f      	mov	r7, r1
   d684e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d6850:	f002 f8e2 	bl	d8a18 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6854:	220a      	movs	r2, #10
   d6856:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6858:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d685a:	4650      	mov	r0, sl
   d685c:	f7ff ff52 	bl	d6704 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d6860:	4404      	add	r4, r0
    remainder -= toPrint;
   d6862:	4640      	mov	r0, r8
   d6864:	f001 fdc2 	bl	d83ec <__aeabi_i2d>
   d6868:	4602      	mov	r2, r0
   d686a:	460b      	mov	r3, r1
   d686c:	4630      	mov	r0, r6
   d686e:	4639      	mov	r1, r7
   d6870:	f001 fc6e 	bl	d8150 <__aeabi_dsub>
   d6874:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6876:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d687a:	4606      	mov	r6, r0
   d687c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d687e:	d1df      	bne.n	d6840 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6880:	4620      	mov	r0, r4
   d6882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6886:	bf00      	nop
   d6888:	000d9884 	.word	0x000d9884
   d688c:	7fefffff 	.word	0x7fefffff
   d6890:	000d988c 	.word	0x000d988c
   d6894:	41efffff 	.word	0x41efffff
   d6898:	000d9888 	.word	0x000d9888
   d689c:	c1efffff 	.word	0xc1efffff
   d68a0:	3fe00000 	.word	0x3fe00000
   d68a4:	40240000 	.word	0x40240000
   d68a8:	000d96be 	.word	0x000d96be

000d68ac <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d68ac:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d68ae:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d68b0:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d68b2:	f7ff ff49 	bl	d6748 <_ZN5Print10printFloatEdh>
   d68b6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d68b8:	4628      	mov	r0, r5
   d68ba:	f7ff fede 	bl	d667a <_ZN5Print7printlnEv>
  return n;
}
   d68be:	4420      	add	r0, r4
   d68c0:	bd38      	pop	{r3, r4, r5, pc}

000d68c2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d68c2:	b40c      	push	{r2, r3}
   d68c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68c8:	b087      	sub	sp, #28
   d68ca:	af00      	add	r7, sp, #0
   d68cc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d68d0:	4605      	mov	r5, r0
   d68d2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d68d6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d68d8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d68da:	4623      	mov	r3, r4
   d68dc:	464a      	mov	r2, r9
   d68de:	2114      	movs	r1, #20
   d68e0:	1d38      	adds	r0, r7, #4
   d68e2:	f7ff f86b 	bl	d59bc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d68e6:	2813      	cmp	r0, #19
   d68e8:	d805      	bhi.n	d68f6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d68ea:	1d39      	adds	r1, r7, #4
   d68ec:	4628      	mov	r0, r5
   d68ee:	f7ff feb1 	bl	d6654 <_ZN5Print5writeEPKc>
   d68f2:	4604      	mov	r4, r0
   d68f4:	e013      	b.n	d691e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d68f6:	f100 0308 	add.w	r3, r0, #8
   d68fa:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d68fe:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6900:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6904:	1c41      	adds	r1, r0, #1
   d6906:	4623      	mov	r3, r4
   d6908:	464a      	mov	r2, r9
   d690a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d690c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d690e:	f7ff f855 	bl	d59bc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6912:	4669      	mov	r1, sp
   d6914:	4628      	mov	r0, r5
   d6916:	f7ff fe9d 	bl	d6654 <_ZN5Print5writeEPKc>
   d691a:	4604      	mov	r4, r0
   d691c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d691e:	b11e      	cbz	r6, d6928 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6920:	4628      	mov	r0, r5
   d6922:	f7ff feaa 	bl	d667a <_ZN5Print7printlnEv>
   d6926:	4404      	add	r4, r0
    return n;
}
   d6928:	4620      	mov	r0, r4
   d692a:	371c      	adds	r7, #28
   d692c:	46bd      	mov	sp, r7
   d692e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6932:	b002      	add	sp, #8
   d6934:	4770      	bx	lr
	...

000d6938 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6938:	4b01      	ldr	r3, [pc, #4]	; (d6940 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d693a:	4a02      	ldr	r2, [pc, #8]	; (d6944 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d693c:	601a      	str	r2, [r3, #0]
   d693e:	4770      	bx	lr
   d6940:	2003e384 	.word	0x2003e384
   d6944:	000d96a7 	.word	0x000d96a7

000d6948 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6948:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d694a:	4b14      	ldr	r3, [pc, #80]	; (d699c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d694c:	4f14      	ldr	r7, [pc, #80]	; (d69a0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d694e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d6950:	4b14      	ldr	r3, [pc, #80]	; (d69a4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d6952:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d6954:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d6956:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d6958:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d695a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d695c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d695e:	d01b      	beq.n	d6998 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d6960:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d6962:	ad01      	add	r5, sp, #4
   d6964:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d6968:	f002 f8fc 	bl	d8b64 <localtime>
	calendar_time->tm_year += 1900;
   d696c:	6943      	ldr	r3, [r0, #20]
   d696e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d6972:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d6974:	4604      	mov	r4, r0
   d6976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d697a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d697c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d697e:	f8d4 e000 	ldr.w	lr, [r4]
   d6982:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6986:	ad01      	add	r5, sp, #4
   d6988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d698a:	4c07      	ldr	r4, [pc, #28]	; (d69a8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d698c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d698e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d6992:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6994:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d6998:	b00b      	add	sp, #44	; 0x2c
   d699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d699c:	2003e3b8 	.word	0x2003e3b8
   d69a0:	2003e3b4 	.word	0x2003e3b4
   d69a4:	2003e3b0 	.word	0x2003e3b0
   d69a8:	2003e388 	.word	0x2003e388

000d69ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d69ac:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d69ae:	2000      	movs	r0, #0
   d69b0:	f7fe ffc4 	bl	d593c <spark_sync_time_pending>
   d69b4:	b128      	cbz	r0, d69c2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d69b6:	f7fe ffa9 	bl	d590c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d69ba:	f080 0001 	eor.w	r0, r0, #1
   d69be:	b2c0      	uxtb	r0, r0
   d69c0:	bd08      	pop	{r3, pc}
   d69c2:	2001      	movs	r0, #1
    }
   d69c4:	bd08      	pop	{r3, pc}
	...

000d69c8 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   d69c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d69ca:	f7ff ffbd 	bl	d6948 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
   d69ce:	4b01      	ldr	r3, [pc, #4]	; (d69d4 <_ZN9TimeClass4hourEl+0xc>)
   d69d0:	6898      	ldr	r0, [r3, #8]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	2003e388 	.word	0x2003e388

000d69d8 <_ZN9TimeClass6minuteEl>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   d69d8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d69da:	f7ff ffb5 	bl	d6948 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_min;
}
   d69de:	4b01      	ldr	r3, [pc, #4]	; (d69e4 <_ZN9TimeClass6minuteEl+0xc>)
   d69e0:	6858      	ldr	r0, [r3, #4]
   d69e2:	bd08      	pop	{r3, pc}
   d69e4:	2003e388 	.word	0x2003e388

000d69e8 <_ZN9TimeClass6secondEl>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   d69e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   d69ea:	f7ff ffad 	bl	d6948 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_sec;
}
   d69ee:	4b01      	ldr	r3, [pc, #4]	; (d69f4 <_ZN9TimeClass6secondEl+0xc>)
   d69f0:	6818      	ldr	r0, [r3, #0]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	2003e388 	.word	0x2003e388

000d69f8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d69f8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d69fa:	2000      	movs	r0, #0
   d69fc:	f7fe fd32 	bl	d5464 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6a00:	4604      	mov	r4, r0
   d6a02:	b968      	cbnz	r0, d6a20 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6a04:	f7fe fede 	bl	d57c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6a08:	2801      	cmp	r0, #1
   d6a0a:	d10b      	bne.n	d6a24 <_ZN9TimeClass7isValidEv+0x2c>
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	f7fe ff09 	bl	d5824 <system_thread_get_state>
   d6a12:	b938      	cbnz	r0, d6a24 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6a14:	f7ff ffca 	bl	d69ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6a18:	b930      	cbnz	r0, d6a28 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d6a1a:	f7fe ff6f 	bl	d58fc <spark_process>
   d6a1e:	e7f9      	b.n	d6a14 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6a20:	2001      	movs	r0, #1
   d6a22:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6a24:	2000      	movs	r0, #0
   d6a26:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d6a28:	f7ff ffc0 	bl	d69ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6a2c:	2000      	movs	r0, #0
   d6a2e:	f7fe fd19 	bl	d5464 <HAL_RTC_Time_Is_Valid>
   d6a32:	3000      	adds	r0, #0
   d6a34:	bf18      	it	ne
   d6a36:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d6a38:	bd10      	pop	{r4, pc}

000d6a3a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d6a3a:	b508      	push	{r3, lr}
    (void)isValid();
   d6a3c:	f7ff ffdc 	bl	d69f8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6a44:	f7fe bd06 	b.w	d5454 <HAL_RTC_Get_UnixTime>

000d6a48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6a48:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6a4a:	681a      	ldr	r2, [r3, #0]
   d6a4c:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6a4e:	601a      	str	r2, [r3, #0]
   d6a50:	4770      	bx	lr
   d6a52:	bf00      	nop
   d6a54:	2003dc60 	.word	0x2003dc60
   d6a58:	2003e3ac 	.word	0x2003e3ac

000d6a5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6a5c:	2100      	movs	r1, #0
   d6a5e:	f7fe bec1 	b.w	d57e4 <system_delay_ms>

000d6a62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6a62:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6a64:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6a66:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6a68:	689b      	ldr	r3, [r3, #8]
   d6a6a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6a6c:	68a3      	ldr	r3, [r4, #8]
   d6a6e:	3b01      	subs	r3, #1
   d6a70:	60a3      	str	r3, [r4, #8]
   d6a72:	b92b      	cbnz	r3, d6a80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   d6a74:	6823      	ldr	r3, [r4, #0]
   d6a76:	4620      	mov	r0, r4
   d6a78:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6a7e:	4718      	bx	r3
   d6a80:	bd10      	pop	{r4, pc}
	...

000d6a84 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6a84:	b510      	push	{r4, lr}
   d6a86:	4b06      	ldr	r3, [pc, #24]	; (d6aa0 <_ZN9TCPClientD1Ev+0x1c>)
   d6a88:	6003      	str	r3, [r0, #0]
   d6a8a:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6a8c:	6980      	ldr	r0, [r0, #24]
   d6a8e:	b128      	cbz	r0, d6a9c <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6a90:	6843      	ldr	r3, [r0, #4]
   d6a92:	3b01      	subs	r3, #1
   d6a94:	6043      	str	r3, [r0, #4]
   d6a96:	b90b      	cbnz	r3, d6a9c <_ZN9TCPClientD1Ev+0x18>
   d6a98:	f7ff ffe3 	bl	d6a62 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	bd10      	pop	{r4, pc}
   d6aa0:	000d9aa0 	.word	0x000d9aa0

000d6aa4 <_ZN9TCPClientD0Ev>:
   d6aa4:	b510      	push	{r4, lr}
   d6aa6:	4604      	mov	r4, r0
   d6aa8:	f7ff ffec 	bl	d6a84 <_ZN9TCPClientD1Ev>
   d6aac:	4620      	mov	r0, r4
   d6aae:	211c      	movs	r1, #28
   d6ab0:	f001 f9ee 	bl	d7e90 <_ZdlPvj>
   d6ab4:	4620      	mov	r0, r4
   d6ab6:	bd10      	pop	{r4, pc}

000d6ab8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6ab8:	b510      	push	{r4, lr}
   d6aba:	4604      	mov	r4, r0
   d6abc:	f7fd fbb2 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	bd10      	pop	{r4, pc}

000d6ac4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6ac4:	b513      	push	{r0, r1, r4, lr}
   d6ac6:	460b      	mov	r3, r1
   d6ac8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6aca:	c803      	ldmia	r0, {r0, r1}
   d6acc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6ad0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6ad4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6ad8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6adc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6ae0:	b002      	add	sp, #8
   d6ae2:	bd10      	pop	{r4, pc}

000d6ae4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ae4:	4803      	ldr	r0, [pc, #12]	; (d6af4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6ae6:	4a04      	ldr	r2, [pc, #16]	; (d6af8 <_GLOBAL__sub_I_RGB+0x14>)
   d6ae8:	4904      	ldr	r1, [pc, #16]	; (d6afc <_GLOBAL__sub_I_RGB+0x18>)
   d6aea:	2300      	movs	r3, #0
   d6aec:	6083      	str	r3, [r0, #8]
   d6aee:	f001 b9c1 	b.w	d7e74 <__aeabi_atexit>
   d6af2:	bf00      	nop
   d6af4:	2003e3bc 	.word	0x2003e3bc
   d6af8:	2003dd18 	.word	0x2003dd18
   d6afc:	000d6ab9 	.word	0x000d6ab9

000d6b00 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6b00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6b02:	4b0c      	ldr	r3, [pc, #48]	; (d6b34 <serialEventRun+0x34>)
   d6b04:	b133      	cbz	r3, d6b14 <serialEventRun+0x14>
   d6b06:	f000 fbd9 	bl	d72bc <_Z16_fetch_usbserialv>
   d6b0a:	6803      	ldr	r3, [r0, #0]
   d6b0c:	691b      	ldr	r3, [r3, #16]
   d6b0e:	4798      	blx	r3
   d6b10:	2800      	cmp	r0, #0
   d6b12:	dc09      	bgt.n	d6b28 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6b14:	4b08      	ldr	r3, [pc, #32]	; (d6b38 <serialEventRun+0x38>)
   d6b16:	b163      	cbz	r3, d6b32 <serialEventRun+0x32>
   d6b18:	f000 fc58 	bl	d73cc <_Z22__fetch_global_Serial1v>
   d6b1c:	6803      	ldr	r3, [r0, #0]
   d6b1e:	691b      	ldr	r3, [r3, #16]
   d6b20:	4798      	blx	r3
   d6b22:	2800      	cmp	r0, #0
   d6b24:	dc03      	bgt.n	d6b2e <serialEventRun+0x2e>
   d6b26:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6b28:	f3af 8000 	nop.w
   d6b2c:	e7f2      	b.n	d6b14 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6b2e:	f3af 8000 	nop.w
   d6b32:	bd08      	pop	{r3, pc}
	...

000d6b3c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6b3c:	b508      	push	{r3, lr}
	serialEventRun();
   d6b3e:	f7ff ffdf 	bl	d6b00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6b42:	f7fe fc7f 	bl	d5444 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6b46:	4b01      	ldr	r3, [pc, #4]	; (d6b4c <_post_loop+0x10>)
   d6b48:	6018      	str	r0, [r3, #0]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	2003e708 	.word	0x2003e708

000d6b50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6b50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b52:	2300      	movs	r3, #0
   d6b54:	9300      	str	r3, [sp, #0]
   d6b56:	461a      	mov	r2, r3
   d6b58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b5c:	f7fe fe74 	bl	d5848 <system_ctrl_set_result>
}
   d6b60:	b003      	add	sp, #12
   d6b62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6b68 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6b68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6b6a:	8843      	ldrh	r3, [r0, #2]
   d6b6c:	2b0a      	cmp	r3, #10
   d6b6e:	d008      	beq.n	d6b82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b70:	2b50      	cmp	r3, #80	; 0x50
   d6b72:	d109      	bne.n	d6b88 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6b74:	4b09      	ldr	r3, [pc, #36]	; (d6b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6b76:	681b      	ldr	r3, [r3, #0]
   d6b78:	b13b      	cbz	r3, d6b8a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6b7a:	b003      	add	sp, #12
   d6b7c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6b80:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6b82:	f7ff ffe5 	bl	d6b50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6b86:	e006      	b.n	d6b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b88:	2300      	movs	r3, #0
   d6b8a:	9300      	str	r3, [sp, #0]
   d6b8c:	461a      	mov	r2, r3
   d6b8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b92:	f7fe fe59 	bl	d5848 <system_ctrl_set_result>
        break;
    }
}
   d6b96:	b003      	add	sp, #12
   d6b98:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b9c:	2003e3cc 	.word	0x2003e3cc

000d6ba0 <module_user_init_hook>:

void module_user_init_hook()
{
   d6ba0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6ba2:	f7fe fc3f 	bl	d5424 <HAL_RNG_GetRandomNumber>
   d6ba6:	4604      	mov	r4, r0
    srand(seed);
   d6ba8:	f002 f912 	bl	d8dd0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6bac:	4b07      	ldr	r3, [pc, #28]	; (d6bcc <module_user_init_hook+0x2c>)
   d6bae:	b113      	cbz	r3, d6bb6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6bb0:	4620      	mov	r0, r4
   d6bb2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6bb6:	2100      	movs	r1, #0
   d6bb8:	4804      	ldr	r0, [pc, #16]	; (d6bcc <module_user_init_hook+0x2c>)
   d6bba:	f7fe fec7 	bl	d594c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bbe:	2100      	movs	r1, #0
   d6bc0:	4803      	ldr	r0, [pc, #12]	; (d6bd0 <module_user_init_hook+0x30>)
}
   d6bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6bc6:	f7fe be35 	b.w	d5834 <system_ctrl_set_app_request_handler>
   d6bca:	bf00      	nop
   d6bcc:	00000000 	.word	0x00000000
   d6bd0:	000d6b69 	.word	0x000d6b69

000d6bd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6bd4:	4770      	bx	lr

000d6bd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6bd6:	2000      	movs	r0, #0
   d6bd8:	4770      	bx	lr

000d6bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6bda:	b510      	push	{r4, lr}
   d6bdc:	2110      	movs	r1, #16
   d6bde:	4604      	mov	r4, r0
   d6be0:	f001 f956 	bl	d7e90 <_ZdlPvj>
   d6be4:	4620      	mov	r0, r4
   d6be6:	bd10      	pop	{r4, pc}

000d6be8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6be8:	b508      	push	{r3, lr}
      { delete this; }
   d6bea:	b108      	cbz	r0, d6bf0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6bec:	f7ff fff5 	bl	d6bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6bf0:	bd08      	pop	{r3, pc}

000d6bf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6bf2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6bf4:	68c4      	ldr	r4, [r0, #12]
   d6bf6:	b1ec      	cbz	r4, d6c34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6bf8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6bfa:	2b02      	cmp	r3, #2
   d6bfc:	d102      	bne.n	d6c04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6bfe:	68e0      	ldr	r0, [r4, #12]
   d6c00:	f7fe feb4 	bl	d596c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6c04:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6c06:	b135      	cbz	r5, d6c16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6c08:	4628      	mov	r0, r5
   d6c0a:	f7fd fb0b 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
   d6c0e:	2110      	movs	r1, #16
   d6c10:	4628      	mov	r0, r5
   d6c12:	f001 f93d 	bl	d7e90 <_ZdlPvj>
   d6c16:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6c18:	b135      	cbz	r5, d6c28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
   d6c1a:	4628      	mov	r0, r5
   d6c1c:	f7fd fb02 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
   d6c20:	2110      	movs	r1, #16
   d6c22:	4628      	mov	r0, r5
   d6c24:	f001 f934 	bl	d7e90 <_ZdlPvj>
   d6c28:	4620      	mov	r0, r4
   d6c2a:	2114      	movs	r1, #20
   d6c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6c30:	f001 b92e 	b.w	d7e90 <_ZdlPvj>
   d6c34:	bd38      	pop	{r3, r4, r5, pc}

000d6c36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6c36:	b513      	push	{r0, r1, r4, lr}
   d6c38:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c3a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6c3e:	2300      	movs	r3, #0
   d6c40:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c42:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c44:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6c46:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c48:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6c4a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6c4c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c4e:	f7fd fcd5 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c52:	4620      	mov	r0, r4
   d6c54:	b002      	add	sp, #8
   d6c56:	bd10      	pop	{r4, pc}

000d6c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c5a:	460c      	mov	r4, r1
   d6c5c:	ad02      	add	r5, sp, #8
   d6c5e:	f854 3b04 	ldr.w	r3, [r4], #4
   d6c62:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6c66:	4606      	mov	r6, r0
   d6c68:	460f      	mov	r7, r1
   d6c6a:	a801      	add	r0, sp, #4
   d6c6c:	4621      	mov	r1, r4
   d6c6e:	f7ff fa21 	bl	d60b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6c72:	4629      	mov	r1, r5
   d6c74:	4630      	mov	r0, r6
   d6c76:	f7ff ffde 	bl	d6c36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c7a:	a801      	add	r0, sp, #4
   d6c7c:	f7fd fcbe 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c80:	4620      	mov	r0, r4
   d6c82:	f7fd fcbb 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6c86:	4638      	mov	r0, r7
   d6c88:	2108      	movs	r1, #8
   d6c8a:	f001 f901 	bl	d7e90 <_ZdlPvj>
        return p;
    }
   d6c8e:	4630      	mov	r0, r6
   d6c90:	b003      	add	sp, #12
   d6c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6c94:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6c96:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6c98:	b90a      	cbnz	r2, d6c9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6c9a:	f001 f90a 	bl	d7eb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c9e:	68c3      	ldr	r3, [r0, #12]
    }
   d6ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ca4:	4718      	bx	r3

000d6ca6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6ca6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6ca8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6caa:	f100 0110 	add.w	r1, r0, #16
   d6cae:	f7ff fff1 	bl	d6c94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6cb2:	bd08      	pop	{r3, pc}

000d6cb4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cb4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6cb6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6cb8:	b90a      	cbnz	r2, d6cbe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6cba:	f001 f8fa 	bl	d7eb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cbe:	68c3      	ldr	r3, [r0, #12]
    }
   d6cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6cc4:	4718      	bx	r3

000d6cc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6cc6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6cc8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6cca:	f100 0110 	add.w	r1, r0, #16
   d6cce:	f7ff fff1 	bl	d6cb4 <_ZNKSt8functionIFvRKbEEclES1_>
   d6cd2:	bd08      	pop	{r3, pc}

000d6cd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6cd4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cd6:	2300      	movs	r3, #0
   d6cd8:	6083      	str	r3, [r0, #8]
   d6cda:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6cdc:	4604      	mov	r4, r0
   d6cde:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6ce0:	b12b      	cbz	r3, d6cee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ce2:	2202      	movs	r2, #2
   d6ce4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6ce6:	68eb      	ldr	r3, [r5, #12]
   d6ce8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6cea:	68ab      	ldr	r3, [r5, #8]
   d6cec:	60a3      	str	r3, [r4, #8]
	}
    }
   d6cee:	4620      	mov	r0, r4
   d6cf0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d6cf8:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6cfc:	b086      	sub	sp, #24
   d6cfe:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d00:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d04:	808b      	strh	r3, [r1, #4]
   d6d06:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d08:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6d0a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d0e:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6d10:	f04f 0002 	mov.w	r0, #2
   d6d14:	e8d4 1f4f 	ldrexb	r1, [r4]
   d6d18:	4299      	cmp	r1, r3
   d6d1a:	d103      	bne.n	d6d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d6d1c:	e8c4 0f45 	strexb	r5, r0, [r4]
   d6d20:	2d00      	cmp	r5, #0
   d6d22:	d1f7      	bne.n	d6d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6d24:	d002      	beq.n	d6d2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d6d26:	f88d 1000 	strb.w	r1, [sp]
   d6d2a:	e06b      	b.n	d6e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6d2c:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d30:	bf1e      	ittt	ne
   d6d32:	60e7      	strne	r7, [r4, #12]
   d6d34:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d36:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6d38:	2301      	movs	r3, #1
   d6d3a:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6d3e:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6d40:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6d42:	f104 0308 	add.w	r3, r4, #8
   d6d46:	f3bf 8f5f 	dmb	sy
   d6d4a:	e853 6f00 	ldrex	r6, [r3]
   d6d4e:	e843 0200 	strex	r2, r0, [r3]
   d6d52:	2a00      	cmp	r2, #0
   d6d54:	d1f9      	bne.n	d6d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d6d56:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6d5a:	2e00      	cmp	r6, #0
   d6d5c:	d052      	beq.n	d6e04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d5e:	f7fe fd51 	bl	d5804 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6d62:	b120      	cbz	r0, d6d6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d64:	4629      	mov	r1, r5
   d6d66:	4630      	mov	r0, r6
   d6d68:	f7ff ff94 	bl	d6c94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6d6c:	e043      	b.n	d6df6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d6e:	4631      	mov	r1, r6
   d6d70:	4668      	mov	r0, sp
   d6d72:	f7ff ffaf 	bl	d6cd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6d76:	68e0      	ldr	r0, [r4, #12]
   d6d78:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6d7c:	b108      	cbz	r0, d6d82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d6d7e:	f002 f861 	bl	d8e44 <strdup>
   d6d82:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d84:	2010      	movs	r0, #16
   d6d86:	f8ad 5014 	strh.w	r5, [sp, #20]
   d6d8a:	f7fd f984 	bl	d4096 <_Znwj>
   d6d8e:	4605      	mov	r5, r0
   d6d90:	b330      	cbz	r0, d6de0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d92:	f04f 0800 	mov.w	r8, #0
   d6d96:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d9a:	2018      	movs	r0, #24
   d6d9c:	f7fd f97b 	bl	d4096 <_Znwj>
   d6da0:	4604      	mov	r4, r0
   d6da2:	b1c0      	cbz	r0, d6dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6da4:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6da8:	4601      	mov	r1, r0
   d6daa:	4668      	mov	r0, sp
   d6dac:	f7ff fe8a 	bl	d6ac4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6db0:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6db2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6db4:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6db6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6db8:	9202      	str	r2, [sp, #8]
   d6dba:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dbc:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6dbe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d6dc2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dc4:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6dcc:	9b04      	ldr	r3, [sp, #16]
   d6dce:	9203      	str	r2, [sp, #12]
   d6dd0:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6dd2:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6dd6:	4b0e      	ldr	r3, [pc, #56]	; (d6e10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d6dd8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6dda:	4b0e      	ldr	r3, [pc, #56]	; (d6e14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ddc:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6dde:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6de0:	9804      	ldr	r0, [sp, #16]
   d6de2:	f7fe fdc3 	bl	d596c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6de6:	4668      	mov	r0, sp
   d6de8:	f7fd fa1c 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6dec:	2200      	movs	r2, #0
   d6dee:	4629      	mov	r1, r5
   d6df0:	4809      	ldr	r0, [pc, #36]	; (d6e18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d6df2:	f7fe fd0f 	bl	d5814 <application_thread_invoke>
   d6df6:	4630      	mov	r0, r6
   d6df8:	f7fd fa14 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6dfc:	2110      	movs	r1, #16
   d6dfe:	4630      	mov	r0, r6
   d6e00:	f001 f846 	bl	d7e90 <_ZdlPvj>
   d6e04:	4638      	mov	r0, r7
   d6e06:	f7fe fdb1 	bl	d596c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d6e0a:	b006      	add	sp, #24
   d6e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e10:	000d6ca7 	.word	0x000d6ca7
   d6e14:	000d6f05 	.word	0x000d6f05
   d6e18:	000d7419 	.word	0x000d7419

000d6e1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e20:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6e22:	ad07      	add	r5, sp, #28
   d6e24:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e28:	4606      	mov	r6, r0
   d6e2a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6e2c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6e2e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6e30:	460f      	mov	r7, r1
   d6e32:	4690      	mov	r8, r2
   d6e34:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6e38:	f8c5 b004 	str.w	fp, [r5, #4]
   d6e3c:	f8c5 b008 	str.w	fp, [r5, #8]
   d6e40:	9307      	str	r3, [sp, #28]
   d6e42:	f7fd f928 	bl	d4096 <_Znwj>
   d6e46:	4604      	mov	r4, r0
   d6e48:	b138      	cbz	r0, d6e5a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6e4a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6e4e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6e52:	f8c0 b004 	str.w	fp, [r0, #4]
   d6e56:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6e5a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6e5c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6e5e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6e60:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6e62:	f7fd f918 	bl	d4096 <_Znwj>
   d6e66:	b128      	cbz	r0, d6e74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6e68:	2301      	movs	r3, #1
   d6e6a:	6043      	str	r3, [r0, #4]
   d6e6c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6e6e:	4b23      	ldr	r3, [pc, #140]	; (d6efc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d6e70:	6003      	str	r3, [r0, #0]
   d6e72:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6e74:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6e76:	4b22      	ldr	r3, [pc, #136]	; (d6f00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d6e78:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6e7a:	2008      	movs	r0, #8
   d6e7c:	f7fd f90b 	bl	d4096 <_Znwj>
   d6e80:	4604      	mov	r4, r0
   d6e82:	b128      	cbz	r0, d6e90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e84:	9b03      	ldr	r3, [sp, #12]
   d6e86:	f840 3b04 	str.w	r3, [r0], #4
   d6e8a:	a904      	add	r1, sp, #16
   d6e8c:	f7ff f912 	bl	d60b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6e90:	9500      	str	r5, [sp, #0]
   d6e92:	fa5f f38a 	uxtb.w	r3, sl
   d6e96:	464a      	mov	r2, r9
   d6e98:	4641      	mov	r1, r8
   d6e9a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6e9c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6e9e:	f7fe fd3d 	bl	d591c <spark_send_event>
   d6ea2:	b9b8      	cbnz	r0, d6ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6ea4:	9b03      	ldr	r3, [sp, #12]
   d6ea6:	785b      	ldrb	r3, [r3, #1]
   d6ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6eac:	b993      	cbnz	r3, d6ed4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6eae:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6eb2:	a905      	add	r1, sp, #20
   d6eb4:	a803      	add	r0, sp, #12
   d6eb6:	9205      	str	r2, [sp, #20]
   d6eb8:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6ebc:	f7ff ff1a 	bl	d6cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6ec0:	9805      	ldr	r0, [sp, #20]
   d6ec2:	f7fe fd53 	bl	d596c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6ec6:	a805      	add	r0, sp, #20
   d6ec8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6eca:	f7ff fec5 	bl	d6c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ece:	a806      	add	r0, sp, #24
   d6ed0:	f7fd fb94 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ed4:	9b03      	ldr	r3, [sp, #12]
   d6ed6:	9305      	str	r3, [sp, #20]
   d6ed8:	a904      	add	r1, sp, #16
   d6eda:	a806      	add	r0, sp, #24
   d6edc:	f7ff f8ea 	bl	d60b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6ee0:	a905      	add	r1, sp, #20
   d6ee2:	4630      	mov	r0, r6
   d6ee4:	f7ff fea7 	bl	d6c36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ee8:	a806      	add	r0, sp, #24
   d6eea:	f7fd fb87 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6eee:	a804      	add	r0, sp, #16
   d6ef0:	f7fd fb84 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6ef4:	4630      	mov	r0, r6
   d6ef6:	b00b      	add	sp, #44	; 0x2c
   d6ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6efc:	000d9998 	.word	0x000d9998
   d6f00:	000d7071 	.word	0x000d7071

000d6f04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f0a:	d006      	beq.n	d6f1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6f0c:	2a03      	cmp	r2, #3
   d6f0e:	d017      	beq.n	d6f40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6f10:	2a01      	cmp	r2, #1
   d6f12:	d121      	bne.n	d6f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6f14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f16:	6003      	str	r3, [r0, #0]
	      break;
   d6f18:	e01e      	b.n	d6f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f1a:	2018      	movs	r0, #24
   d6f1c:	680e      	ldr	r6, [r1, #0]
   d6f1e:	f7fd f8ba 	bl	d4096 <_Znwj>
   d6f22:	4605      	mov	r5, r0
   d6f24:	b150      	cbz	r0, d6f3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f26:	4631      	mov	r1, r6
   d6f28:	f7ff fed4 	bl	d6cd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6f2c:	6930      	ldr	r0, [r6, #16]
   d6f2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6f32:	b108      	cbz	r0, d6f38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6f34:	f001 ff86 	bl	d8e44 <strdup>
   d6f38:	6128      	str	r0, [r5, #16]
   d6f3a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f3c:	6025      	str	r5, [r4, #0]
   d6f3e:	e00b      	b.n	d6f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6f40:	6804      	ldr	r4, [r0, #0]
   d6f42:	b14c      	cbz	r4, d6f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6f44:	6920      	ldr	r0, [r4, #16]
   d6f46:	f7fe fd11 	bl	d596c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	f7fd f96a 	bl	d4224 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6f50:	2118      	movs	r1, #24
   d6f52:	4620      	mov	r0, r4
   d6f54:	f000 ff9c 	bl	d7e90 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6f58:	2000      	movs	r0, #0
   d6f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f5c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6f5c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f5e:	2300      	movs	r3, #0
   d6f60:	6083      	str	r3, [r0, #8]
   d6f62:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6f64:	4604      	mov	r4, r0
   d6f66:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6f68:	b12b      	cbz	r3, d6f76 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6f6a:	2202      	movs	r2, #2
   d6f6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6f6e:	68eb      	ldr	r3, [r5, #12]
   d6f70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6f72:	68ab      	ldr	r3, [r5, #8]
   d6f74:	60a3      	str	r3, [r4, #8]
	}
    }
   d6f76:	4620      	mov	r0, r4
   d6f78:	bd38      	pop	{r3, r4, r5, pc}

000d6f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f7a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6f7c:	b570      	push	{r4, r5, r6, lr}
   d6f7e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6f80:	d006      	beq.n	d6f90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6f82:	2a03      	cmp	r2, #3
   d6f84:	d011      	beq.n	d6faa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6f86:	2a01      	cmp	r2, #1
   d6f88:	d118      	bne.n	d6fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6f8a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6f8c:	6003      	str	r3, [r0, #0]
	      break;
   d6f8e:	e015      	b.n	d6fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6f90:	2014      	movs	r0, #20
   d6f92:	680e      	ldr	r6, [r1, #0]
   d6f94:	f7fd f87f 	bl	d4096 <_Znwj>
   d6f98:	4605      	mov	r5, r0
   d6f9a:	b120      	cbz	r0, d6fa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6f9c:	4631      	mov	r1, r6
   d6f9e:	f7ff ffdd 	bl	d6f5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6fa2:	7c33      	ldrb	r3, [r6, #16]
   d6fa4:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6fa6:	6025      	str	r5, [r4, #0]
   d6fa8:	e008      	b.n	d6fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6faa:	6804      	ldr	r4, [r0, #0]
   d6fac:	b134      	cbz	r4, d6fbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6fae:	4620      	mov	r0, r4
   d6fb0:	f7fd f938 	bl	d4224 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6fb4:	2114      	movs	r1, #20
   d6fb6:	4620      	mov	r0, r4
   d6fb8:	f000 ff6a 	bl	d7e90 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6fbc:	2000      	movs	r0, #0
   d6fbe:	bd70      	pop	{r4, r5, r6, pc}

000d6fc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6fc0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6fc2:	2300      	movs	r3, #0
   d6fc4:	b087      	sub	sp, #28
   d6fc6:	460c      	mov	r4, r1
   d6fc8:	f3bf 8f5f 	dmb	sy
   d6fcc:	e850 6f00 	ldrex	r6, [r0]
   d6fd0:	e840 3200 	strex	r2, r3, [r0]
   d6fd4:	2a00      	cmp	r2, #0
   d6fd6:	d1f9      	bne.n	d6fcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6fd8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6fdc:	2e00      	cmp	r6, #0
   d6fde:	d03f      	beq.n	d7060 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6fe0:	4618      	mov	r0, r3
   d6fe2:	f7fe fc0f 	bl	d5804 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6fe6:	4607      	mov	r7, r0
   d6fe8:	b120      	cbz	r0, d6ff4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6fea:	4621      	mov	r1, r4
   d6fec:	4630      	mov	r0, r6
   d6fee:	f7ff fe61 	bl	d6cb4 <_ZNKSt8functionIFvRKbEEclES1_>
   d6ff2:	e02e      	b.n	d7052 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6ff4:	4631      	mov	r1, r6
   d6ff6:	a801      	add	r0, sp, #4
   d6ff8:	f7ff ffb0 	bl	d6f5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6ffc:	7823      	ldrb	r3, [r4, #0]
   d6ffe:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7002:	2010      	movs	r0, #16
   d7004:	f7fd f847 	bl	d4096 <_Znwj>
   d7008:	4605      	mov	r5, r0
   d700a:	b1d0      	cbz	r0, d7042 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d700c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d700e:	2014      	movs	r0, #20
   d7010:	f7fd f841 	bl	d4096 <_Znwj>
   d7014:	4604      	mov	r4, r0
   d7016:	b178      	cbz	r0, d7038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7018:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d701a:	4601      	mov	r1, r0
   d701c:	a801      	add	r0, sp, #4
   d701e:	f7ff fd51 	bl	d6ac4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7022:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7024:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7026:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7028:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d702a:	9203      	str	r2, [sp, #12]
   d702c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d702e:	60e3      	str	r3, [r4, #12]
   d7030:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7034:	9204      	str	r2, [sp, #16]
   d7036:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7038:	4b0a      	ldr	r3, [pc, #40]	; (d7064 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d703a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d703c:	4b0a      	ldr	r3, [pc, #40]	; (d7068 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d703e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7040:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7042:	a801      	add	r0, sp, #4
   d7044:	f7fd f8ee 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7048:	2200      	movs	r2, #0
   d704a:	4629      	mov	r1, r5
   d704c:	4807      	ldr	r0, [pc, #28]	; (d706c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d704e:	f7fe fbe1 	bl	d5814 <application_thread_invoke>
   d7052:	4630      	mov	r0, r6
   d7054:	f7fd f8e6 	bl	d4224 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7058:	2110      	movs	r1, #16
   d705a:	4630      	mov	r0, r6
   d705c:	f000 ff18 	bl	d7e90 <_ZdlPvj>
        }
    }
   d7060:	b007      	add	sp, #28
   d7062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7064:	000d6cc7 	.word	0x000d6cc7
   d7068:	000d6f7b 	.word	0x000d6f7b
   d706c:	000d7419 	.word	0x000d7419

000d7070 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7070:	b530      	push	{r4, r5, lr}
   d7072:	b085      	sub	sp, #20
   d7074:	4604      	mov	r4, r0
   d7076:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7078:	4668      	mov	r0, sp
   d707a:	4611      	mov	r1, r2
   d707c:	f7ff fdec 	bl	d6c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7080:	b17c      	cbz	r4, d70a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7082:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7084:	4628      	mov	r0, r5
   d7086:	b10d      	cbz	r5, d708c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7088:	f001 fedc 	bl	d8e44 <strdup>
   d708c:	9002      	str	r0, [sp, #8]
   d708e:	a902      	add	r1, sp, #8
   d7090:	4668      	mov	r0, sp
   d7092:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7096:	f7ff fe2d 	bl	d6cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d709a:	9802      	ldr	r0, [sp, #8]
   d709c:	f7fe fc66 	bl	d596c <free>
   d70a0:	e01d      	b.n	d70de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d70a2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d70a4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d70a8:	f04f 0201 	mov.w	r2, #1
   d70ac:	e8d0 3f4f 	ldrexb	r3, [r0]
   d70b0:	42a3      	cmp	r3, r4
   d70b2:	d103      	bne.n	d70bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d70b4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d70b8:	2900      	cmp	r1, #0
   d70ba:	d1f7      	bne.n	d70ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d70bc:	d002      	beq.n	d70c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d70be:	f88d 3008 	strb.w	r3, [sp, #8]
   d70c2:	e00c      	b.n	d70de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d70c4:	f110 010c 	adds.w	r1, r0, #12
   d70c8:	f04f 0301 	mov.w	r3, #1
   d70cc:	bf18      	it	ne
   d70ce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d70d0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d70d4:	3004      	adds	r0, #4
   d70d6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d70da:	f7ff ff71 	bl	d6fc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d70de:	a801      	add	r0, sp, #4
   d70e0:	f7fd fa8c 	bl	d45fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d70e4:	b005      	add	sp, #20
   d70e6:	bd30      	pop	{r4, r5, pc}

000d70e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d70e8:	4770      	bx	lr

000d70ea <_ZN9IPAddressD0Ev>:
   d70ea:	b510      	push	{r4, lr}
   d70ec:	2118      	movs	r1, #24
   d70ee:	4604      	mov	r4, r0
   d70f0:	f000 fece 	bl	d7e90 <_ZdlPvj>
   d70f4:	4620      	mov	r0, r4
   d70f6:	bd10      	pop	{r4, pc}

000d70f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d70f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d70fa:	7d03      	ldrb	r3, [r0, #20]
   d70fc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d70fe:	b08d      	sub	sp, #52	; 0x34
   d7100:	460e      	mov	r6, r1
   d7102:	f100 0704 	add.w	r7, r0, #4
   d7106:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d710a:	d002      	beq.n	d7112 <_ZNK9IPAddress7printToER5Print+0x1a>
   d710c:	f100 0508 	add.w	r5, r0, #8
   d7110:	e018      	b.n	d7144 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7112:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7114:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7116:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d711a:	232f      	movs	r3, #47	; 0x2f
   d711c:	462a      	mov	r2, r5
   d711e:	200a      	movs	r0, #10
   d7120:	f7fe fa20 	bl	d5564 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7124:	4628      	mov	r0, r5
   d7126:	f001 fea8 	bl	d8e7a <strlen>
   d712a:	6833      	ldr	r3, [r6, #0]
   d712c:	4602      	mov	r2, r0
   d712e:	68db      	ldr	r3, [r3, #12]
   d7130:	4629      	mov	r1, r5
   d7132:	4630      	mov	r0, r6
   d7134:	4798      	blx	r3
   d7136:	e00f      	b.n	d7158 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7138:	b124      	cbz	r4, d7144 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d713a:	212e      	movs	r1, #46	; 0x2e
   d713c:	4630      	mov	r0, r6
   d713e:	f7ff fa99 	bl	d6674 <_ZN5Print5printEc>
   d7142:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d7144:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7148:	220a      	movs	r2, #10
   d714a:	4630      	mov	r0, r6
   d714c:	f7ff fad8 	bl	d6700 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7150:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7152:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7154:	d1f0      	bne.n	d7138 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7156:	4620      	mov	r0, r4
    }
    return n;
}
   d7158:	b00d      	add	sp, #52	; 0x34
   d715a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d715c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d715c:	b510      	push	{r4, lr}
   d715e:	4b05      	ldr	r3, [pc, #20]	; (d7174 <_ZN9IPAddressC1Ev+0x18>)
   d7160:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7162:	2211      	movs	r2, #17
   d7164:	f840 3b04 	str.w	r3, [r0], #4
   d7168:	2100      	movs	r1, #0
   d716a:	f001 fe28 	bl	d8dbe <memset>
{
    clear();
}
   d716e:	4620      	mov	r0, r4
   d7170:	bd10      	pop	{r4, pc}
   d7172:	bf00      	nop
   d7174:	000d99b4 	.word	0x000d99b4

000d7178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7178:	4603      	mov	r3, r0
   d717a:	4a07      	ldr	r2, [pc, #28]	; (d7198 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d717c:	b510      	push	{r4, lr}
   d717e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7182:	f101 0210 	add.w	r2, r1, #16
   d7186:	f851 4b04 	ldr.w	r4, [r1], #4
   d718a:	f843 4b04 	str.w	r4, [r3], #4
   d718e:	4291      	cmp	r1, r2
   d7190:	d1f9      	bne.n	d7186 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7192:	780a      	ldrb	r2, [r1, #0]
   d7194:	701a      	strb	r2, [r3, #0]
}
   d7196:	bd10      	pop	{r4, pc}
   d7198:	000d99b4 	.word	0x000d99b4

000d719c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d719c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d719e:	2b04      	cmp	r3, #4
   d71a0:	d101      	bne.n	d71a6 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d71a2:	6840      	ldr	r0, [r0, #4]
   d71a4:	e008      	b.n	d71b8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d71a6:	2b06      	cmp	r3, #6
   d71a8:	d10a      	bne.n	d71c0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d71aa:	6843      	ldr	r3, [r0, #4]
   d71ac:	b153      	cbz	r3, d71c4 <_ZNK9IPAddresscvbEv+0x28>
   d71ae:	6883      	ldr	r3, [r0, #8]
   d71b0:	b143      	cbz	r3, d71c4 <_ZNK9IPAddresscvbEv+0x28>
   d71b2:	68c3      	ldr	r3, [r0, #12]
   d71b4:	b133      	cbz	r3, d71c4 <_ZNK9IPAddresscvbEv+0x28>
   d71b6:	6900      	ldr	r0, [r0, #16]
   d71b8:	3000      	adds	r0, #0
   d71ba:	bf18      	it	ne
   d71bc:	2001      	movne	r0, #1
   d71be:	4770      	bx	lr
   d71c0:	2000      	movs	r0, #0
   d71c2:	4770      	bx	lr
   d71c4:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d71c6:	4770      	bx	lr

000d71c8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d71c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d71ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d71ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d71d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d71d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d71da:	2304      	movs	r3, #4
   d71dc:	6041      	str	r1, [r0, #4]
   d71de:	7503      	strb	r3, [r0, #20]
   d71e0:	bd10      	pop	{r4, pc}

000d71e2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d71e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d71e4:	780d      	ldrb	r5, [r1, #0]
   d71e6:	788b      	ldrb	r3, [r1, #2]
   d71e8:	784a      	ldrb	r2, [r1, #1]
   d71ea:	78c9      	ldrb	r1, [r1, #3]
   d71ec:	9100      	str	r1, [sp, #0]
   d71ee:	4629      	mov	r1, r5
   d71f0:	f7ff ffea 	bl	d71c8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d71f4:	b003      	add	sp, #12
   d71f6:	bd30      	pop	{r4, r5, pc}

000d71f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d71f8:	7441      	strb	r1, [r0, #17]
   d71fa:	4770      	bx	lr

000d71fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d71fc:	4770      	bx	lr

000d71fe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d71fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7200:	2100      	movs	r1, #0
   d7202:	7c00      	ldrb	r0, [r0, #16]
   d7204:	f7fe fab6 	bl	d5774 <HAL_USB_USART_Receive_Data>
}
   d7208:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d720c:	bf28      	it	cs
   d720e:	f04f 30ff 	movcs.w	r0, #4294967295
   d7212:	bd08      	pop	{r3, pc}

000d7214 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7214:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7216:	2101      	movs	r1, #1
   d7218:	7c00      	ldrb	r0, [r0, #16]
   d721a:	f7fe faab 	bl	d5774 <HAL_USB_USART_Receive_Data>
}
   d721e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7222:	bf28      	it	cs
   d7224:	f04f 30ff 	movcs.w	r0, #4294967295
   d7228:	bd08      	pop	{r3, pc}

000d722a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d722a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d722c:	7c00      	ldrb	r0, [r0, #16]
   d722e:	f7fe fa99 	bl	d5764 <HAL_USB_USART_Available_Data_For_Write>
}
   d7232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7236:	bd08      	pop	{r3, pc}

000d7238 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7238:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d723a:	7c00      	ldrb	r0, [r0, #16]
   d723c:	f7fe fa8a 	bl	d5754 <HAL_USB_USART_Available_Data>
}
   d7240:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7244:	bd08      	pop	{r3, pc}

000d7246 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7246:	7c00      	ldrb	r0, [r0, #16]
   d7248:	f7fe baa4 	b.w	d5794 <HAL_USB_USART_Flush_Data>

000d724c <_ZN9USBSerialD0Ev>:
   d724c:	b510      	push	{r4, lr}
   d724e:	2114      	movs	r1, #20
   d7250:	4604      	mov	r4, r0
   d7252:	f000 fe1d 	bl	d7e90 <_ZdlPvj>
   d7256:	4620      	mov	r0, r4
   d7258:	bd10      	pop	{r4, pc}

000d725a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d725a:	b538      	push	{r3, r4, r5, lr}
   d725c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d725e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7260:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7262:	f7fe fa7f 	bl	d5764 <HAL_USB_USART_Available_Data_For_Write>
   d7266:	2800      	cmp	r0, #0
   d7268:	dc01      	bgt.n	d726e <_ZN9USBSerial5writeEh+0x14>
   d726a:	7c60      	ldrb	r0, [r4, #17]
   d726c:	b128      	cbz	r0, d727a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d726e:	4629      	mov	r1, r5
   d7270:	7c20      	ldrb	r0, [r4, #16]
   d7272:	f7fe fa87 	bl	d5784 <HAL_USB_USART_Send_Data>
   d7276:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d727a:	bd38      	pop	{r3, r4, r5, pc}

000d727c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d727c:	b510      	push	{r4, lr}
   d727e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7280:	2300      	movs	r3, #0
   d7282:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7288:	60a3      	str	r3, [r4, #8]
   d728a:	4b05      	ldr	r3, [pc, #20]	; (d72a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d728c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d728e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7290:	4608      	mov	r0, r1
{
  _serial = serial;
   d7292:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7294:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7296:	4611      	mov	r1, r2
   d7298:	f7fe fa4c 	bl	d5734 <HAL_USB_USART_Init>
}
   d729c:	4620      	mov	r0, r4
   d729e:	bd10      	pop	{r4, pc}
   d72a0:	000d99c8 	.word	0x000d99c8

000d72a4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d72a4:	2200      	movs	r2, #0
   d72a6:	7c00      	ldrb	r0, [r0, #16]
   d72a8:	f7fe ba4c 	b.w	d5744 <HAL_USB_USART_Begin>

000d72ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d72ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d72ae:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d72b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d72b2:	2100      	movs	r1, #0
   d72b4:	f001 fd83 	bl	d8dbe <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d72b8:	4620      	mov	r0, r4
   d72ba:	bd10      	pop	{r4, pc}

000d72bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d72bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d72be:	4d0e      	ldr	r5, [pc, #56]	; (d72f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d72c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d72c2:	a801      	add	r0, sp, #4
   d72c4:	f7ff fff2 	bl	d72ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d72c8:	6829      	ldr	r1, [r5, #0]
   d72ca:	f011 0401 	ands.w	r4, r1, #1
   d72ce:	d110      	bne.n	d72f2 <_Z16_fetch_usbserialv+0x36>
   d72d0:	4628      	mov	r0, r5
   d72d2:	f7fc fee6 	bl	d40a2 <__cxa_guard_acquire>
   d72d6:	b160      	cbz	r0, d72f2 <_Z16_fetch_usbserialv+0x36>
   d72d8:	aa01      	add	r2, sp, #4
   d72da:	4621      	mov	r1, r4
   d72dc:	4807      	ldr	r0, [pc, #28]	; (d72fc <_Z16_fetch_usbserialv+0x40>)
   d72de:	f7ff ffcd 	bl	d727c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d72e2:	4628      	mov	r0, r5
   d72e4:	f7fc fee2 	bl	d40ac <__cxa_guard_release>
   d72e8:	4a05      	ldr	r2, [pc, #20]	; (d7300 <_Z16_fetch_usbserialv+0x44>)
   d72ea:	4906      	ldr	r1, [pc, #24]	; (d7304 <_Z16_fetch_usbserialv+0x48>)
   d72ec:	4803      	ldr	r0, [pc, #12]	; (d72fc <_Z16_fetch_usbserialv+0x40>)
   d72ee:	f000 fdc1 	bl	d7e74 <__aeabi_atexit>
	return _usbserial;
}
   d72f2:	4802      	ldr	r0, [pc, #8]	; (d72fc <_Z16_fetch_usbserialv+0x40>)
   d72f4:	b007      	add	sp, #28
   d72f6:	bd30      	pop	{r4, r5, pc}
   d72f8:	2003e3d0 	.word	0x2003e3d0
   d72fc:	2003e3d4 	.word	0x2003e3d4
   d7300:	2003dd18 	.word	0x2003dd18
   d7304:	000d71fd 	.word	0x000d71fd

000d7308 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7308:	4770      	bx	lr

000d730a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d730a:	7441      	strb	r1, [r0, #17]
   d730c:	4770      	bx	lr

000d730e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d730e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7310:	7c00      	ldrb	r0, [r0, #16]
   d7312:	f7fe f977 	bl	d5604 <HAL_USART_Available_Data_For_Write>
}
   d7316:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d731a:	bd08      	pop	{r3, pc}

000d731c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d731c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d731e:	7c00      	ldrb	r0, [r0, #16]
   d7320:	f7fe f948 	bl	d55b4 <HAL_USART_Available_Data>
}
   d7324:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7328:	bd08      	pop	{r3, pc}

000d732a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d732a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d732c:	7c00      	ldrb	r0, [r0, #16]
   d732e:	f7fe f951 	bl	d55d4 <HAL_USART_Peek_Data>
}
   d7332:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7336:	bf28      	it	cs
   d7338:	f04f 30ff 	movcs.w	r0, #4294967295
   d733c:	bd08      	pop	{r3, pc}

000d733e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d733e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7340:	7c00      	ldrb	r0, [r0, #16]
   d7342:	f7fe f93f 	bl	d55c4 <HAL_USART_Read_Data>
}
   d7346:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d734a:	bf28      	it	cs
   d734c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7350:	bd08      	pop	{r3, pc}

000d7352 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7352:	7c00      	ldrb	r0, [r0, #16]
   d7354:	f7fe b946 	b.w	d55e4 <HAL_USART_Flush_Data>

000d7358 <_ZN11USARTSerialD0Ev>:
   d7358:	b510      	push	{r4, lr}
   d735a:	2114      	movs	r1, #20
   d735c:	4604      	mov	r4, r0
   d735e:	f000 fd97 	bl	d7e90 <_ZdlPvj>
   d7362:	4620      	mov	r0, r4
   d7364:	bd10      	pop	{r4, pc}

000d7366 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7366:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7368:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d736a:	4604      	mov	r4, r0
   d736c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d736e:	b925      	cbnz	r5, d737a <_ZN11USARTSerial5writeEh+0x14>
   d7370:	7c00      	ldrb	r0, [r0, #16]
   d7372:	f7fe f947 	bl	d5604 <HAL_USART_Available_Data_For_Write>
   d7376:	2800      	cmp	r0, #0
   d7378:	dd05      	ble.n	d7386 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d737a:	4631      	mov	r1, r6
   d737c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d737e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7382:	f7fe b90f 	b.w	d55a4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7386:	4628      	mov	r0, r5
   d7388:	bd70      	pop	{r4, r5, r6, pc}
	...

000d738c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d738c:	b510      	push	{r4, lr}
   d738e:	4604      	mov	r4, r0
   d7390:	4608      	mov	r0, r1
   d7392:	4611      	mov	r1, r2
   d7394:	2200      	movs	r2, #0
   d7396:	6062      	str	r2, [r4, #4]
   d7398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d739c:	60a2      	str	r2, [r4, #8]
   d739e:	4a05      	ldr	r2, [pc, #20]	; (d73b4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d73a0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d73a2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d73a4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d73a6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d73a8:	461a      	mov	r2, r3
   d73aa:	f7fe f8f3 	bl	d5594 <HAL_USART_Init>
}
   d73ae:	4620      	mov	r0, r4
   d73b0:	bd10      	pop	{r4, pc}
   d73b2:	bf00      	nop
   d73b4:	000d99f8 	.word	0x000d99f8

000d73b8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d73b8:	2300      	movs	r3, #0
   d73ba:	7c00      	ldrb	r0, [r0, #16]
   d73bc:	f7fe b92a 	b.w	d5614 <HAL_USART_BeginConfig>

000d73c0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d73c0:	2200      	movs	r2, #0
   d73c2:	f7ff bff9 	b.w	d73b8 <_ZN11USARTSerial5beginEmm>

000d73c6 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d73c6:	7c00      	ldrb	r0, [r0, #16]
   d73c8:	f7fe b914 	b.w	d55f4 <HAL_USART_Is_Enabled>

000d73cc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d73cc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d73ce:	4d0c      	ldr	r5, [pc, #48]	; (d7400 <_Z22__fetch_global_Serial1v+0x34>)
   d73d0:	6829      	ldr	r1, [r5, #0]
   d73d2:	f011 0401 	ands.w	r4, r1, #1
   d73d6:	d111      	bne.n	d73fc <_Z22__fetch_global_Serial1v+0x30>
   d73d8:	4628      	mov	r0, r5
   d73da:	f7fc fe62 	bl	d40a2 <__cxa_guard_acquire>
   d73de:	b168      	cbz	r0, d73fc <_Z22__fetch_global_Serial1v+0x30>
   d73e0:	4a08      	ldr	r2, [pc, #32]	; (d7404 <_Z22__fetch_global_Serial1v+0x38>)
   d73e2:	4b09      	ldr	r3, [pc, #36]	; (d7408 <_Z22__fetch_global_Serial1v+0x3c>)
   d73e4:	4809      	ldr	r0, [pc, #36]	; (d740c <_Z22__fetch_global_Serial1v+0x40>)
   d73e6:	4621      	mov	r1, r4
   d73e8:	f7ff ffd0 	bl	d738c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d73ec:	4628      	mov	r0, r5
   d73ee:	f7fc fe5d 	bl	d40ac <__cxa_guard_release>
   d73f2:	4a07      	ldr	r2, [pc, #28]	; (d7410 <_Z22__fetch_global_Serial1v+0x44>)
   d73f4:	4907      	ldr	r1, [pc, #28]	; (d7414 <_Z22__fetch_global_Serial1v+0x48>)
   d73f6:	4805      	ldr	r0, [pc, #20]	; (d740c <_Z22__fetch_global_Serial1v+0x40>)
   d73f8:	f000 fd3c 	bl	d7e74 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d73fc:	4803      	ldr	r0, [pc, #12]	; (d740c <_Z22__fetch_global_Serial1v+0x40>)
   d73fe:	bd38      	pop	{r3, r4, r5, pc}
   d7400:	2003e480 	.word	0x2003e480
   d7404:	2003e484 	.word	0x2003e484
   d7408:	2003e3fc 	.word	0x2003e3fc
   d740c:	2003e3e8 	.word	0x2003e3e8
   d7410:	2003dd18 	.word	0x2003dd18
   d7414:	000d7309 	.word	0x000d7309

000d7418 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7418:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d741a:	6883      	ldr	r3, [r0, #8]
   d741c:	4604      	mov	r4, r0
   d741e:	b90b      	cbnz	r3, d7424 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7420:	f000 fd47 	bl	d7eb2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7424:	68c3      	ldr	r3, [r0, #12]
   d7426:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7428:	68a3      	ldr	r3, [r4, #8]
   d742a:	b11b      	cbz	r3, d7434 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d742c:	2203      	movs	r2, #3
   d742e:	4621      	mov	r1, r4
   d7430:	4620      	mov	r0, r4
   d7432:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7434:	4620      	mov	r0, r4
   d7436:	2110      	movs	r1, #16
}
   d7438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d743c:	f000 bd28 	b.w	d7e90 <_ZdlPvj>

000d7440 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7440:	4770      	bx	lr

000d7442 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7444:	4606      	mov	r6, r0
   d7446:	4615      	mov	r5, r2
   d7448:	460c      	mov	r4, r1
   d744a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d744c:	42bc      	cmp	r4, r7
   d744e:	d006      	beq.n	d745e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7450:	6833      	ldr	r3, [r6, #0]
   d7452:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7456:	689b      	ldr	r3, [r3, #8]
   d7458:	4630      	mov	r0, r6
   d745a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d745c:	e7f6      	b.n	d744c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d745e:	4628      	mov	r0, r5
   d7460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7462 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7462:	2200      	movs	r2, #0
   d7464:	7c00      	ldrb	r0, [r0, #16]
   d7466:	f7fe b8fd 	b.w	d5664 <HAL_I2C_Write_Data>

000d746a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d746a:	2100      	movs	r1, #0
   d746c:	7c00      	ldrb	r0, [r0, #16]
   d746e:	f7fe b901 	b.w	d5674 <HAL_I2C_Available_Data>

000d7472 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7472:	2100      	movs	r1, #0
   d7474:	7c00      	ldrb	r0, [r0, #16]
   d7476:	f7fe b905 	b.w	d5684 <HAL_I2C_Read_Data>

000d747a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d747a:	2100      	movs	r1, #0
   d747c:	7c00      	ldrb	r0, [r0, #16]
   d747e:	f7fe b909 	b.w	d5694 <HAL_I2C_Peek_Data>

000d7482 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7482:	2100      	movs	r1, #0
   d7484:	7c00      	ldrb	r0, [r0, #16]
   d7486:	f7fe b90d 	b.w	d56a4 <HAL_I2C_Flush_Data>

000d748a <_ZN7TwoWireD0Ev>:
   d748a:	b510      	push	{r4, lr}
   d748c:	2114      	movs	r1, #20
   d748e:	4604      	mov	r4, r0
   d7490:	f000 fcfe 	bl	d7e90 <_ZdlPvj>
   d7494:	4620      	mov	r0, r4
   d7496:	bd10      	pop	{r4, pc}

000d7498 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7498:	b510      	push	{r4, lr}
   d749a:	4604      	mov	r4, r0
   d749c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d74a0:	4608      	mov	r0, r1
   d74a2:	60a3      	str	r3, [r4, #8]
   d74a4:	2100      	movs	r1, #0
   d74a6:	4b04      	ldr	r3, [pc, #16]	; (d74b8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d74a8:	7420      	strb	r0, [r4, #16]
   d74aa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d74ac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d74ae:	f7fe f909 	bl	d56c4 <HAL_I2C_Init>

}
   d74b2:	4620      	mov	r0, r4
   d74b4:	bd10      	pop	{r4, pc}
   d74b6:	bf00      	nop
   d74b8:	000d9a28 	.word	0x000d9a28

000d74bc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d74bc:	2300      	movs	r3, #0
   d74be:	461a      	mov	r2, r3
   d74c0:	4619      	mov	r1, r3
   d74c2:	7c00      	ldrb	r0, [r0, #16]
   d74c4:	f7fe b8ae 	b.w	d5624 <HAL_I2C_Begin>

000d74c8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d74c8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d74ca:	2400      	movs	r4, #0
   d74cc:	7c00      	ldrb	r0, [r0, #16]
   d74ce:	9400      	str	r4, [sp, #0]
   d74d0:	f7fe f8b0 	bl	d5634 <HAL_I2C_Request_Data>
  return result;
}
   d74d4:	b2c0      	uxtb	r0, r0
   d74d6:	b002      	add	sp, #8
   d74d8:	bd10      	pop	{r4, pc}

000d74da <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d74da:	2301      	movs	r3, #1
   d74dc:	f7ff bff4 	b.w	d74c8 <_ZN7TwoWire11requestFromEhhh>

000d74e0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d74e0:	2301      	movs	r3, #1
   d74e2:	b2d2      	uxtb	r2, r2
   d74e4:	b2c9      	uxtb	r1, r1
   d74e6:	f7ff bfef 	b.w	d74c8 <_ZN7TwoWire11requestFromEhhh>

000d74ea <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d74ea:	2200      	movs	r2, #0
   d74ec:	7c00      	ldrb	r0, [r0, #16]
   d74ee:	f7fe b8a9 	b.w	d5644 <HAL_I2C_Begin_Transmission>

000d74f2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d74f2:	2200      	movs	r2, #0
   d74f4:	7c00      	ldrb	r0, [r0, #16]
   d74f6:	f7fe b8ad 	b.w	d5654 <HAL_I2C_End_Transmission>

000d74fa <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d74fa:	2101      	movs	r1, #1
   d74fc:	f7ff bff9 	b.w	d74f2 <_ZN7TwoWire15endTransmissionEh>

000d7500 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7500:	2100      	movs	r1, #0
   d7502:	7c00      	ldrb	r0, [r0, #16]
   d7504:	f7fe b8d6 	b.w	d56b4 <HAL_I2C_Is_Enabled>

000d7508 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7508:	2200      	movs	r2, #0
   d750a:	4611      	mov	r1, r2
   d750c:	6840      	ldr	r0, [r0, #4]
   d750e:	f7fe b9dd 	b.w	d58cc <network_listening>

000d7512 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7512:	2200      	movs	r2, #0
   d7514:	4611      	mov	r1, r2
   d7516:	6840      	ldr	r0, [r0, #4]
   d7518:	f7fe b9e8 	b.w	d58ec <network_get_listen_timeout>

000d751c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d751c:	2200      	movs	r2, #0
   d751e:	6840      	ldr	r0, [r0, #4]
   d7520:	f7fe b9dc 	b.w	d58dc <network_set_listen_timeout>

000d7524 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7524:	2200      	movs	r2, #0
   d7526:	f081 0101 	eor.w	r1, r1, #1
   d752a:	6840      	ldr	r0, [r0, #4]
   d752c:	f7fe b9c6 	b.w	d58bc <network_listen>

000d7530 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7530:	2300      	movs	r3, #0
   d7532:	461a      	mov	r2, r3
   d7534:	4619      	mov	r1, r3
   d7536:	6840      	ldr	r0, [r0, #4]
   d7538:	f7fe b9b8 	b.w	d58ac <network_off>

000d753c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d753c:	2300      	movs	r3, #0
   d753e:	461a      	mov	r2, r3
   d7540:	4619      	mov	r1, r3
   d7542:	6840      	ldr	r0, [r0, #4]
   d7544:	f7fe b9aa 	b.w	d589c <network_on>

000d7548 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7548:	2200      	movs	r2, #0
   d754a:	4611      	mov	r1, r2
   d754c:	6840      	ldr	r0, [r0, #4]
   d754e:	f7fe b99d 	b.w	d588c <network_ready>

000d7552 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7552:	2200      	movs	r2, #0
   d7554:	4611      	mov	r1, r2
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7fe b988 	b.w	d586c <network_connecting>

000d755c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d755c:	2200      	movs	r2, #0
   d755e:	2102      	movs	r1, #2
   d7560:	6840      	ldr	r0, [r0, #4]
   d7562:	f7fe b98b 	b.w	d587c <network_disconnect>

000d7566 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7566:	2300      	movs	r3, #0
   d7568:	461a      	mov	r2, r3
   d756a:	6840      	ldr	r0, [r0, #4]
   d756c:	f7fe b976 	b.w	d585c <network_connect>

000d7570 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7570:	b110      	cbz	r0, d7578 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d7572:	6803      	ldr	r3, [r0, #0]
   d7574:	685b      	ldr	r3, [r3, #4]
   d7576:	4718      	bx	r3
   d7578:	4770      	bx	lr
	...

000d757c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d757c:	b538      	push	{r3, r4, r5, lr}
   d757e:	4b0c      	ldr	r3, [pc, #48]	; (d75b0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d7580:	6003      	str	r3, [r0, #0]
   d7582:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7584:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7588:	b108      	cbz	r0, d758e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d758a:	f7fc fd88 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d758e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7592:	b135      	cbz	r5, d75a2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7594:	4628      	mov	r0, r5
   d7596:	f7fc fe61 	bl	d425c <_ZN6ThreadD1Ev>
   d759a:	2104      	movs	r1, #4
   d759c:	4628      	mov	r0, r5
   d759e:	f000 fc77 	bl	d7e90 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d75a2:	68a0      	ldr	r0, [r4, #8]
   d75a4:	b108      	cbz	r0, d75aa <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d75a6:	f7ff ffe3 	bl	d7570 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d75aa:	4620      	mov	r0, r4
   d75ac:	bd38      	pop	{r3, r4, r5, pc}
   d75ae:	bf00      	nop
   d75b0:	000d9a50 	.word	0x000d9a50

000d75b4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d75b4:	b538      	push	{r3, r4, r5, lr}
   d75b6:	4c0d      	ldr	r4, [pc, #52]	; (d75ec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d75b8:	4b0d      	ldr	r3, [pc, #52]	; (d75f0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d75ba:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d75bc:	2500      	movs	r5, #0
   d75be:	2302      	movs	r3, #2
   d75c0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d75c4:	6063      	str	r3, [r4, #4]
   d75c6:	60a5      	str	r5, [r4, #8]
   d75c8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d75cc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d75d0:	f7fd ffa8 	bl	d5524 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d75d4:	4b07      	ldr	r3, [pc, #28]	; (d75f4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d75d6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d75da:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d75dc:	4620      	mov	r0, r4
   d75de:	4a06      	ldr	r2, [pc, #24]	; (d75f8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d75e0:	4906      	ldr	r1, [pc, #24]	; (d75fc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d75e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d75e6:	f000 bc45 	b.w	d7e74 <__aeabi_atexit>
   d75ea:	bf00      	nop
   d75ec:	2003e508 	.word	0x2003e508
   d75f0:	000d9b38 	.word	0x000d9b38
   d75f4:	000d9a50 	.word	0x000d9a50
   d75f8:	2003dd18 	.word	0x2003dd18
   d75fc:	000d757d 	.word	0x000d757d

000d7600 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7602:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7604:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7606:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d760a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d760c:	2201      	movs	r2, #1
   d760e:	f04f 33ff 	mov.w	r3, #4294967295
   d7612:	4621      	mov	r1, r4
   d7614:	47a8      	blx	r5
}
   d7616:	b003      	add	sp, #12
   d7618:	bd30      	pop	{r4, r5, pc}

000d761a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d761a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d761c:	6803      	ldr	r3, [r0, #0]
   d761e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7620:	f04f 33ff 	mov.w	r3, #4294967295
   d7624:	46a4      	mov	ip, r4
}
   d7626:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d762a:	4760      	bx	ip

000d762c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d762c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d762e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7630:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7632:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7636:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7638:	4621      	mov	r1, r4
   d763a:	4613      	mov	r3, r2
   d763c:	2201      	movs	r2, #1
   d763e:	47a8      	blx	r5
}
   d7640:	b003      	add	sp, #12
   d7642:	bd30      	pop	{r4, r5, pc}

000d7644 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7644:	4770      	bx	lr

000d7646 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7646:	b538      	push	{r3, r4, r5, lr}
   d7648:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d764a:	681a      	ldr	r2, [r3, #0]
   d764c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d764e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7650:	da05      	bge.n	d765e <_ZN9TCPClient9connectedEv+0x18>
   d7652:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7656:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d765a:	429a      	cmp	r2, r3
   d765c:	d001      	beq.n	d7662 <_ZN9TCPClient9connectedEv+0x1c>
   d765e:	2501      	movs	r5, #1
   d7660:	e00b      	b.n	d767a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7662:	6803      	ldr	r3, [r0, #0]
   d7664:	691b      	ldr	r3, [r3, #16]
   d7666:	4798      	blx	r3
   d7668:	2800      	cmp	r0, #0
   d766a:	bf14      	ite	ne
   d766c:	2501      	movne	r5, #1
   d766e:	2500      	moveq	r5, #0
        if (!rv) {
   d7670:	d103      	bne.n	d767a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7672:	6823      	ldr	r3, [r4, #0]
   d7674:	4620      	mov	r0, r4
   d7676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7678:	4798      	blx	r3
        }
    }
    return rv;
}
   d767a:	4628      	mov	r0, r5
   d767c:	bd38      	pop	{r3, r4, r5, pc}

000d767e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d767e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7680:	6818      	ldr	r0, [r3, #0]
}
   d7682:	43c0      	mvns	r0, r0
   d7684:	0fc0      	lsrs	r0, r0, #31
   d7686:	4770      	bx	lr

000d7688 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7688:	4770      	bx	lr

000d768a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d768a:	2000      	movs	r0, #0
   d768c:	4770      	bx	lr

000d768e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d768e:	b510      	push	{r4, lr}
   d7690:	2114      	movs	r1, #20
   d7692:	4604      	mov	r4, r0
   d7694:	f000 fbfc 	bl	d7e90 <_ZdlPvj>
   d7698:	4620      	mov	r0, r4
   d769a:	bd10      	pop	{r4, pc}

000d769c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d769c:	f7fc bcfd 	b.w	d409a <_ZdlPv>

000d76a0 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d76a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d76a4:	4698      	mov	r8, r3
    stop();
   d76a6:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d76a8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d76aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d76ac:	460c      	mov	r4, r1
   d76ae:	4606      	mov	r6, r0
   d76b0:	4617      	mov	r7, r2
    stop();
   d76b2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d76b4:	ab12      	add	r3, sp, #72	; 0x48
   d76b6:	2500      	movs	r5, #0
   d76b8:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d76bc:	462a      	mov	r2, r5
   d76be:	4629      	mov	r1, r5
   d76c0:	4620      	mov	r0, r4
   d76c2:	f7fd fe6f 	bl	d53a4 <netdb_getaddrinfo>
   d76c6:	2800      	cmp	r0, #0
   d76c8:	db3a      	blt.n	d7740 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d76ca:	9b00      	ldr	r3, [sp, #0]
   d76cc:	2b00      	cmp	r3, #0
   d76ce:	d039      	beq.n	d7744 <_ZN9TCPClient7connectEPKctm+0xa4>
   d76d0:	695b      	ldr	r3, [r3, #20]
   d76d2:	2b00      	cmp	r3, #0
   d76d4:	d036      	beq.n	d7744 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d76d6:	a806      	add	r0, sp, #24
   d76d8:	f7ff fd40 	bl	d715c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d76dc:	9b00      	ldr	r3, [sp, #0]
   d76de:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d76e0:	7863      	ldrb	r3, [r4, #1]
   d76e2:	2b02      	cmp	r3, #2
   d76e4:	d101      	bne.n	d76ea <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d76e6:	1d21      	adds	r1, r4, #4
   d76e8:	e013      	b.n	d7712 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d76ea:	2b0a      	cmp	r3, #10
   d76ec:	d114      	bne.n	d7718 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d76ee:	2211      	movs	r2, #17
   d76f0:	4629      	mov	r1, r5
   d76f2:	a801      	add	r0, sp, #4
   d76f4:	f001 fb63 	bl	d8dbe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d76f8:	68a3      	ldr	r3, [r4, #8]
   d76fa:	bb33      	cbnz	r3, d774a <_ZN9TCPClient7connectEPKctm+0xaa>
   d76fc:	68e3      	ldr	r3, [r4, #12]
   d76fe:	bb23      	cbnz	r3, d774a <_ZN9TCPClient7connectEPKctm+0xaa>
   d7700:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7704:	6925      	ldr	r5, [r4, #16]
   d7706:	f7fd ff35 	bl	d5574 <inet_htonl>
   d770a:	4285      	cmp	r5, r0
   d770c:	d11d      	bne.n	d774a <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d770e:	f104 0114 	add.w	r1, r4, #20
   d7712:	a806      	add	r0, sp, #24
   d7714:	f7ff fd65 	bl	d71e2 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7718:	a806      	add	r0, sp, #24
   d771a:	f7ff fd3f 	bl	d719c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d771e:	b188      	cbz	r0, d7744 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d7720:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7722:	ad07      	add	r5, sp, #28
   d7724:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7728:	4b18      	ldr	r3, [pc, #96]	; (d778c <_ZN9TCPClient7connectEPKctm+0xec>)
   d772a:	930c      	str	r3, [sp, #48]	; 0x30
   d772c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d772e:	ac0d      	add	r4, sp, #52	; 0x34
   d7730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7732:	682b      	ldr	r3, [r5, #0]
   d7734:	7023      	strb	r3, [r4, #0]
   d7736:	463a      	mov	r2, r7
   d7738:	4643      	mov	r3, r8
   d773a:	a90c      	add	r1, sp, #48	; 0x30
   d773c:	4630      	mov	r0, r6
   d773e:	47c8      	blx	r9
   d7740:	4604      	mov	r4, r0
   d7742:	e01c      	b.n	d777e <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d7744:	f04f 34ff 	mov.w	r4, #4294967295
   d7748:	e019      	b.n	d777e <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d774a:	f104 0308 	add.w	r3, r4, #8
   d774e:	ad01      	add	r5, sp, #4
   d7750:	3418      	adds	r4, #24
   d7752:	6818      	ldr	r0, [r3, #0]
   d7754:	6859      	ldr	r1, [r3, #4]
   d7756:	462a      	mov	r2, r5
   d7758:	c203      	stmia	r2!, {r0, r1}
   d775a:	3308      	adds	r3, #8
   d775c:	42a3      	cmp	r3, r4
   d775e:	4615      	mov	r5, r2
   d7760:	d1f7      	bne.n	d7752 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d7762:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7764:	a901      	add	r1, sp, #4
   d7766:	a80c      	add	r0, sp, #48	; 0x30
   d7768:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d776a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d776e:	f7ff fd03 	bl	d7178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7774:	ac07      	add	r4, sp, #28
   d7776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7778:	682b      	ldr	r3, [r5, #0]
   d777a:	7023      	strb	r3, [r4, #0]
   d777c:	e7cc      	b.n	d7718 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d777e:	9800      	ldr	r0, [sp, #0]
   d7780:	f7fd fe08 	bl	d5394 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d7784:	4620      	mov	r0, r4
   d7786:	b013      	add	sp, #76	; 0x4c
   d7788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d778c:	000d99b4 	.word	0x000d99b4

000d7790 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7792:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7794:	2200      	movs	r2, #0
   d7796:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7798:	9202      	str	r2, [sp, #8]
   d779a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d779c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d779e:	4604      	mov	r4, r0
   d77a0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d77a2:	d008      	beq.n	d77b6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d77a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d77a8:	fbb3 f1f2 	udiv	r1, r3, r2
   d77ac:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d77ae:	fb02 3111 	mls	r1, r2, r1, r3
   d77b2:	434a      	muls	r2, r1
   d77b4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d77b6:	6960      	ldr	r0, [r4, #20]
   d77b8:	2308      	movs	r3, #8
   d77ba:	9300      	str	r3, [sp, #0]
   d77bc:	f241 0205 	movw	r2, #4101	; 0x1005
   d77c0:	446b      	add	r3, sp
   d77c2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d77c6:	6800      	ldr	r0, [r0, #0]
   d77c8:	f7fd ff84 	bl	d56d4 <sock_setsockopt>
    if (ret < 0) {
   d77cc:	2800      	cmp	r0, #0
   d77ce:	db08      	blt.n	d77e2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d77d0:	6960      	ldr	r0, [r4, #20]
   d77d2:	2300      	movs	r3, #0
   d77d4:	4632      	mov	r2, r6
   d77d6:	4629      	mov	r1, r5
   d77d8:	6800      	ldr	r0, [r0, #0]
   d77da:	f7fd ff9b 	bl	d5714 <sock_send>
    if (ret < 0) {
   d77de:	2800      	cmp	r0, #0
   d77e0:	da04      	bge.n	d77ec <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d77e2:	f7fe f903 	bl	d59ec <__errno>
   d77e6:	6803      	ldr	r3, [r0, #0]
   d77e8:	6063      	str	r3, [r4, #4]
   d77ea:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d77ec:	b004      	add	sp, #16
   d77ee:	bd70      	pop	{r4, r5, r6, pc}

000d77f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d77f0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d77f2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d77f4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d77f6:	689b      	ldr	r3, [r3, #8]
   d77f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d77fa:	68a3      	ldr	r3, [r4, #8]
   d77fc:	3b01      	subs	r3, #1
   d77fe:	60a3      	str	r3, [r4, #8]
   d7800:	b92b      	cbnz	r3, d780e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7802:	6823      	ldr	r3, [r4, #0]
   d7804:	4620      	mov	r0, r4
   d7806:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d780c:	4718      	bx	r3
   d780e:	bd10      	pop	{r4, pc}

000d7810 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7810:	b570      	push	{r4, r5, r6, lr}
   d7812:	4604      	mov	r4, r0
   d7814:	694d      	ldr	r5, [r1, #20]
   d7816:	4b05      	ldr	r3, [pc, #20]	; (d782c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7818:	f844 3b04 	str.w	r3, [r4], #4
   d781c:	358c      	adds	r5, #140	; 0x8c
   d781e:	4606      	mov	r6, r0
   d7820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7824:	682b      	ldr	r3, [r5, #0]
   d7826:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7828:	4630      	mov	r0, r6
   d782a:	bd70      	pop	{r4, r5, r6, pc}
   d782c:	000d99b4 	.word	0x000d99b4

000d7830 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7830:	b510      	push	{r4, lr}
   d7832:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7834:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7838:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d783c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d783e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7840:	d005      	beq.n	d784e <_ZN9TCPClient4peekEv+0x1e>
   d7842:	6962      	ldr	r2, [r4, #20]
   d7844:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7848:	4413      	add	r3, r2
   d784a:	7918      	ldrb	r0, [r3, #4]
   d784c:	bd10      	pop	{r4, pc}
   d784e:	6803      	ldr	r3, [r0, #0]
   d7850:	691b      	ldr	r3, [r3, #16]
   d7852:	4798      	blx	r3
   d7854:	2800      	cmp	r0, #0
   d7856:	d1f4      	bne.n	d7842 <_ZN9TCPClient4peekEv+0x12>
   d7858:	f04f 30ff 	mov.w	r0, #4294967295
}
   d785c:	bd10      	pop	{r4, pc}

000d785e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d785e:	b510      	push	{r4, lr}
   d7860:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7862:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7866:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d786a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d786c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d786e:	d008      	beq.n	d7882 <_ZN9TCPClient4readEv+0x24>
   d7870:	6962      	ldr	r2, [r4, #20]
   d7872:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7876:	1c59      	adds	r1, r3, #1
   d7878:	4413      	add	r3, r2
   d787a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d787e:	7918      	ldrb	r0, [r3, #4]
   d7880:	bd10      	pop	{r4, pc}
   d7882:	6803      	ldr	r3, [r0, #0]
   d7884:	691b      	ldr	r3, [r3, #16]
   d7886:	4798      	blx	r3
   d7888:	2800      	cmp	r0, #0
   d788a:	d1f1      	bne.n	d7870 <_ZN9TCPClient4readEv+0x12>
   d788c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7890:	bd10      	pop	{r4, pc}

000d7892 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7894:	6943      	ldr	r3, [r0, #20]
   d7896:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7898:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d789c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d78a0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d78a2:	4605      	mov	r5, r0
   d78a4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d78a6:	d106      	bne.n	d78b6 <_ZN9TCPClient4readEPhj+0x24>
   d78a8:	6803      	ldr	r3, [r0, #0]
   d78aa:	691b      	ldr	r3, [r3, #16]
   d78ac:	4798      	blx	r3
   d78ae:	b910      	cbnz	r0, d78b6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d78b0:	f04f 34ff 	mov.w	r4, #4294967295
   d78b4:	e014      	b.n	d78e0 <_ZN9TCPClient4readEPhj+0x4e>
   d78b6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d78b8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d78bc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d78c0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d78c2:	42bc      	cmp	r4, r7
   d78c4:	bf28      	it	cs
   d78c6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d78c8:	4419      	add	r1, r3
   d78ca:	4622      	mov	r2, r4
   d78cc:	3104      	adds	r1, #4
   d78ce:	4630      	mov	r0, r6
   d78d0:	f001 fa4f 	bl	d8d72 <memcpy>
   d78d4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d78d6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d78da:	4423      	add	r3, r4
   d78dc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d78e0:	4620      	mov	r0, r4
   d78e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78e4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d78e4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d78e6:	2300      	movs	r3, #0
   d78e8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d78ec:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d78ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d78f2:	4770      	bx	lr

000d78f4 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d78f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d78f8:	4698      	mov	r8, r3
    stop();
   d78fa:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d78fc:	460d      	mov	r5, r1
   d78fe:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7902:	4606      	mov	r6, r0
   d7904:	4617      	mov	r7, r2
    stop();
   d7906:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7908:	7d2b      	ldrb	r3, [r5, #20]
   d790a:	6974      	ldr	r4, [r6, #20]
   d790c:	2b04      	cmp	r3, #4
   d790e:	bf0c      	ite	eq
   d7910:	2002      	moveq	r0, #2
   d7912:	200a      	movne	r0, #10
   d7914:	2206      	movs	r2, #6
   d7916:	2101      	movs	r1, #1
   d7918:	f7fd ff04 	bl	d5724 <sock_socket>
   d791c:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d791e:	6973      	ldr	r3, [r6, #20]
   d7920:	681c      	ldr	r4, [r3, #0]
   d7922:	2c00      	cmp	r4, #0
   d7924:	db5b      	blt.n	d79de <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d7926:	4630      	mov	r0, r6
   d7928:	f7ff ffdc 	bl	d78e4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d792c:	f1b8 0f00 	cmp.w	r8, #0
   d7930:	d017      	beq.n	d7962 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d7932:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d7934:	a903      	add	r1, sp, #12
   d7936:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d793a:	9303      	str	r3, [sp, #12]
   d793c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d7940:	f7fd fd68 	bl	d5414 <if_index_to_name>
   d7944:	2800      	cmp	r0, #0
   d7946:	db49      	blt.n	d79dc <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d7948:	6970      	ldr	r0, [r6, #20]
   d794a:	2306      	movs	r3, #6
   d794c:	9300      	str	r3, [sp, #0]
   d794e:	f241 020b 	movw	r2, #4107	; 0x100b
   d7952:	ab03      	add	r3, sp, #12
   d7954:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7958:	6800      	ldr	r0, [r0, #0]
   d795a:	f7fd febb 	bl	d56d4 <sock_setsockopt>
   d795e:	2800      	cmp	r0, #0
   d7960:	db3c      	blt.n	d79dc <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7962:	241c      	movs	r4, #28
   d7964:	4622      	mov	r2, r4
   d7966:	2100      	movs	r1, #0
   d7968:	a803      	add	r0, sp, #12
   d796a:	f001 fa28 	bl	d8dbe <memset>
    if (ip.version() == 4) {
   d796e:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7970:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7974:	2b04      	cmp	r3, #4
   d7976:	d10c      	bne.n	d7992 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7978:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d797a:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d797c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7980:	f7fd fe00 	bl	d5584 <inet_htons>
   d7984:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7988:	6868      	ldr	r0, [r5, #4]
   d798a:	f7fd fdf3 	bl	d5574 <inet_htonl>
   d798e:	9004      	str	r0, [sp, #16]
   d7990:	e013      	b.n	d79ba <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7992:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7994:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7996:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d799a:	f7fd fdf3 	bl	d5584 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d799e:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d79a0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d79a4:	1d2b      	adds	r3, r5, #4
   d79a6:	f105 0714 	add.w	r7, r5, #20
   d79aa:	6818      	ldr	r0, [r3, #0]
   d79ac:	6859      	ldr	r1, [r3, #4]
   d79ae:	4622      	mov	r2, r4
   d79b0:	c203      	stmia	r2!, {r0, r1}
   d79b2:	3308      	adds	r3, #8
   d79b4:	42bb      	cmp	r3, r7
   d79b6:	4614      	mov	r4, r2
   d79b8:	d1f7      	bne.n	d79aa <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d79ba:	6973      	ldr	r3, [r6, #20]
   d79bc:	221c      	movs	r2, #28
   d79be:	a903      	add	r1, sp, #12
   d79c0:	6818      	ldr	r0, [r3, #0]
   d79c2:	f7fd fe97 	bl	d56f4 <sock_connect>
   d79c6:	2800      	cmp	r0, #0
   d79c8:	db08      	blt.n	d79dc <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d79ca:	1d2c      	adds	r4, r5, #4
   d79cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d79ce:	6976      	ldr	r6, [r6, #20]
   d79d0:	368c      	adds	r6, #140	; 0x8c
   d79d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d79d4:	6823      	ldr	r3, [r4, #0]
   d79d6:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d79d8:	2401      	movs	r4, #1
   d79da:	e004      	b.n	d79e6 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d79dc:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d79de:	6833      	ldr	r3, [r6, #0]
   d79e0:	4630      	mov	r0, r6
   d79e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d79e4:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d79e6:	4620      	mov	r0, r4
   d79e8:	b00a      	add	sp, #40	; 0x28
   d79ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d79ee <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d79ee:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d79f0:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d79f2:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d79f4:	6818      	ldr	r0, [r3, #0]
   d79f6:	2800      	cmp	r0, #0
   d79f8:	db01      	blt.n	d79fe <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d79fa:	f7fd fe73 	bl	d56e4 <sock_close>
   d79fe:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7a00:	f04f 32ff 	mov.w	r2, #4294967295
   d7a04:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a06:	6960      	ldr	r0, [r4, #20]
   d7a08:	2211      	movs	r2, #17
   d7a0a:	2100      	movs	r1, #0
   d7a0c:	308c      	adds	r0, #140	; 0x8c
   d7a0e:	f001 f9d6 	bl	d8dbe <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7a12:	4620      	mov	r0, r4
}
   d7a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7a18:	f7ff bf64 	b.w	d78e4 <_ZN9TCPClient12flush_bufferEv>

000d7a1c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7a1c:	b530      	push	{r4, r5, lr}
   d7a1e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7a20:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7a24:	b08b      	sub	sp, #44	; 0x2c
   d7a26:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7a28:	b11b      	cbz	r3, d7a32 <_ZN9TCPClient9availableEv+0x16>
   d7a2a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7a2e:	429a      	cmp	r2, r3
   d7a30:	d040      	beq.n	d7ab4 <_ZN9TCPClient9availableEv+0x98>
   d7a32:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7a34:	6818      	ldr	r0, [r3, #0]
   d7a36:	2800      	cmp	r0, #0
   d7a38:	db3f      	blt.n	d7aba <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7a3a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7a3e:	2d7f      	cmp	r5, #127	; 0x7f
   d7a40:	d83b      	bhi.n	d7aba <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7a42:	1d19      	adds	r1, r3, #4
   d7a44:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7a48:	2308      	movs	r3, #8
   d7a4a:	4429      	add	r1, r5
   d7a4c:	f7fd fe5a 	bl	d5704 <sock_recv>
            if (ret > 0) {
   d7a50:	2800      	cmp	r0, #0
   d7a52:	dd0c      	ble.n	d7a6e <_ZN9TCPClient9availableEv+0x52>
   d7a54:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7a56:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a5a:	b90a      	cbnz	r2, d7a60 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7a5c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7a60:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7a62:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7a66:	4418      	add	r0, r3
   d7a68:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7a6c:	e025      	b.n	d7aba <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7a6e:	f7fd ffbd 	bl	d59ec <__errno>
   d7a72:	6803      	ldr	r3, [r0, #0]
   d7a74:	2b0b      	cmp	r3, #11
   d7a76:	d020      	beq.n	d7aba <_ZN9TCPClient9availableEv+0x9e>
   d7a78:	f7fd ffb8 	bl	d59ec <__errno>
   d7a7c:	6803      	ldr	r3, [r0, #0]
   d7a7e:	2b0b      	cmp	r3, #11
   d7a80:	d01b      	beq.n	d7aba <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7a82:	2320      	movs	r3, #32
   d7a84:	2500      	movs	r5, #0
   d7a86:	9302      	str	r3, [sp, #8]
   d7a88:	9503      	str	r5, [sp, #12]
   d7a8a:	f7fd ffaf 	bl	d59ec <__errno>
   d7a8e:	6803      	ldr	r3, [r0, #0]
   d7a90:	9301      	str	r3, [sp, #4]
   d7a92:	4b0e      	ldr	r3, [pc, #56]	; (d7acc <_ZN9TCPClient9availableEv+0xb0>)
   d7a94:	9300      	str	r3, [sp, #0]
   d7a96:	aa02      	add	r2, sp, #8
   d7a98:	462b      	mov	r3, r5
   d7a9a:	490d      	ldr	r1, [pc, #52]	; (d7ad0 <_ZN9TCPClient9availableEv+0xb4>)
   d7a9c:	2032      	movs	r0, #50	; 0x32
   d7a9e:	f7fd fe89 	bl	d57b4 <log_message>
                    sock_close(d_->sock);
   d7aa2:	6963      	ldr	r3, [r4, #20]
   d7aa4:	6818      	ldr	r0, [r3, #0]
   d7aa6:	f7fd fe1d 	bl	d56e4 <sock_close>
   d7aaa:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7aac:	f04f 32ff 	mov.w	r2, #4294967295
   d7ab0:	601a      	str	r2, [r3, #0]
   d7ab2:	e002      	b.n	d7aba <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7ab4:	f7ff ff16 	bl	d78e4 <_ZN9TCPClient12flush_bufferEv>
   d7ab8:	e7bb      	b.n	d7a32 <_ZN9TCPClient9availableEv+0x16>
   d7aba:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7abc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7ac0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7ac4:	1a18      	subs	r0, r3, r0
}
   d7ac6:	b00b      	add	sp, #44	; 0x2c
   d7ac8:	bd30      	pop	{r4, r5, pc}
   d7aca:	bf00      	nop
   d7acc:	000d9aeb 	.word	0x000d9aeb
   d7ad0:	000d9ae4 	.word	0x000d9ae4

000d7ad4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7ad4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7ad6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7ad8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7ada:	6001      	str	r1, [r0, #0]
   d7adc:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7ae0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7ae4:	3088      	adds	r0, #136	; 0x88
   d7ae6:	f7ff fb39 	bl	d715c <_ZN9IPAddressC1Ev>
}
   d7aea:	4620      	mov	r0, r4
   d7aec:	bd10      	pop	{r4, pc}
	...

000d7af0 <_ZN9TCPClientC1Ei>:
   d7af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7af4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7af6:	2300      	movs	r3, #0
   d7af8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7afa:	4a14      	ldr	r2, [pc, #80]	; (d7b4c <_ZN9TCPClientC1Ei+0x5c>)
   d7afc:	6043      	str	r3, [r0, #4]
   d7afe:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7b00:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7b02:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7b04:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b06:	20a0      	movs	r0, #160	; 0xa0
   d7b08:	460e      	mov	r6, r1
   d7b0a:	f7fc fac4 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7b0e:	4605      	mov	r5, r0
   d7b10:	b110      	cbz	r0, d7b18 <_ZN9TCPClientC1Ei+0x28>
   d7b12:	4631      	mov	r1, r6
   d7b14:	f7ff ffde 	bl	d7ad4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7b18:	2014      	movs	r0, #20
   d7b1a:	f7fc fabc 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7b1e:	4603      	mov	r3, r0
   d7b20:	b128      	cbz	r0, d7b2e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7b22:	2201      	movs	r2, #1
   d7b24:	6042      	str	r2, [r0, #4]
   d7b26:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7b28:	4a09      	ldr	r2, [pc, #36]	; (d7b50 <_ZN9TCPClientC1Ei+0x60>)
   d7b2a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7b2c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7b2e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7b30:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7b32:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7b34:	b128      	cbz	r0, d7b42 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7b36:	6843      	ldr	r3, [r0, #4]
   d7b38:	3b01      	subs	r3, #1
   d7b3a:	6043      	str	r3, [r0, #4]
   d7b3c:	b90b      	cbnz	r3, d7b42 <_ZN9TCPClientC1Ei+0x52>
   d7b3e:	f7ff fe57 	bl	d77f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7b42:	4620      	mov	r0, r4
   d7b44:	f7ff fece 	bl	d78e4 <_ZN9TCPClient12flush_bufferEv>
}
   d7b48:	4620      	mov	r0, r4
   d7b4a:	bd70      	pop	{r4, r5, r6, pc}
   d7b4c:	000d9aa0 	.word	0x000d9aa0
   d7b50:	000d9a84 	.word	0x000d9a84

000d7b54 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7b54:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7b56:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7b5a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7b5c:	f7ff ffc8 	bl	d7af0 <_ZN9TCPClientC1Ei>
}
   d7b60:	4620      	mov	r0, r4
   d7b62:	bd10      	pop	{r4, pc}

000d7b64 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7b64:	b510      	push	{r4, lr}
   d7b66:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7b68:	6800      	ldr	r0, [r0, #0]
   d7b6a:	2800      	cmp	r0, #0
   d7b6c:	db01      	blt.n	d7b72 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7b6e:	f7fd fdb9 	bl	d56e4 <sock_close>
    }
}
   d7b72:	4620      	mov	r0, r4
   d7b74:	bd10      	pop	{r4, pc}

000d7b76 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7b76:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7b78:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7b7a:	4620      	mov	r0, r4
   d7b7c:	f7ff fff2 	bl	d7b64 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7b80:	b124      	cbz	r4, d7b8c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7b82:	4620      	mov	r0, r4
   d7b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7b88:	f7fc ba87 	b.w	d409a <_ZdlPv>
   d7b8c:	bd10      	pop	{r4, pc}

000d7b8e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7b8e:	2200      	movs	r2, #0
   d7b90:	4611      	mov	r1, r2
   d7b92:	6840      	ldr	r0, [r0, #4]
   d7b94:	f7fd be7a 	b.w	d588c <network_ready>

000d7b98 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7b98:	2200      	movs	r2, #0
   d7b9a:	4611      	mov	r1, r2
   d7b9c:	6840      	ldr	r0, [r0, #4]
   d7b9e:	f7fd be95 	b.w	d58cc <network_listening>

000d7ba2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ba2:	2200      	movs	r2, #0
   d7ba4:	4611      	mov	r1, r2
   d7ba6:	6840      	ldr	r0, [r0, #4]
   d7ba8:	f7fd bea0 	b.w	d58ec <network_get_listen_timeout>

000d7bac <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7bac:	2200      	movs	r2, #0
   d7bae:	6840      	ldr	r0, [r0, #4]
   d7bb0:	f7fd be94 	b.w	d58dc <network_set_listen_timeout>

000d7bb4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7bb4:	2200      	movs	r2, #0
   d7bb6:	f081 0101 	eor.w	r1, r1, #1
   d7bba:	6840      	ldr	r0, [r0, #4]
   d7bbc:	f7fd be7e 	b.w	d58bc <network_listen>

000d7bc0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7bc0:	2300      	movs	r3, #0
   d7bc2:	461a      	mov	r2, r3
   d7bc4:	4619      	mov	r1, r3
   d7bc6:	6840      	ldr	r0, [r0, #4]
   d7bc8:	f7fd be70 	b.w	d58ac <network_off>

000d7bcc <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7bcc:	2300      	movs	r3, #0
   d7bce:	461a      	mov	r2, r3
   d7bd0:	4619      	mov	r1, r3
   d7bd2:	6840      	ldr	r0, [r0, #4]
   d7bd4:	f7fd be62 	b.w	d589c <network_on>

000d7bd8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7bd8:	2200      	movs	r2, #0
   d7bda:	4611      	mov	r1, r2
   d7bdc:	6840      	ldr	r0, [r0, #4]
   d7bde:	f7fd be45 	b.w	d586c <network_connecting>

000d7be2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7be2:	2200      	movs	r2, #0
   d7be4:	2102      	movs	r1, #2
   d7be6:	6840      	ldr	r0, [r0, #4]
   d7be8:	f7fd be48 	b.w	d587c <network_disconnect>

000d7bec <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7bec:	2300      	movs	r3, #0
   d7bee:	461a      	mov	r2, r3
   d7bf0:	6840      	ldr	r0, [r0, #4]
   d7bf2:	f7fd be33 	b.w	d585c <network_connect>
	...

000d7bf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7bf8:	4b02      	ldr	r3, [pc, #8]	; (d7c04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7bfa:	2204      	movs	r2, #4
   d7bfc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7bfe:	4a02      	ldr	r2, [pc, #8]	; (d7c08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7c00:	601a      	str	r2, [r3, #0]
   d7c02:	4770      	bx	lr
   d7c04:	2003e6d8 	.word	0x2003e6d8
   d7c08:	000d9b04 	.word	0x000d9b04

000d7c0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7c0c:	2300      	movs	r3, #0
   d7c0e:	461a      	mov	r2, r3
   d7c10:	6840      	ldr	r0, [r0, #4]
   d7c12:	f7fd be23 	b.w	d585c <network_connect>

000d7c16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7c16:	2200      	movs	r2, #0
   d7c18:	2102      	movs	r1, #2
   d7c1a:	6840      	ldr	r0, [r0, #4]
   d7c1c:	f7fd be2e 	b.w	d587c <network_disconnect>

000d7c20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7c20:	2200      	movs	r2, #0
   d7c22:	4611      	mov	r1, r2
   d7c24:	6840      	ldr	r0, [r0, #4]
   d7c26:	f7fd be21 	b.w	d586c <network_connecting>

000d7c2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7c2a:	2200      	movs	r2, #0
   d7c2c:	4611      	mov	r1, r2
   d7c2e:	6840      	ldr	r0, [r0, #4]
   d7c30:	f7fd be2c 	b.w	d588c <network_ready>

000d7c34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7c34:	2300      	movs	r3, #0
   d7c36:	461a      	mov	r2, r3
   d7c38:	4619      	mov	r1, r3
   d7c3a:	6840      	ldr	r0, [r0, #4]
   d7c3c:	f7fd be2e 	b.w	d589c <network_on>

000d7c40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7c40:	2300      	movs	r3, #0
   d7c42:	461a      	mov	r2, r3
   d7c44:	4619      	mov	r1, r3
   d7c46:	6840      	ldr	r0, [r0, #4]
   d7c48:	f7fd be30 	b.w	d58ac <network_off>

000d7c4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7c4c:	2200      	movs	r2, #0
   d7c4e:	f081 0101 	eor.w	r1, r1, #1
   d7c52:	6840      	ldr	r0, [r0, #4]
   d7c54:	f7fd be32 	b.w	d58bc <network_listen>

000d7c58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7c58:	2200      	movs	r2, #0
   d7c5a:	6840      	ldr	r0, [r0, #4]
   d7c5c:	f7fd be3e 	b.w	d58dc <network_set_listen_timeout>

000d7c60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7c60:	2200      	movs	r2, #0
   d7c62:	4611      	mov	r1, r2
   d7c64:	6840      	ldr	r0, [r0, #4]
   d7c66:	f7fd be41 	b.w	d58ec <network_get_listen_timeout>

000d7c6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7c6a:	2200      	movs	r2, #0
   d7c6c:	4611      	mov	r1, r2
   d7c6e:	6840      	ldr	r0, [r0, #4]
   d7c70:	f7fd be2c 	b.w	d58cc <network_listening>

000d7c74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7c78:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7c7a:	b095      	sub	sp, #84	; 0x54
   d7c7c:	4616      	mov	r6, r2
   d7c7e:	460d      	mov	r5, r1
   d7c80:	4607      	mov	r7, r0
    IPAddress addr;
   d7c82:	f7ff fa6b 	bl	d715c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7c86:	4621      	mov	r1, r4
   d7c88:	2220      	movs	r2, #32
   d7c8a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7c8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7c8e:	f001 f896 	bl	d8dbe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7c92:	2340      	movs	r3, #64	; 0x40
   d7c94:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7c96:	4621      	mov	r1, r4
   d7c98:	466b      	mov	r3, sp
   d7c9a:	aa0c      	add	r2, sp, #48	; 0x30
   d7c9c:	4630      	mov	r0, r6
   d7c9e:	f7fd fb81 	bl	d53a4 <netdb_getaddrinfo>
    if (!r) {
   d7ca2:	4604      	mov	r4, r0
   d7ca4:	2800      	cmp	r0, #0
   d7ca6:	d144      	bne.n	d7d32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7ca8:	4602      	mov	r2, r0
   d7caa:	2101      	movs	r1, #1
   d7cac:	6868      	ldr	r0, [r5, #4]
   d7cae:	f7fd fded 	bl	d588c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7cb2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7cb4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7cb6:	4622      	mov	r2, r4
   d7cb8:	6868      	ldr	r0, [r5, #4]
   d7cba:	f7fd fde7 	bl	d588c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7cbe:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7cc0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7cc2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7cc4:	2e00      	cmp	r6, #0
   d7cc6:	d034      	beq.n	d7d32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7cc8:	2900      	cmp	r1, #0
   d7cca:	d132      	bne.n	d7d32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7ccc:	6873      	ldr	r3, [r6, #4]
   d7cce:	2b02      	cmp	r3, #2
   d7cd0:	d002      	beq.n	d7cd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7cd2:	2b0a      	cmp	r3, #10
   d7cd4:	d009      	beq.n	d7cea <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7cd6:	e02a      	b.n	d7d2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7cd8:	f1b8 0f00 	cmp.w	r8, #0
   d7cdc:	d027      	beq.n	d7d2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7cde:	6971      	ldr	r1, [r6, #20]
   d7ce0:	4638      	mov	r0, r7
   d7ce2:	3104      	adds	r1, #4
   d7ce4:	f7ff fa7d 	bl	d71e2 <_ZN9IPAddressaSEPKh>
   d7ce8:	e020      	b.n	d7d2c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7cea:	f1b9 0f00 	cmp.w	r9, #0
   d7cee:	d01e      	beq.n	d7d2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7cf0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7cf2:	2211      	movs	r2, #17
   d7cf4:	a801      	add	r0, sp, #4
   d7cf6:	f001 f862 	bl	d8dbe <memset>
                    a.v = 6;
   d7cfa:	2306      	movs	r3, #6
   d7cfc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d00:	ad01      	add	r5, sp, #4
   d7d02:	f104 0308 	add.w	r3, r4, #8
   d7d06:	3418      	adds	r4, #24
   d7d08:	6818      	ldr	r0, [r3, #0]
   d7d0a:	6859      	ldr	r1, [r3, #4]
   d7d0c:	462a      	mov	r2, r5
   d7d0e:	c203      	stmia	r2!, {r0, r1}
   d7d10:	3308      	adds	r3, #8
   d7d12:	42a3      	cmp	r3, r4
   d7d14:	4615      	mov	r5, r2
   d7d16:	d1f7      	bne.n	d7d08 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7d18:	a901      	add	r1, sp, #4
   d7d1a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7d1c:	ad07      	add	r5, sp, #28
   d7d1e:	f7ff fa2b 	bl	d7178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d24:	1d3c      	adds	r4, r7, #4
   d7d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d28:	682b      	ldr	r3, [r5, #0]
   d7d2a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7d2c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d2e:	69f6      	ldr	r6, [r6, #28]
   d7d30:	e7c8      	b.n	d7cc4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7d32:	9800      	ldr	r0, [sp, #0]
   d7d34:	f7fd fb2e 	bl	d5394 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7d38:	4638      	mov	r0, r7
   d7d3a:	b015      	add	sp, #84	; 0x54
   d7d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7d40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7d40:	4b02      	ldr	r3, [pc, #8]	; (d7d4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7d42:	4a03      	ldr	r2, [pc, #12]	; (d7d50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7d44:	601a      	str	r2, [r3, #0]
   d7d46:	2200      	movs	r2, #0
   d7d48:	605a      	str	r2, [r3, #4]
   d7d4a:	4770      	bx	lr
   d7d4c:	2003e6e0 	.word	0x2003e6e0
   d7d50:	000d9b38 	.word	0x000d9b38

000d7d54 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7d54:	b510      	push	{r4, lr}
   d7d56:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7d58:	480f      	ldr	r0, [pc, #60]	; (d7d98 <pinAvailable+0x44>)
   d7d5a:	f7fd fea9 	bl	d5ab0 <_ZN8SPIClass9isEnabledEv>
   d7d5e:	b128      	cbz	r0, d7d6c <pinAvailable+0x18>
   d7d60:	f1a4 030b 	sub.w	r3, r4, #11
   d7d64:	2b02      	cmp	r3, #2
   d7d66:	d801      	bhi.n	d7d6c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7d68:	2000      	movs	r0, #0
   d7d6a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d7d6c:	f000 f862 	bl	d7e34 <_Z19__fetch_global_Wirev>
   d7d70:	f7ff fbc6 	bl	d7500 <_ZN7TwoWire9isEnabledEv>
   d7d74:	b108      	cbz	r0, d7d7a <pinAvailable+0x26>
   d7d76:	2c01      	cmp	r4, #1
   d7d78:	d9f6      	bls.n	d7d68 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7d7a:	f7ff fb27 	bl	d73cc <_Z22__fetch_global_Serial1v>
   d7d7e:	f7ff fb22 	bl	d73c6 <_ZN11USARTSerial9isEnabledEv>
   d7d82:	b118      	cbz	r0, d7d8c <pinAvailable+0x38>
   d7d84:	f1a4 0309 	sub.w	r3, r4, #9
   d7d88:	2b01      	cmp	r3, #1
   d7d8a:	d9ed      	bls.n	d7d68 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7d8c:	2c23      	cmp	r4, #35	; 0x23
   d7d8e:	bf8c      	ite	hi
   d7d90:	2000      	movhi	r0, #0
   d7d92:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7d94:	bd10      	pop	{r4, pc}
   d7d96:	bf00      	nop
   d7d98:	2003e6e8 	.word	0x2003e6e8

000d7d9c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7d9c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7d9e:	b538      	push	{r3, r4, r5, lr}
   d7da0:	4604      	mov	r4, r0
   d7da2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7da4:	d80a      	bhi.n	d7dbc <pinMode+0x20>
   d7da6:	29ff      	cmp	r1, #255	; 0xff
   d7da8:	d008      	beq.n	d7dbc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7daa:	f7ff ffd3 	bl	d7d54 <pinAvailable>
   d7dae:	b128      	cbz	r0, d7dbc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7db0:	4629      	mov	r1, r5
   d7db2:	4620      	mov	r0, r4
}
   d7db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7db8:	f7fd bb04 	b.w	d53c4 <HAL_Pin_Mode>
   d7dbc:	bd38      	pop	{r3, r4, r5, pc}

000d7dbe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7dbe:	b538      	push	{r3, r4, r5, lr}
   d7dc0:	4604      	mov	r4, r0
   d7dc2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7dc4:	f7fd fb06 	bl	d53d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7dc8:	28ff      	cmp	r0, #255	; 0xff
   d7dca:	d010      	beq.n	d7dee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7dcc:	2806      	cmp	r0, #6
   d7dce:	d804      	bhi.n	d7dda <digitalWrite+0x1c>
   d7dd0:	234d      	movs	r3, #77	; 0x4d
   d7dd2:	fa23 f000 	lsr.w	r0, r3, r0
   d7dd6:	07c3      	lsls	r3, r0, #31
   d7dd8:	d409      	bmi.n	d7dee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7dda:	4620      	mov	r0, r4
   d7ddc:	f7ff ffba 	bl	d7d54 <pinAvailable>
   d7de0:	b128      	cbz	r0, d7dee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7de2:	4629      	mov	r1, r5
   d7de4:	4620      	mov	r0, r4
}
   d7de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7dea:	f7fd bafb 	b.w	d53e4 <HAL_GPIO_Write>
   d7dee:	bd38      	pop	{r3, r4, r5, pc}

000d7df0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7df0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7df2:	4c0c      	ldr	r4, [pc, #48]	; (d7e24 <_GLOBAL__sub_I_SPI+0x34>)
   d7df4:	4e0c      	ldr	r6, [pc, #48]	; (d7e28 <_GLOBAL__sub_I_SPI+0x38>)
   d7df6:	4d0d      	ldr	r5, [pc, #52]	; (d7e2c <_GLOBAL__sub_I_SPI+0x3c>)
   d7df8:	2100      	movs	r1, #0
   d7dfa:	4620      	mov	r0, r4
   d7dfc:	f7fd fe44 	bl	d5a88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e00:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e02:	4c0b      	ldr	r4, [pc, #44]	; (d7e30 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7e04:	4632      	mov	r2, r6
   d7e06:	4629      	mov	r1, r5
   d7e08:	f000 f834 	bl	d7e74 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7e0c:	2101      	movs	r1, #1
   d7e0e:	4620      	mov	r0, r4
   d7e10:	f7fd fe3a 	bl	d5a88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7e14:	4632      	mov	r2, r6
   d7e16:	4629      	mov	r1, r5
   d7e18:	4620      	mov	r0, r4
   d7e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7e1e:	f000 b829 	b.w	d7e74 <__aeabi_atexit>
   d7e22:	bf00      	nop
   d7e24:	2003e6e8 	.word	0x2003e6e8
   d7e28:	2003dd18 	.word	0x2003dd18
   d7e2c:	000d5a79 	.word	0x000d5a79
   d7e30:	2003e6f8 	.word	0x2003e6f8

000d7e34 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7e34:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7e36:	4d0b      	ldr	r5, [pc, #44]	; (d7e64 <_Z19__fetch_global_Wirev+0x30>)
   d7e38:	6829      	ldr	r1, [r5, #0]
   d7e3a:	f011 0401 	ands.w	r4, r1, #1
   d7e3e:	d10f      	bne.n	d7e60 <_Z19__fetch_global_Wirev+0x2c>
   d7e40:	4628      	mov	r0, r5
   d7e42:	f7fc f92e 	bl	d40a2 <__cxa_guard_acquire>
   d7e46:	b158      	cbz	r0, d7e60 <_Z19__fetch_global_Wirev+0x2c>
   d7e48:	4621      	mov	r1, r4
   d7e4a:	4807      	ldr	r0, [pc, #28]	; (d7e68 <_Z19__fetch_global_Wirev+0x34>)
   d7e4c:	f7ff fb24 	bl	d7498 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7e50:	4628      	mov	r0, r5
   d7e52:	f7fc f92b 	bl	d40ac <__cxa_guard_release>
   d7e56:	4a05      	ldr	r2, [pc, #20]	; (d7e6c <_Z19__fetch_global_Wirev+0x38>)
   d7e58:	4905      	ldr	r1, [pc, #20]	; (d7e70 <_Z19__fetch_global_Wirev+0x3c>)
   d7e5a:	4803      	ldr	r0, [pc, #12]	; (d7e68 <_Z19__fetch_global_Wirev+0x34>)
   d7e5c:	f000 f80a 	bl	d7e74 <__aeabi_atexit>
	return wire;
}
   d7e60:	4801      	ldr	r0, [pc, #4]	; (d7e68 <_Z19__fetch_global_Wirev+0x34>)
   d7e62:	bd38      	pop	{r3, r4, r5, pc}
   d7e64:	2003e70c 	.word	0x2003e70c
   d7e68:	2003e710 	.word	0x2003e710
   d7e6c:	2003dd18 	.word	0x2003dd18
   d7e70:	000d7441 	.word	0x000d7441

000d7e74 <__aeabi_atexit>:
   d7e74:	460b      	mov	r3, r1
   d7e76:	4601      	mov	r1, r0
   d7e78:	4618      	mov	r0, r3
   d7e7a:	f000 be65 	b.w	d8b48 <__cxa_atexit>
	...

000d7e80 <_ZSt15get_new_handlerv>:
   d7e80:	4b02      	ldr	r3, [pc, #8]	; (d7e8c <_ZSt15get_new_handlerv+0xc>)
   d7e82:	6818      	ldr	r0, [r3, #0]
   d7e84:	f3bf 8f5f 	dmb	sy
   d7e88:	4770      	bx	lr
   d7e8a:	bf00      	nop
   d7e8c:	2003e724 	.word	0x2003e724

000d7e90 <_ZdlPvj>:
   d7e90:	f7fc b903 	b.w	d409a <_ZdlPv>

000d7e94 <_ZnwjRKSt9nothrow_t>:
   d7e94:	b510      	push	{r4, lr}
   d7e96:	2800      	cmp	r0, #0
   d7e98:	bf14      	ite	ne
   d7e9a:	4604      	movne	r4, r0
   d7e9c:	2401      	moveq	r4, #1
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	f7fd fd5c 	bl	d595c <malloc>
   d7ea4:	b920      	cbnz	r0, d7eb0 <_ZnwjRKSt9nothrow_t+0x1c>
   d7ea6:	f7ff ffeb 	bl	d7e80 <_ZSt15get_new_handlerv>
   d7eaa:	b108      	cbz	r0, d7eb0 <_ZnwjRKSt9nothrow_t+0x1c>
   d7eac:	4780      	blx	r0
   d7eae:	e7f6      	b.n	d7e9e <_ZnwjRKSt9nothrow_t+0xa>
   d7eb0:	bd10      	pop	{r4, pc}

000d7eb2 <_ZSt25__throw_bad_function_callv>:
   d7eb2:	b508      	push	{r3, lr}
   d7eb4:	f7fd fd8a 	bl	d59cc <abort>

000d7eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7eb8:	4b18      	ldr	r3, [pc, #96]	; (d7f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7eba:	681a      	ldr	r2, [r3, #0]
   d7ebc:	07d1      	lsls	r1, r2, #31
   d7ebe:	bf5c      	itt	pl
   d7ec0:	2201      	movpl	r2, #1
   d7ec2:	601a      	strpl	r2, [r3, #0]
   d7ec4:	4b16      	ldr	r3, [pc, #88]	; (d7f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ec6:	681a      	ldr	r2, [r3, #0]
   d7ec8:	07d2      	lsls	r2, r2, #31
   d7eca:	bf5c      	itt	pl
   d7ecc:	2201      	movpl	r2, #1
   d7ece:	601a      	strpl	r2, [r3, #0]
   d7ed0:	4b14      	ldr	r3, [pc, #80]	; (d7f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7ed2:	681a      	ldr	r2, [r3, #0]
   d7ed4:	07d0      	lsls	r0, r2, #31
   d7ed6:	bf5c      	itt	pl
   d7ed8:	2201      	movpl	r2, #1
   d7eda:	601a      	strpl	r2, [r3, #0]
   d7edc:	4b12      	ldr	r3, [pc, #72]	; (d7f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7ede:	681a      	ldr	r2, [r3, #0]
   d7ee0:	07d1      	lsls	r1, r2, #31
   d7ee2:	bf5c      	itt	pl
   d7ee4:	2201      	movpl	r2, #1
   d7ee6:	601a      	strpl	r2, [r3, #0]
   d7ee8:	4b10      	ldr	r3, [pc, #64]	; (d7f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7eea:	681a      	ldr	r2, [r3, #0]
   d7eec:	07d2      	lsls	r2, r2, #31
   d7eee:	bf5c      	itt	pl
   d7ef0:	2201      	movpl	r2, #1
   d7ef2:	601a      	strpl	r2, [r3, #0]
   d7ef4:	4b0e      	ldr	r3, [pc, #56]	; (d7f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7ef6:	681a      	ldr	r2, [r3, #0]
   d7ef8:	07d0      	lsls	r0, r2, #31
   d7efa:	bf5c      	itt	pl
   d7efc:	2201      	movpl	r2, #1
   d7efe:	601a      	strpl	r2, [r3, #0]
   d7f00:	4b0c      	ldr	r3, [pc, #48]	; (d7f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7f02:	681a      	ldr	r2, [r3, #0]
   d7f04:	07d1      	lsls	r1, r2, #31
   d7f06:	bf5c      	itt	pl
   d7f08:	2201      	movpl	r2, #1
   d7f0a:	601a      	strpl	r2, [r3, #0]
   d7f0c:	4b0a      	ldr	r3, [pc, #40]	; (d7f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7f0e:	681a      	ldr	r2, [r3, #0]
   d7f10:	07d2      	lsls	r2, r2, #31
   d7f12:	bf5c      	itt	pl
   d7f14:	2201      	movpl	r2, #1
   d7f16:	601a      	strpl	r2, [r3, #0]
   d7f18:	4770      	bx	lr
   d7f1a:	bf00      	nop
   d7f1c:	2003e744 	.word	0x2003e744
   d7f20:	2003e740 	.word	0x2003e740
   d7f24:	2003e73c 	.word	0x2003e73c
   d7f28:	2003e738 	.word	0x2003e738
   d7f2c:	2003e734 	.word	0x2003e734
   d7f30:	2003e730 	.word	0x2003e730
   d7f34:	2003e72c 	.word	0x2003e72c
   d7f38:	2003e728 	.word	0x2003e728

000d7f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7f3c:	4b24      	ldr	r3, [pc, #144]	; (d7fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7f3e:	681a      	ldr	r2, [r3, #0]
   d7f40:	07d0      	lsls	r0, r2, #31
   d7f42:	bf5c      	itt	pl
   d7f44:	2201      	movpl	r2, #1
   d7f46:	601a      	strpl	r2, [r3, #0]
   d7f48:	4b22      	ldr	r3, [pc, #136]	; (d7fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7f4a:	681a      	ldr	r2, [r3, #0]
   d7f4c:	07d1      	lsls	r1, r2, #31
   d7f4e:	bf5c      	itt	pl
   d7f50:	2201      	movpl	r2, #1
   d7f52:	601a      	strpl	r2, [r3, #0]
   d7f54:	4b20      	ldr	r3, [pc, #128]	; (d7fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7f56:	681a      	ldr	r2, [r3, #0]
   d7f58:	07d2      	lsls	r2, r2, #31
   d7f5a:	bf5c      	itt	pl
   d7f5c:	2201      	movpl	r2, #1
   d7f5e:	601a      	strpl	r2, [r3, #0]
   d7f60:	4b1e      	ldr	r3, [pc, #120]	; (d7fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7f62:	681a      	ldr	r2, [r3, #0]
   d7f64:	07d0      	lsls	r0, r2, #31
   d7f66:	bf5c      	itt	pl
   d7f68:	2201      	movpl	r2, #1
   d7f6a:	601a      	strpl	r2, [r3, #0]
   d7f6c:	4b1c      	ldr	r3, [pc, #112]	; (d7fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7f6e:	681a      	ldr	r2, [r3, #0]
   d7f70:	07d1      	lsls	r1, r2, #31
   d7f72:	bf5c      	itt	pl
   d7f74:	2201      	movpl	r2, #1
   d7f76:	601a      	strpl	r2, [r3, #0]
   d7f78:	4b1a      	ldr	r3, [pc, #104]	; (d7fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7f7a:	681a      	ldr	r2, [r3, #0]
   d7f7c:	07d2      	lsls	r2, r2, #31
   d7f7e:	bf5c      	itt	pl
   d7f80:	2201      	movpl	r2, #1
   d7f82:	601a      	strpl	r2, [r3, #0]
   d7f84:	4b18      	ldr	r3, [pc, #96]	; (d7fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7f86:	681a      	ldr	r2, [r3, #0]
   d7f88:	07d0      	lsls	r0, r2, #31
   d7f8a:	bf5c      	itt	pl
   d7f8c:	2201      	movpl	r2, #1
   d7f8e:	601a      	strpl	r2, [r3, #0]
   d7f90:	4b16      	ldr	r3, [pc, #88]	; (d7fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7f92:	681a      	ldr	r2, [r3, #0]
   d7f94:	07d1      	lsls	r1, r2, #31
   d7f96:	bf5c      	itt	pl
   d7f98:	2201      	movpl	r2, #1
   d7f9a:	601a      	strpl	r2, [r3, #0]
   d7f9c:	4b14      	ldr	r3, [pc, #80]	; (d7ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7f9e:	681a      	ldr	r2, [r3, #0]
   d7fa0:	07d2      	lsls	r2, r2, #31
   d7fa2:	bf5c      	itt	pl
   d7fa4:	2201      	movpl	r2, #1
   d7fa6:	601a      	strpl	r2, [r3, #0]
   d7fa8:	4b12      	ldr	r3, [pc, #72]	; (d7ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7faa:	681a      	ldr	r2, [r3, #0]
   d7fac:	07d0      	lsls	r0, r2, #31
   d7fae:	bf5c      	itt	pl
   d7fb0:	2201      	movpl	r2, #1
   d7fb2:	601a      	strpl	r2, [r3, #0]
   d7fb4:	4b10      	ldr	r3, [pc, #64]	; (d7ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7fb6:	681a      	ldr	r2, [r3, #0]
   d7fb8:	07d1      	lsls	r1, r2, #31
   d7fba:	bf5c      	itt	pl
   d7fbc:	2201      	movpl	r2, #1
   d7fbe:	601a      	strpl	r2, [r3, #0]
   d7fc0:	4b0e      	ldr	r3, [pc, #56]	; (d7ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7fc2:	681a      	ldr	r2, [r3, #0]
   d7fc4:	07d2      	lsls	r2, r2, #31
   d7fc6:	bf5c      	itt	pl
   d7fc8:	2201      	movpl	r2, #1
   d7fca:	601a      	strpl	r2, [r3, #0]
   d7fcc:	4770      	bx	lr
   d7fce:	bf00      	nop
   d7fd0:	2003e774 	.word	0x2003e774
   d7fd4:	2003e770 	.word	0x2003e770
   d7fd8:	2003e76c 	.word	0x2003e76c
   d7fdc:	2003e768 	.word	0x2003e768
   d7fe0:	2003e764 	.word	0x2003e764
   d7fe4:	2003e760 	.word	0x2003e760
   d7fe8:	2003e75c 	.word	0x2003e75c
   d7fec:	2003e758 	.word	0x2003e758
   d7ff0:	2003e754 	.word	0x2003e754
   d7ff4:	2003e750 	.word	0x2003e750
   d7ff8:	2003e74c 	.word	0x2003e74c
   d7ffc:	2003e748 	.word	0x2003e748

000d8000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8000:	4b24      	ldr	r3, [pc, #144]	; (d8094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8002:	681a      	ldr	r2, [r3, #0]
   d8004:	07d0      	lsls	r0, r2, #31
   d8006:	bf5c      	itt	pl
   d8008:	2201      	movpl	r2, #1
   d800a:	601a      	strpl	r2, [r3, #0]
   d800c:	4b22      	ldr	r3, [pc, #136]	; (d8098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d800e:	681a      	ldr	r2, [r3, #0]
   d8010:	07d1      	lsls	r1, r2, #31
   d8012:	bf5c      	itt	pl
   d8014:	2201      	movpl	r2, #1
   d8016:	601a      	strpl	r2, [r3, #0]
   d8018:	4b20      	ldr	r3, [pc, #128]	; (d809c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d801a:	681a      	ldr	r2, [r3, #0]
   d801c:	07d2      	lsls	r2, r2, #31
   d801e:	bf5c      	itt	pl
   d8020:	2201      	movpl	r2, #1
   d8022:	601a      	strpl	r2, [r3, #0]
   d8024:	4b1e      	ldr	r3, [pc, #120]	; (d80a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8026:	681a      	ldr	r2, [r3, #0]
   d8028:	07d0      	lsls	r0, r2, #31
   d802a:	bf5c      	itt	pl
   d802c:	2201      	movpl	r2, #1
   d802e:	601a      	strpl	r2, [r3, #0]
   d8030:	4b1c      	ldr	r3, [pc, #112]	; (d80a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8032:	681a      	ldr	r2, [r3, #0]
   d8034:	07d1      	lsls	r1, r2, #31
   d8036:	bf5c      	itt	pl
   d8038:	2201      	movpl	r2, #1
   d803a:	601a      	strpl	r2, [r3, #0]
   d803c:	4b1a      	ldr	r3, [pc, #104]	; (d80a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d803e:	681a      	ldr	r2, [r3, #0]
   d8040:	07d2      	lsls	r2, r2, #31
   d8042:	bf5c      	itt	pl
   d8044:	2201      	movpl	r2, #1
   d8046:	601a      	strpl	r2, [r3, #0]
   d8048:	4b18      	ldr	r3, [pc, #96]	; (d80ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d804a:	681a      	ldr	r2, [r3, #0]
   d804c:	07d0      	lsls	r0, r2, #31
   d804e:	bf5c      	itt	pl
   d8050:	2201      	movpl	r2, #1
   d8052:	601a      	strpl	r2, [r3, #0]
   d8054:	4b16      	ldr	r3, [pc, #88]	; (d80b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8056:	681a      	ldr	r2, [r3, #0]
   d8058:	07d1      	lsls	r1, r2, #31
   d805a:	bf5c      	itt	pl
   d805c:	2201      	movpl	r2, #1
   d805e:	601a      	strpl	r2, [r3, #0]
   d8060:	4b14      	ldr	r3, [pc, #80]	; (d80b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8062:	681a      	ldr	r2, [r3, #0]
   d8064:	07d2      	lsls	r2, r2, #31
   d8066:	bf5c      	itt	pl
   d8068:	2201      	movpl	r2, #1
   d806a:	601a      	strpl	r2, [r3, #0]
   d806c:	4b12      	ldr	r3, [pc, #72]	; (d80b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d806e:	681a      	ldr	r2, [r3, #0]
   d8070:	07d0      	lsls	r0, r2, #31
   d8072:	bf5c      	itt	pl
   d8074:	2201      	movpl	r2, #1
   d8076:	601a      	strpl	r2, [r3, #0]
   d8078:	4b10      	ldr	r3, [pc, #64]	; (d80bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d807a:	681a      	ldr	r2, [r3, #0]
   d807c:	07d1      	lsls	r1, r2, #31
   d807e:	bf5c      	itt	pl
   d8080:	2201      	movpl	r2, #1
   d8082:	601a      	strpl	r2, [r3, #0]
   d8084:	4b0e      	ldr	r3, [pc, #56]	; (d80c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8086:	681a      	ldr	r2, [r3, #0]
   d8088:	07d2      	lsls	r2, r2, #31
   d808a:	bf5c      	itt	pl
   d808c:	2201      	movpl	r2, #1
   d808e:	601a      	strpl	r2, [r3, #0]
   d8090:	4770      	bx	lr
   d8092:	bf00      	nop
   d8094:	2003e7a4 	.word	0x2003e7a4
   d8098:	2003e7a0 	.word	0x2003e7a0
   d809c:	2003e79c 	.word	0x2003e79c
   d80a0:	2003e798 	.word	0x2003e798
   d80a4:	2003e794 	.word	0x2003e794
   d80a8:	2003e790 	.word	0x2003e790
   d80ac:	2003e78c 	.word	0x2003e78c
   d80b0:	2003e788 	.word	0x2003e788
   d80b4:	2003e784 	.word	0x2003e784
   d80b8:	2003e780 	.word	0x2003e780
   d80bc:	2003e77c 	.word	0x2003e77c
   d80c0:	2003e778 	.word	0x2003e778

000d80c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d80c4:	4b18      	ldr	r3, [pc, #96]	; (d8128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d80c6:	681a      	ldr	r2, [r3, #0]
   d80c8:	07d1      	lsls	r1, r2, #31
   d80ca:	bf5c      	itt	pl
   d80cc:	2201      	movpl	r2, #1
   d80ce:	601a      	strpl	r2, [r3, #0]
   d80d0:	4b16      	ldr	r3, [pc, #88]	; (d812c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d80d2:	681a      	ldr	r2, [r3, #0]
   d80d4:	07d2      	lsls	r2, r2, #31
   d80d6:	bf5c      	itt	pl
   d80d8:	2201      	movpl	r2, #1
   d80da:	601a      	strpl	r2, [r3, #0]
   d80dc:	4b14      	ldr	r3, [pc, #80]	; (d8130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d80de:	681a      	ldr	r2, [r3, #0]
   d80e0:	07d0      	lsls	r0, r2, #31
   d80e2:	bf5c      	itt	pl
   d80e4:	2201      	movpl	r2, #1
   d80e6:	601a      	strpl	r2, [r3, #0]
   d80e8:	4b12      	ldr	r3, [pc, #72]	; (d8134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d80ea:	681a      	ldr	r2, [r3, #0]
   d80ec:	07d1      	lsls	r1, r2, #31
   d80ee:	bf5c      	itt	pl
   d80f0:	2201      	movpl	r2, #1
   d80f2:	601a      	strpl	r2, [r3, #0]
   d80f4:	4b10      	ldr	r3, [pc, #64]	; (d8138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d80f6:	681a      	ldr	r2, [r3, #0]
   d80f8:	07d2      	lsls	r2, r2, #31
   d80fa:	bf5c      	itt	pl
   d80fc:	2201      	movpl	r2, #1
   d80fe:	601a      	strpl	r2, [r3, #0]
   d8100:	4b0e      	ldr	r3, [pc, #56]	; (d813c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8102:	681a      	ldr	r2, [r3, #0]
   d8104:	07d0      	lsls	r0, r2, #31
   d8106:	bf5c      	itt	pl
   d8108:	2201      	movpl	r2, #1
   d810a:	601a      	strpl	r2, [r3, #0]
   d810c:	4b0c      	ldr	r3, [pc, #48]	; (d8140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d810e:	681a      	ldr	r2, [r3, #0]
   d8110:	07d1      	lsls	r1, r2, #31
   d8112:	bf5c      	itt	pl
   d8114:	2201      	movpl	r2, #1
   d8116:	601a      	strpl	r2, [r3, #0]
   d8118:	4b0a      	ldr	r3, [pc, #40]	; (d8144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d811a:	681a      	ldr	r2, [r3, #0]
   d811c:	07d2      	lsls	r2, r2, #31
   d811e:	bf5c      	itt	pl
   d8120:	2201      	movpl	r2, #1
   d8122:	601a      	strpl	r2, [r3, #0]
   d8124:	4770      	bx	lr
   d8126:	bf00      	nop
   d8128:	2003e7c4 	.word	0x2003e7c4
   d812c:	2003e7c0 	.word	0x2003e7c0
   d8130:	2003e7bc 	.word	0x2003e7bc
   d8134:	2003e7b8 	.word	0x2003e7b8
   d8138:	2003e7b4 	.word	0x2003e7b4
   d813c:	2003e7b0 	.word	0x2003e7b0
   d8140:	2003e7ac 	.word	0x2003e7ac
   d8144:	2003e7a8 	.word	0x2003e7a8

000d8148 <__aeabi_drsub>:
   d8148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d814c:	e002      	b.n	d8154 <__adddf3>
   d814e:	bf00      	nop

000d8150 <__aeabi_dsub>:
   d8150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8154 <__adddf3>:
   d8154:	b530      	push	{r4, r5, lr}
   d8156:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d815a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d815e:	ea94 0f05 	teq	r4, r5
   d8162:	bf08      	it	eq
   d8164:	ea90 0f02 	teqeq	r0, r2
   d8168:	bf1f      	itttt	ne
   d816a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d816e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d817a:	f000 80e2 	beq.w	d8342 <__adddf3+0x1ee>
   d817e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8186:	bfb8      	it	lt
   d8188:	426d      	neglt	r5, r5
   d818a:	dd0c      	ble.n	d81a6 <__adddf3+0x52>
   d818c:	442c      	add	r4, r5
   d818e:	ea80 0202 	eor.w	r2, r0, r2
   d8192:	ea81 0303 	eor.w	r3, r1, r3
   d8196:	ea82 0000 	eor.w	r0, r2, r0
   d819a:	ea83 0101 	eor.w	r1, r3, r1
   d819e:	ea80 0202 	eor.w	r2, r0, r2
   d81a2:	ea81 0303 	eor.w	r3, r1, r3
   d81a6:	2d36      	cmp	r5, #54	; 0x36
   d81a8:	bf88      	it	hi
   d81aa:	bd30      	pophi	{r4, r5, pc}
   d81ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d81b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d81b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d81b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d81bc:	d002      	beq.n	d81c4 <__adddf3+0x70>
   d81be:	4240      	negs	r0, r0
   d81c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d81c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d81c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d81cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d81d0:	d002      	beq.n	d81d8 <__adddf3+0x84>
   d81d2:	4252      	negs	r2, r2
   d81d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d81d8:	ea94 0f05 	teq	r4, r5
   d81dc:	f000 80a7 	beq.w	d832e <__adddf3+0x1da>
   d81e0:	f1a4 0401 	sub.w	r4, r4, #1
   d81e4:	f1d5 0e20 	rsbs	lr, r5, #32
   d81e8:	db0d      	blt.n	d8206 <__adddf3+0xb2>
   d81ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d81ee:	fa22 f205 	lsr.w	r2, r2, r5
   d81f2:	1880      	adds	r0, r0, r2
   d81f4:	f141 0100 	adc.w	r1, r1, #0
   d81f8:	fa03 f20e 	lsl.w	r2, r3, lr
   d81fc:	1880      	adds	r0, r0, r2
   d81fe:	fa43 f305 	asr.w	r3, r3, r5
   d8202:	4159      	adcs	r1, r3
   d8204:	e00e      	b.n	d8224 <__adddf3+0xd0>
   d8206:	f1a5 0520 	sub.w	r5, r5, #32
   d820a:	f10e 0e20 	add.w	lr, lr, #32
   d820e:	2a01      	cmp	r2, #1
   d8210:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8214:	bf28      	it	cs
   d8216:	f04c 0c02 	orrcs.w	ip, ip, #2
   d821a:	fa43 f305 	asr.w	r3, r3, r5
   d821e:	18c0      	adds	r0, r0, r3
   d8220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8228:	d507      	bpl.n	d823a <__adddf3+0xe6>
   d822a:	f04f 0e00 	mov.w	lr, #0
   d822e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8232:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8236:	eb6e 0101 	sbc.w	r1, lr, r1
   d823a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d823e:	d31b      	bcc.n	d8278 <__adddf3+0x124>
   d8240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8244:	d30c      	bcc.n	d8260 <__adddf3+0x10c>
   d8246:	0849      	lsrs	r1, r1, #1
   d8248:	ea5f 0030 	movs.w	r0, r0, rrx
   d824c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8250:	f104 0401 	add.w	r4, r4, #1
   d8254:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d825c:	f080 809a 	bcs.w	d8394 <__adddf3+0x240>
   d8260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8264:	bf08      	it	eq
   d8266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d826a:	f150 0000 	adcs.w	r0, r0, #0
   d826e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8272:	ea41 0105 	orr.w	r1, r1, r5
   d8276:	bd30      	pop	{r4, r5, pc}
   d8278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d827c:	4140      	adcs	r0, r0
   d827e:	eb41 0101 	adc.w	r1, r1, r1
   d8282:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8286:	f1a4 0401 	sub.w	r4, r4, #1
   d828a:	d1e9      	bne.n	d8260 <__adddf3+0x10c>
   d828c:	f091 0f00 	teq	r1, #0
   d8290:	bf04      	itt	eq
   d8292:	4601      	moveq	r1, r0
   d8294:	2000      	moveq	r0, #0
   d8296:	fab1 f381 	clz	r3, r1
   d829a:	bf08      	it	eq
   d829c:	3320      	addeq	r3, #32
   d829e:	f1a3 030b 	sub.w	r3, r3, #11
   d82a2:	f1b3 0220 	subs.w	r2, r3, #32
   d82a6:	da0c      	bge.n	d82c2 <__adddf3+0x16e>
   d82a8:	320c      	adds	r2, #12
   d82aa:	dd08      	ble.n	d82be <__adddf3+0x16a>
   d82ac:	f102 0c14 	add.w	ip, r2, #20
   d82b0:	f1c2 020c 	rsb	r2, r2, #12
   d82b4:	fa01 f00c 	lsl.w	r0, r1, ip
   d82b8:	fa21 f102 	lsr.w	r1, r1, r2
   d82bc:	e00c      	b.n	d82d8 <__adddf3+0x184>
   d82be:	f102 0214 	add.w	r2, r2, #20
   d82c2:	bfd8      	it	le
   d82c4:	f1c2 0c20 	rsble	ip, r2, #32
   d82c8:	fa01 f102 	lsl.w	r1, r1, r2
   d82cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d82d0:	bfdc      	itt	le
   d82d2:	ea41 010c 	orrle.w	r1, r1, ip
   d82d6:	4090      	lslle	r0, r2
   d82d8:	1ae4      	subs	r4, r4, r3
   d82da:	bfa2      	ittt	ge
   d82dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d82e0:	4329      	orrge	r1, r5
   d82e2:	bd30      	popge	{r4, r5, pc}
   d82e4:	ea6f 0404 	mvn.w	r4, r4
   d82e8:	3c1f      	subs	r4, #31
   d82ea:	da1c      	bge.n	d8326 <__adddf3+0x1d2>
   d82ec:	340c      	adds	r4, #12
   d82ee:	dc0e      	bgt.n	d830e <__adddf3+0x1ba>
   d82f0:	f104 0414 	add.w	r4, r4, #20
   d82f4:	f1c4 0220 	rsb	r2, r4, #32
   d82f8:	fa20 f004 	lsr.w	r0, r0, r4
   d82fc:	fa01 f302 	lsl.w	r3, r1, r2
   d8300:	ea40 0003 	orr.w	r0, r0, r3
   d8304:	fa21 f304 	lsr.w	r3, r1, r4
   d8308:	ea45 0103 	orr.w	r1, r5, r3
   d830c:	bd30      	pop	{r4, r5, pc}
   d830e:	f1c4 040c 	rsb	r4, r4, #12
   d8312:	f1c4 0220 	rsb	r2, r4, #32
   d8316:	fa20 f002 	lsr.w	r0, r0, r2
   d831a:	fa01 f304 	lsl.w	r3, r1, r4
   d831e:	ea40 0003 	orr.w	r0, r0, r3
   d8322:	4629      	mov	r1, r5
   d8324:	bd30      	pop	{r4, r5, pc}
   d8326:	fa21 f004 	lsr.w	r0, r1, r4
   d832a:	4629      	mov	r1, r5
   d832c:	bd30      	pop	{r4, r5, pc}
   d832e:	f094 0f00 	teq	r4, #0
   d8332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8336:	bf06      	itte	eq
   d8338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d833c:	3401      	addeq	r4, #1
   d833e:	3d01      	subne	r5, #1
   d8340:	e74e      	b.n	d81e0 <__adddf3+0x8c>
   d8342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8346:	bf18      	it	ne
   d8348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d834c:	d029      	beq.n	d83a2 <__adddf3+0x24e>
   d834e:	ea94 0f05 	teq	r4, r5
   d8352:	bf08      	it	eq
   d8354:	ea90 0f02 	teqeq	r0, r2
   d8358:	d005      	beq.n	d8366 <__adddf3+0x212>
   d835a:	ea54 0c00 	orrs.w	ip, r4, r0
   d835e:	bf04      	itt	eq
   d8360:	4619      	moveq	r1, r3
   d8362:	4610      	moveq	r0, r2
   d8364:	bd30      	pop	{r4, r5, pc}
   d8366:	ea91 0f03 	teq	r1, r3
   d836a:	bf1e      	ittt	ne
   d836c:	2100      	movne	r1, #0
   d836e:	2000      	movne	r0, #0
   d8370:	bd30      	popne	{r4, r5, pc}
   d8372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8376:	d105      	bne.n	d8384 <__adddf3+0x230>
   d8378:	0040      	lsls	r0, r0, #1
   d837a:	4149      	adcs	r1, r1
   d837c:	bf28      	it	cs
   d837e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8382:	bd30      	pop	{r4, r5, pc}
   d8384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8388:	bf3c      	itt	cc
   d838a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d838e:	bd30      	popcc	{r4, r5, pc}
   d8390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d839c:	f04f 0000 	mov.w	r0, #0
   d83a0:	bd30      	pop	{r4, r5, pc}
   d83a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d83a6:	bf1a      	itte	ne
   d83a8:	4619      	movne	r1, r3
   d83aa:	4610      	movne	r0, r2
   d83ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d83b0:	bf1c      	itt	ne
   d83b2:	460b      	movne	r3, r1
   d83b4:	4602      	movne	r2, r0
   d83b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d83ba:	bf06      	itte	eq
   d83bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d83c0:	ea91 0f03 	teqeq	r1, r3
   d83c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d83c8:	bd30      	pop	{r4, r5, pc}
   d83ca:	bf00      	nop

000d83cc <__aeabi_ui2d>:
   d83cc:	f090 0f00 	teq	r0, #0
   d83d0:	bf04      	itt	eq
   d83d2:	2100      	moveq	r1, #0
   d83d4:	4770      	bxeq	lr
   d83d6:	b530      	push	{r4, r5, lr}
   d83d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d83e0:	f04f 0500 	mov.w	r5, #0
   d83e4:	f04f 0100 	mov.w	r1, #0
   d83e8:	e750      	b.n	d828c <__adddf3+0x138>
   d83ea:	bf00      	nop

000d83ec <__aeabi_i2d>:
   d83ec:	f090 0f00 	teq	r0, #0
   d83f0:	bf04      	itt	eq
   d83f2:	2100      	moveq	r1, #0
   d83f4:	4770      	bxeq	lr
   d83f6:	b530      	push	{r4, r5, lr}
   d83f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d83fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8404:	bf48      	it	mi
   d8406:	4240      	negmi	r0, r0
   d8408:	f04f 0100 	mov.w	r1, #0
   d840c:	e73e      	b.n	d828c <__adddf3+0x138>
   d840e:	bf00      	nop

000d8410 <__aeabi_f2d>:
   d8410:	0042      	lsls	r2, r0, #1
   d8412:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8416:	ea4f 0131 	mov.w	r1, r1, rrx
   d841a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d841e:	bf1f      	itttt	ne
   d8420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d842c:	4770      	bxne	lr
   d842e:	f092 0f00 	teq	r2, #0
   d8432:	bf14      	ite	ne
   d8434:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8438:	4770      	bxeq	lr
   d843a:	b530      	push	{r4, r5, lr}
   d843c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8448:	e720      	b.n	d828c <__adddf3+0x138>
   d844a:	bf00      	nop

000d844c <__aeabi_ul2d>:
   d844c:	ea50 0201 	orrs.w	r2, r0, r1
   d8450:	bf08      	it	eq
   d8452:	4770      	bxeq	lr
   d8454:	b530      	push	{r4, r5, lr}
   d8456:	f04f 0500 	mov.w	r5, #0
   d845a:	e00a      	b.n	d8472 <__aeabi_l2d+0x16>

000d845c <__aeabi_l2d>:
   d845c:	ea50 0201 	orrs.w	r2, r0, r1
   d8460:	bf08      	it	eq
   d8462:	4770      	bxeq	lr
   d8464:	b530      	push	{r4, r5, lr}
   d8466:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d846a:	d502      	bpl.n	d8472 <__aeabi_l2d+0x16>
   d846c:	4240      	negs	r0, r0
   d846e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8472:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8476:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d847a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d847e:	f43f aedc 	beq.w	d823a <__adddf3+0xe6>
   d8482:	f04f 0203 	mov.w	r2, #3
   d8486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d848a:	bf18      	it	ne
   d848c:	3203      	addne	r2, #3
   d848e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8492:	bf18      	it	ne
   d8494:	3203      	addne	r2, #3
   d8496:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d849a:	f1c2 0320 	rsb	r3, r2, #32
   d849e:	fa00 fc03 	lsl.w	ip, r0, r3
   d84a2:	fa20 f002 	lsr.w	r0, r0, r2
   d84a6:	fa01 fe03 	lsl.w	lr, r1, r3
   d84aa:	ea40 000e 	orr.w	r0, r0, lr
   d84ae:	fa21 f102 	lsr.w	r1, r1, r2
   d84b2:	4414      	add	r4, r2
   d84b4:	e6c1      	b.n	d823a <__adddf3+0xe6>
   d84b6:	bf00      	nop

000d84b8 <__aeabi_dmul>:
   d84b8:	b570      	push	{r4, r5, r6, lr}
   d84ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d84be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d84c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d84c6:	bf1d      	ittte	ne
   d84c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d84cc:	ea94 0f0c 	teqne	r4, ip
   d84d0:	ea95 0f0c 	teqne	r5, ip
   d84d4:	f000 f8de 	bleq	d8694 <__aeabi_dmul+0x1dc>
   d84d8:	442c      	add	r4, r5
   d84da:	ea81 0603 	eor.w	r6, r1, r3
   d84de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d84e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d84e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d84ea:	bf18      	it	ne
   d84ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d84f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d84f8:	d038      	beq.n	d856c <__aeabi_dmul+0xb4>
   d84fa:	fba0 ce02 	umull	ip, lr, r0, r2
   d84fe:	f04f 0500 	mov.w	r5, #0
   d8502:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8506:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d850a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d850e:	f04f 0600 	mov.w	r6, #0
   d8512:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8516:	f09c 0f00 	teq	ip, #0
   d851a:	bf18      	it	ne
   d851c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8520:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8524:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8528:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d852c:	d204      	bcs.n	d8538 <__aeabi_dmul+0x80>
   d852e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8532:	416d      	adcs	r5, r5
   d8534:	eb46 0606 	adc.w	r6, r6, r6
   d8538:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d853c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8540:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8544:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8548:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d854c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8550:	bf88      	it	hi
   d8552:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8556:	d81e      	bhi.n	d8596 <__aeabi_dmul+0xde>
   d8558:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d855c:	bf08      	it	eq
   d855e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8562:	f150 0000 	adcs.w	r0, r0, #0
   d8566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d856a:	bd70      	pop	{r4, r5, r6, pc}
   d856c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8570:	ea46 0101 	orr.w	r1, r6, r1
   d8574:	ea40 0002 	orr.w	r0, r0, r2
   d8578:	ea81 0103 	eor.w	r1, r1, r3
   d857c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8580:	bfc2      	ittt	gt
   d8582:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8586:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d858a:	bd70      	popgt	{r4, r5, r6, pc}
   d858c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8590:	f04f 0e00 	mov.w	lr, #0
   d8594:	3c01      	subs	r4, #1
   d8596:	f300 80ab 	bgt.w	d86f0 <__aeabi_dmul+0x238>
   d859a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d859e:	bfde      	ittt	le
   d85a0:	2000      	movle	r0, #0
   d85a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d85a6:	bd70      	pople	{r4, r5, r6, pc}
   d85a8:	f1c4 0400 	rsb	r4, r4, #0
   d85ac:	3c20      	subs	r4, #32
   d85ae:	da35      	bge.n	d861c <__aeabi_dmul+0x164>
   d85b0:	340c      	adds	r4, #12
   d85b2:	dc1b      	bgt.n	d85ec <__aeabi_dmul+0x134>
   d85b4:	f104 0414 	add.w	r4, r4, #20
   d85b8:	f1c4 0520 	rsb	r5, r4, #32
   d85bc:	fa00 f305 	lsl.w	r3, r0, r5
   d85c0:	fa20 f004 	lsr.w	r0, r0, r4
   d85c4:	fa01 f205 	lsl.w	r2, r1, r5
   d85c8:	ea40 0002 	orr.w	r0, r0, r2
   d85cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d85d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d85d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d85d8:	fa21 f604 	lsr.w	r6, r1, r4
   d85dc:	eb42 0106 	adc.w	r1, r2, r6
   d85e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d85e4:	bf08      	it	eq
   d85e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d85ea:	bd70      	pop	{r4, r5, r6, pc}
   d85ec:	f1c4 040c 	rsb	r4, r4, #12
   d85f0:	f1c4 0520 	rsb	r5, r4, #32
   d85f4:	fa00 f304 	lsl.w	r3, r0, r4
   d85f8:	fa20 f005 	lsr.w	r0, r0, r5
   d85fc:	fa01 f204 	lsl.w	r2, r1, r4
   d8600:	ea40 0002 	orr.w	r0, r0, r2
   d8604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d860c:	f141 0100 	adc.w	r1, r1, #0
   d8610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8614:	bf08      	it	eq
   d8616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d861a:	bd70      	pop	{r4, r5, r6, pc}
   d861c:	f1c4 0520 	rsb	r5, r4, #32
   d8620:	fa00 f205 	lsl.w	r2, r0, r5
   d8624:	ea4e 0e02 	orr.w	lr, lr, r2
   d8628:	fa20 f304 	lsr.w	r3, r0, r4
   d862c:	fa01 f205 	lsl.w	r2, r1, r5
   d8630:	ea43 0302 	orr.w	r3, r3, r2
   d8634:	fa21 f004 	lsr.w	r0, r1, r4
   d8638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d863c:	fa21 f204 	lsr.w	r2, r1, r4
   d8640:	ea20 0002 	bic.w	r0, r0, r2
   d8644:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d864c:	bf08      	it	eq
   d864e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8652:	bd70      	pop	{r4, r5, r6, pc}
   d8654:	f094 0f00 	teq	r4, #0
   d8658:	d10f      	bne.n	d867a <__aeabi_dmul+0x1c2>
   d865a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d865e:	0040      	lsls	r0, r0, #1
   d8660:	eb41 0101 	adc.w	r1, r1, r1
   d8664:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8668:	bf08      	it	eq
   d866a:	3c01      	subeq	r4, #1
   d866c:	d0f7      	beq.n	d865e <__aeabi_dmul+0x1a6>
   d866e:	ea41 0106 	orr.w	r1, r1, r6
   d8672:	f095 0f00 	teq	r5, #0
   d8676:	bf18      	it	ne
   d8678:	4770      	bxne	lr
   d867a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d867e:	0052      	lsls	r2, r2, #1
   d8680:	eb43 0303 	adc.w	r3, r3, r3
   d8684:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8688:	bf08      	it	eq
   d868a:	3d01      	subeq	r5, #1
   d868c:	d0f7      	beq.n	d867e <__aeabi_dmul+0x1c6>
   d868e:	ea43 0306 	orr.w	r3, r3, r6
   d8692:	4770      	bx	lr
   d8694:	ea94 0f0c 	teq	r4, ip
   d8698:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d869c:	bf18      	it	ne
   d869e:	ea95 0f0c 	teqne	r5, ip
   d86a2:	d00c      	beq.n	d86be <__aeabi_dmul+0x206>
   d86a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d86a8:	bf18      	it	ne
   d86aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d86ae:	d1d1      	bne.n	d8654 <__aeabi_dmul+0x19c>
   d86b0:	ea81 0103 	eor.w	r1, r1, r3
   d86b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86b8:	f04f 0000 	mov.w	r0, #0
   d86bc:	bd70      	pop	{r4, r5, r6, pc}
   d86be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d86c2:	bf06      	itte	eq
   d86c4:	4610      	moveq	r0, r2
   d86c6:	4619      	moveq	r1, r3
   d86c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d86cc:	d019      	beq.n	d8702 <__aeabi_dmul+0x24a>
   d86ce:	ea94 0f0c 	teq	r4, ip
   d86d2:	d102      	bne.n	d86da <__aeabi_dmul+0x222>
   d86d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d86d8:	d113      	bne.n	d8702 <__aeabi_dmul+0x24a>
   d86da:	ea95 0f0c 	teq	r5, ip
   d86de:	d105      	bne.n	d86ec <__aeabi_dmul+0x234>
   d86e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d86e4:	bf1c      	itt	ne
   d86e6:	4610      	movne	r0, r2
   d86e8:	4619      	movne	r1, r3
   d86ea:	d10a      	bne.n	d8702 <__aeabi_dmul+0x24a>
   d86ec:	ea81 0103 	eor.w	r1, r1, r3
   d86f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d86f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d86f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d86fc:	f04f 0000 	mov.w	r0, #0
   d8700:	bd70      	pop	{r4, r5, r6, pc}
   d8702:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8706:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d870a:	bd70      	pop	{r4, r5, r6, pc}

000d870c <__aeabi_ddiv>:
   d870c:	b570      	push	{r4, r5, r6, lr}
   d870e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8712:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8716:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d871a:	bf1d      	ittte	ne
   d871c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8720:	ea94 0f0c 	teqne	r4, ip
   d8724:	ea95 0f0c 	teqne	r5, ip
   d8728:	f000 f8a7 	bleq	d887a <__aeabi_ddiv+0x16e>
   d872c:	eba4 0405 	sub.w	r4, r4, r5
   d8730:	ea81 0e03 	eor.w	lr, r1, r3
   d8734:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8738:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d873c:	f000 8088 	beq.w	d8850 <__aeabi_ddiv+0x144>
   d8740:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8744:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8748:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d874c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8750:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8754:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8758:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d875c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8760:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8764:	429d      	cmp	r5, r3
   d8766:	bf08      	it	eq
   d8768:	4296      	cmpeq	r6, r2
   d876a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d876e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8772:	d202      	bcs.n	d877a <__aeabi_ddiv+0x6e>
   d8774:	085b      	lsrs	r3, r3, #1
   d8776:	ea4f 0232 	mov.w	r2, r2, rrx
   d877a:	1ab6      	subs	r6, r6, r2
   d877c:	eb65 0503 	sbc.w	r5, r5, r3
   d8780:	085b      	lsrs	r3, r3, #1
   d8782:	ea4f 0232 	mov.w	r2, r2, rrx
   d8786:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d878a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d878e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8792:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8796:	bf22      	ittt	cs
   d8798:	1ab6      	subcs	r6, r6, r2
   d879a:	4675      	movcs	r5, lr
   d879c:	ea40 000c 	orrcs.w	r0, r0, ip
   d87a0:	085b      	lsrs	r3, r3, #1
   d87a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d87a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d87aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87ae:	bf22      	ittt	cs
   d87b0:	1ab6      	subcs	r6, r6, r2
   d87b2:	4675      	movcs	r5, lr
   d87b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d87b8:	085b      	lsrs	r3, r3, #1
   d87ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d87be:	ebb6 0e02 	subs.w	lr, r6, r2
   d87c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87c6:	bf22      	ittt	cs
   d87c8:	1ab6      	subcs	r6, r6, r2
   d87ca:	4675      	movcs	r5, lr
   d87cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d87d0:	085b      	lsrs	r3, r3, #1
   d87d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d87d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d87da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d87de:	bf22      	ittt	cs
   d87e0:	1ab6      	subcs	r6, r6, r2
   d87e2:	4675      	movcs	r5, lr
   d87e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d87e8:	ea55 0e06 	orrs.w	lr, r5, r6
   d87ec:	d018      	beq.n	d8820 <__aeabi_ddiv+0x114>
   d87ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d87f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d87f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d87fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d87fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8802:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8806:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d880a:	d1c0      	bne.n	d878e <__aeabi_ddiv+0x82>
   d880c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8810:	d10b      	bne.n	d882a <__aeabi_ddiv+0x11e>
   d8812:	ea41 0100 	orr.w	r1, r1, r0
   d8816:	f04f 0000 	mov.w	r0, #0
   d881a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d881e:	e7b6      	b.n	d878e <__aeabi_ddiv+0x82>
   d8820:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8824:	bf04      	itt	eq
   d8826:	4301      	orreq	r1, r0
   d8828:	2000      	moveq	r0, #0
   d882a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d882e:	bf88      	it	hi
   d8830:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8834:	f63f aeaf 	bhi.w	d8596 <__aeabi_dmul+0xde>
   d8838:	ebb5 0c03 	subs.w	ip, r5, r3
   d883c:	bf04      	itt	eq
   d883e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8842:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8846:	f150 0000 	adcs.w	r0, r0, #0
   d884a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d884e:	bd70      	pop	{r4, r5, r6, pc}
   d8850:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8854:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8858:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d885c:	bfc2      	ittt	gt
   d885e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8862:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8866:	bd70      	popgt	{r4, r5, r6, pc}
   d8868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d886c:	f04f 0e00 	mov.w	lr, #0
   d8870:	3c01      	subs	r4, #1
   d8872:	e690      	b.n	d8596 <__aeabi_dmul+0xde>
   d8874:	ea45 0e06 	orr.w	lr, r5, r6
   d8878:	e68d      	b.n	d8596 <__aeabi_dmul+0xde>
   d887a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d887e:	ea94 0f0c 	teq	r4, ip
   d8882:	bf08      	it	eq
   d8884:	ea95 0f0c 	teqeq	r5, ip
   d8888:	f43f af3b 	beq.w	d8702 <__aeabi_dmul+0x24a>
   d888c:	ea94 0f0c 	teq	r4, ip
   d8890:	d10a      	bne.n	d88a8 <__aeabi_ddiv+0x19c>
   d8892:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8896:	f47f af34 	bne.w	d8702 <__aeabi_dmul+0x24a>
   d889a:	ea95 0f0c 	teq	r5, ip
   d889e:	f47f af25 	bne.w	d86ec <__aeabi_dmul+0x234>
   d88a2:	4610      	mov	r0, r2
   d88a4:	4619      	mov	r1, r3
   d88a6:	e72c      	b.n	d8702 <__aeabi_dmul+0x24a>
   d88a8:	ea95 0f0c 	teq	r5, ip
   d88ac:	d106      	bne.n	d88bc <__aeabi_ddiv+0x1b0>
   d88ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d88b2:	f43f aefd 	beq.w	d86b0 <__aeabi_dmul+0x1f8>
   d88b6:	4610      	mov	r0, r2
   d88b8:	4619      	mov	r1, r3
   d88ba:	e722      	b.n	d8702 <__aeabi_dmul+0x24a>
   d88bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88c0:	bf18      	it	ne
   d88c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88c6:	f47f aec5 	bne.w	d8654 <__aeabi_dmul+0x19c>
   d88ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d88ce:	f47f af0d 	bne.w	d86ec <__aeabi_dmul+0x234>
   d88d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d88d6:	f47f aeeb 	bne.w	d86b0 <__aeabi_dmul+0x1f8>
   d88da:	e712      	b.n	d8702 <__aeabi_dmul+0x24a>

000d88dc <__gedf2>:
   d88dc:	f04f 3cff 	mov.w	ip, #4294967295
   d88e0:	e006      	b.n	d88f0 <__cmpdf2+0x4>
   d88e2:	bf00      	nop

000d88e4 <__ledf2>:
   d88e4:	f04f 0c01 	mov.w	ip, #1
   d88e8:	e002      	b.n	d88f0 <__cmpdf2+0x4>
   d88ea:	bf00      	nop

000d88ec <__cmpdf2>:
   d88ec:	f04f 0c01 	mov.w	ip, #1
   d88f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d88f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d88f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8900:	bf18      	it	ne
   d8902:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8906:	d01b      	beq.n	d8940 <__cmpdf2+0x54>
   d8908:	b001      	add	sp, #4
   d890a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d890e:	bf0c      	ite	eq
   d8910:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8914:	ea91 0f03 	teqne	r1, r3
   d8918:	bf02      	ittt	eq
   d891a:	ea90 0f02 	teqeq	r0, r2
   d891e:	2000      	moveq	r0, #0
   d8920:	4770      	bxeq	lr
   d8922:	f110 0f00 	cmn.w	r0, #0
   d8926:	ea91 0f03 	teq	r1, r3
   d892a:	bf58      	it	pl
   d892c:	4299      	cmppl	r1, r3
   d892e:	bf08      	it	eq
   d8930:	4290      	cmpeq	r0, r2
   d8932:	bf2c      	ite	cs
   d8934:	17d8      	asrcs	r0, r3, #31
   d8936:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d893a:	f040 0001 	orr.w	r0, r0, #1
   d893e:	4770      	bx	lr
   d8940:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8944:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8948:	d102      	bne.n	d8950 <__cmpdf2+0x64>
   d894a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d894e:	d107      	bne.n	d8960 <__cmpdf2+0x74>
   d8950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8958:	d1d6      	bne.n	d8908 <__cmpdf2+0x1c>
   d895a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d895e:	d0d3      	beq.n	d8908 <__cmpdf2+0x1c>
   d8960:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8964:	4770      	bx	lr
   d8966:	bf00      	nop

000d8968 <__aeabi_cdrcmple>:
   d8968:	4684      	mov	ip, r0
   d896a:	4610      	mov	r0, r2
   d896c:	4662      	mov	r2, ip
   d896e:	468c      	mov	ip, r1
   d8970:	4619      	mov	r1, r3
   d8972:	4663      	mov	r3, ip
   d8974:	e000      	b.n	d8978 <__aeabi_cdcmpeq>
   d8976:	bf00      	nop

000d8978 <__aeabi_cdcmpeq>:
   d8978:	b501      	push	{r0, lr}
   d897a:	f7ff ffb7 	bl	d88ec <__cmpdf2>
   d897e:	2800      	cmp	r0, #0
   d8980:	bf48      	it	mi
   d8982:	f110 0f00 	cmnmi.w	r0, #0
   d8986:	bd01      	pop	{r0, pc}

000d8988 <__aeabi_dcmpeq>:
   d8988:	f84d ed08 	str.w	lr, [sp, #-8]!
   d898c:	f7ff fff4 	bl	d8978 <__aeabi_cdcmpeq>
   d8990:	bf0c      	ite	eq
   d8992:	2001      	moveq	r0, #1
   d8994:	2000      	movne	r0, #0
   d8996:	f85d fb08 	ldr.w	pc, [sp], #8
   d899a:	bf00      	nop

000d899c <__aeabi_dcmplt>:
   d899c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89a0:	f7ff ffea 	bl	d8978 <__aeabi_cdcmpeq>
   d89a4:	bf34      	ite	cc
   d89a6:	2001      	movcc	r0, #1
   d89a8:	2000      	movcs	r0, #0
   d89aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d89ae:	bf00      	nop

000d89b0 <__aeabi_dcmple>:
   d89b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89b4:	f7ff ffe0 	bl	d8978 <__aeabi_cdcmpeq>
   d89b8:	bf94      	ite	ls
   d89ba:	2001      	movls	r0, #1
   d89bc:	2000      	movhi	r0, #0
   d89be:	f85d fb08 	ldr.w	pc, [sp], #8
   d89c2:	bf00      	nop

000d89c4 <__aeabi_dcmpge>:
   d89c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89c8:	f7ff ffce 	bl	d8968 <__aeabi_cdrcmple>
   d89cc:	bf94      	ite	ls
   d89ce:	2001      	movls	r0, #1
   d89d0:	2000      	movhi	r0, #0
   d89d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d89d6:	bf00      	nop

000d89d8 <__aeabi_dcmpgt>:
   d89d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d89dc:	f7ff ffc4 	bl	d8968 <__aeabi_cdrcmple>
   d89e0:	bf34      	ite	cc
   d89e2:	2001      	movcc	r0, #1
   d89e4:	2000      	movcs	r0, #0
   d89e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d89ea:	bf00      	nop

000d89ec <__aeabi_dcmpun>:
   d89ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d89f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d89f4:	d102      	bne.n	d89fc <__aeabi_dcmpun+0x10>
   d89f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d89fa:	d10a      	bne.n	d8a12 <__aeabi_dcmpun+0x26>
   d89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a04:	d102      	bne.n	d8a0c <__aeabi_dcmpun+0x20>
   d8a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8a0a:	d102      	bne.n	d8a12 <__aeabi_dcmpun+0x26>
   d8a0c:	f04f 0000 	mov.w	r0, #0
   d8a10:	4770      	bx	lr
   d8a12:	f04f 0001 	mov.w	r0, #1
   d8a16:	4770      	bx	lr

000d8a18 <__aeabi_d2iz>:
   d8a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8a20:	d215      	bcs.n	d8a4e <__aeabi_d2iz+0x36>
   d8a22:	d511      	bpl.n	d8a48 <__aeabi_d2iz+0x30>
   d8a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8a2c:	d912      	bls.n	d8a54 <__aeabi_d2iz+0x3c>
   d8a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8a3e:	fa23 f002 	lsr.w	r0, r3, r2
   d8a42:	bf18      	it	ne
   d8a44:	4240      	negne	r0, r0
   d8a46:	4770      	bx	lr
   d8a48:	f04f 0000 	mov.w	r0, #0
   d8a4c:	4770      	bx	lr
   d8a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8a52:	d105      	bne.n	d8a60 <__aeabi_d2iz+0x48>
   d8a54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8a58:	bf08      	it	eq
   d8a5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8a5e:	4770      	bx	lr
   d8a60:	f04f 0000 	mov.w	r0, #0
   d8a64:	4770      	bx	lr
   d8a66:	bf00      	nop

000d8a68 <__aeabi_d2uiz>:
   d8a68:	004a      	lsls	r2, r1, #1
   d8a6a:	d211      	bcs.n	d8a90 <__aeabi_d2uiz+0x28>
   d8a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8a70:	d211      	bcs.n	d8a96 <__aeabi_d2uiz+0x2e>
   d8a72:	d50d      	bpl.n	d8a90 <__aeabi_d2uiz+0x28>
   d8a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8a7c:	d40e      	bmi.n	d8a9c <__aeabi_d2uiz+0x34>
   d8a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8a8a:	fa23 f002 	lsr.w	r0, r3, r2
   d8a8e:	4770      	bx	lr
   d8a90:	f04f 0000 	mov.w	r0, #0
   d8a94:	4770      	bx	lr
   d8a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8a9a:	d102      	bne.n	d8aa2 <__aeabi_d2uiz+0x3a>
   d8a9c:	f04f 30ff 	mov.w	r0, #4294967295
   d8aa0:	4770      	bx	lr
   d8aa2:	f04f 0000 	mov.w	r0, #0
   d8aa6:	4770      	bx	lr

000d8aa8 <__aeabi_d2f>:
   d8aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8ab0:	bf24      	itt	cs
   d8ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8aba:	d90d      	bls.n	d8ad8 <__aeabi_d2f+0x30>
   d8abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8ad0:	bf08      	it	eq
   d8ad2:	f020 0001 	biceq.w	r0, r0, #1
   d8ad6:	4770      	bx	lr
   d8ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8adc:	d121      	bne.n	d8b22 <__aeabi_d2f+0x7a>
   d8ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8ae2:	bfbc      	itt	lt
   d8ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8ae8:	4770      	bxlt	lr
   d8aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8af2:	f1c2 0218 	rsb	r2, r2, #24
   d8af6:	f1c2 0c20 	rsb	ip, r2, #32
   d8afa:	fa10 f30c 	lsls.w	r3, r0, ip
   d8afe:	fa20 f002 	lsr.w	r0, r0, r2
   d8b02:	bf18      	it	ne
   d8b04:	f040 0001 	orrne.w	r0, r0, #1
   d8b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8b10:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8b14:	ea40 000c 	orr.w	r0, r0, ip
   d8b18:	fa23 f302 	lsr.w	r3, r3, r2
   d8b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8b20:	e7cc      	b.n	d8abc <__aeabi_d2f+0x14>
   d8b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8b26:	d107      	bne.n	d8b38 <__aeabi_d2f+0x90>
   d8b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8b2c:	bf1e      	ittt	ne
   d8b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8b36:	4770      	bxne	lr
   d8b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8b44:	4770      	bx	lr
   d8b46:	bf00      	nop

000d8b48 <__cxa_atexit>:
   d8b48:	b510      	push	{r4, lr}
   d8b4a:	4c05      	ldr	r4, [pc, #20]	; (d8b60 <__cxa_atexit+0x18>)
   d8b4c:	4613      	mov	r3, r2
   d8b4e:	b12c      	cbz	r4, d8b5c <__cxa_atexit+0x14>
   d8b50:	460a      	mov	r2, r1
   d8b52:	4601      	mov	r1, r0
   d8b54:	2002      	movs	r0, #2
   d8b56:	f3af 8000 	nop.w
   d8b5a:	bd10      	pop	{r4, pc}
   d8b5c:	4620      	mov	r0, r4
   d8b5e:	bd10      	pop	{r4, pc}
   d8b60:	00000000 	.word	0x00000000

000d8b64 <localtime>:
   d8b64:	b538      	push	{r3, r4, r5, lr}
   d8b66:	4b07      	ldr	r3, [pc, #28]	; (d8b84 <localtime+0x20>)
   d8b68:	681c      	ldr	r4, [r3, #0]
   d8b6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8b6c:	4605      	mov	r5, r0
   d8b6e:	b91b      	cbnz	r3, d8b78 <localtime+0x14>
   d8b70:	2024      	movs	r0, #36	; 0x24
   d8b72:	f7fc fef3 	bl	d595c <malloc>
   d8b76:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8b78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8b7a:	4628      	mov	r0, r5
   d8b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8b80:	f000 b802 	b.w	d8b88 <localtime_r>
   d8b84:	2003dcc8 	.word	0x2003dcc8

000d8b88 <localtime_r>:
   d8b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8b8c:	460c      	mov	r4, r1
   d8b8e:	4680      	mov	r8, r0
   d8b90:	f000 fc8c 	bl	d94ac <__gettzinfo>
   d8b94:	4621      	mov	r1, r4
   d8b96:	4607      	mov	r7, r0
   d8b98:	4640      	mov	r0, r8
   d8b9a:	f000 fc8b 	bl	d94b4 <gmtime_r>
   d8b9e:	6946      	ldr	r6, [r0, #20]
   d8ba0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d8ba4:	07b3      	lsls	r3, r6, #30
   d8ba6:	4604      	mov	r4, r0
   d8ba8:	d105      	bne.n	d8bb6 <localtime_r+0x2e>
   d8baa:	2264      	movs	r2, #100	; 0x64
   d8bac:	fb96 f3f2 	sdiv	r3, r6, r2
   d8bb0:	fb02 6313 	mls	r3, r2, r3, r6
   d8bb4:	b94b      	cbnz	r3, d8bca <localtime_r+0x42>
   d8bb6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d8bba:	fb96 f3f5 	sdiv	r3, r6, r5
   d8bbe:	fb05 6513 	mls	r5, r5, r3, r6
   d8bc2:	fab5 f385 	clz	r3, r5
   d8bc6:	095b      	lsrs	r3, r3, #5
   d8bc8:	e000      	b.n	d8bcc <localtime_r+0x44>
   d8bca:	2301      	movs	r3, #1
   d8bcc:	4a5f      	ldr	r2, [pc, #380]	; (d8d4c <localtime_r+0x1c4>)
   d8bce:	2530      	movs	r5, #48	; 0x30
   d8bd0:	fb05 2503 	mla	r5, r5, r3, r2
   d8bd4:	f000 fa9e 	bl	d9114 <__tz_lock>
   d8bd8:	f000 fa9e 	bl	d9118 <_tzset_unlocked>
   d8bdc:	4b5c      	ldr	r3, [pc, #368]	; (d8d50 <localtime_r+0x1c8>)
   d8bde:	681b      	ldr	r3, [r3, #0]
   d8be0:	b1f3      	cbz	r3, d8c20 <localtime_r+0x98>
   d8be2:	687b      	ldr	r3, [r7, #4]
   d8be4:	429e      	cmp	r6, r3
   d8be6:	d105      	bne.n	d8bf4 <localtime_r+0x6c>
   d8be8:	6839      	ldr	r1, [r7, #0]
   d8bea:	f8d8 3000 	ldr.w	r3, [r8]
   d8bee:	69fa      	ldr	r2, [r7, #28]
   d8bf0:	b941      	cbnz	r1, d8c04 <localtime_r+0x7c>
   d8bf2:	e00a      	b.n	d8c0a <localtime_r+0x82>
   d8bf4:	4630      	mov	r0, r6
   d8bf6:	f000 f9e5 	bl	d8fc4 <__tzcalc_limits>
   d8bfa:	2800      	cmp	r0, #0
   d8bfc:	d1f4      	bne.n	d8be8 <localtime_r+0x60>
   d8bfe:	f04f 33ff 	mov.w	r3, #4294967295
   d8c02:	e00d      	b.n	d8c20 <localtime_r+0x98>
   d8c04:	4293      	cmp	r3, r2
   d8c06:	db08      	blt.n	d8c1a <localtime_r+0x92>
   d8c08:	e001      	b.n	d8c0e <localtime_r+0x86>
   d8c0a:	4293      	cmp	r3, r2
   d8c0c:	da07      	bge.n	d8c1e <localtime_r+0x96>
   d8c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8c10:	4293      	cmp	r3, r2
   d8c12:	bfac      	ite	ge
   d8c14:	2300      	movge	r3, #0
   d8c16:	2301      	movlt	r3, #1
   d8c18:	e002      	b.n	d8c20 <localtime_r+0x98>
   d8c1a:	2300      	movs	r3, #0
   d8c1c:	e000      	b.n	d8c20 <localtime_r+0x98>
   d8c1e:	2301      	movs	r3, #1
   d8c20:	6223      	str	r3, [r4, #32]
   d8c22:	6a23      	ldr	r3, [r4, #32]
   d8c24:	2b01      	cmp	r3, #1
   d8c26:	bf0c      	ite	eq
   d8c28:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d8c2a:	6a39      	ldrne	r1, [r7, #32]
   d8c2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8c30:	203c      	movs	r0, #60	; 0x3c
   d8c32:	fb91 f6f3 	sdiv	r6, r1, r3
   d8c36:	fb03 1316 	mls	r3, r3, r6, r1
   d8c3a:	6861      	ldr	r1, [r4, #4]
   d8c3c:	fb93 f2f0 	sdiv	r2, r3, r0
   d8c40:	fb00 3012 	mls	r0, r0, r2, r3
   d8c44:	6823      	ldr	r3, [r4, #0]
   d8c46:	1a89      	subs	r1, r1, r2
   d8c48:	68a2      	ldr	r2, [r4, #8]
   d8c4a:	6061      	str	r1, [r4, #4]
   d8c4c:	1a1b      	subs	r3, r3, r0
   d8c4e:	1b92      	subs	r2, r2, r6
   d8c50:	2b3b      	cmp	r3, #59	; 0x3b
   d8c52:	6023      	str	r3, [r4, #0]
   d8c54:	60a2      	str	r2, [r4, #8]
   d8c56:	dd03      	ble.n	d8c60 <localtime_r+0xd8>
   d8c58:	3101      	adds	r1, #1
   d8c5a:	6061      	str	r1, [r4, #4]
   d8c5c:	3b3c      	subs	r3, #60	; 0x3c
   d8c5e:	e004      	b.n	d8c6a <localtime_r+0xe2>
   d8c60:	2b00      	cmp	r3, #0
   d8c62:	da03      	bge.n	d8c6c <localtime_r+0xe4>
   d8c64:	3901      	subs	r1, #1
   d8c66:	6061      	str	r1, [r4, #4]
   d8c68:	333c      	adds	r3, #60	; 0x3c
   d8c6a:	6023      	str	r3, [r4, #0]
   d8c6c:	6863      	ldr	r3, [r4, #4]
   d8c6e:	2b3b      	cmp	r3, #59	; 0x3b
   d8c70:	dd03      	ble.n	d8c7a <localtime_r+0xf2>
   d8c72:	3201      	adds	r2, #1
   d8c74:	60a2      	str	r2, [r4, #8]
   d8c76:	3b3c      	subs	r3, #60	; 0x3c
   d8c78:	e004      	b.n	d8c84 <localtime_r+0xfc>
   d8c7a:	2b00      	cmp	r3, #0
   d8c7c:	da03      	bge.n	d8c86 <localtime_r+0xfe>
   d8c7e:	3a01      	subs	r2, #1
   d8c80:	60a2      	str	r2, [r4, #8]
   d8c82:	333c      	adds	r3, #60	; 0x3c
   d8c84:	6063      	str	r3, [r4, #4]
   d8c86:	68a3      	ldr	r3, [r4, #8]
   d8c88:	2b17      	cmp	r3, #23
   d8c8a:	dd22      	ble.n	d8cd2 <localtime_r+0x14a>
   d8c8c:	69e2      	ldr	r2, [r4, #28]
   d8c8e:	3201      	adds	r2, #1
   d8c90:	61e2      	str	r2, [r4, #28]
   d8c92:	69a2      	ldr	r2, [r4, #24]
   d8c94:	3201      	adds	r2, #1
   d8c96:	2a06      	cmp	r2, #6
   d8c98:	bfc8      	it	gt
   d8c9a:	2200      	movgt	r2, #0
   d8c9c:	61a2      	str	r2, [r4, #24]
   d8c9e:	68e2      	ldr	r2, [r4, #12]
   d8ca0:	3b18      	subs	r3, #24
   d8ca2:	3201      	adds	r2, #1
   d8ca4:	60a3      	str	r3, [r4, #8]
   d8ca6:	6923      	ldr	r3, [r4, #16]
   d8ca8:	60e2      	str	r2, [r4, #12]
   d8caa:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d8cae:	428a      	cmp	r2, r1
   d8cb0:	dd46      	ble.n	d8d40 <localtime_r+0x1b8>
   d8cb2:	3301      	adds	r3, #1
   d8cb4:	2b0c      	cmp	r3, #12
   d8cb6:	bf0c      	ite	eq
   d8cb8:	6963      	ldreq	r3, [r4, #20]
   d8cba:	6123      	strne	r3, [r4, #16]
   d8cbc:	eba2 0201 	sub.w	r2, r2, r1
   d8cc0:	60e2      	str	r2, [r4, #12]
   d8cc2:	bf01      	itttt	eq
   d8cc4:	3301      	addeq	r3, #1
   d8cc6:	2200      	moveq	r2, #0
   d8cc8:	6122      	streq	r2, [r4, #16]
   d8cca:	6163      	streq	r3, [r4, #20]
   d8ccc:	bf08      	it	eq
   d8cce:	61e2      	streq	r2, [r4, #28]
   d8cd0:	e036      	b.n	d8d40 <localtime_r+0x1b8>
   d8cd2:	2b00      	cmp	r3, #0
   d8cd4:	da34      	bge.n	d8d40 <localtime_r+0x1b8>
   d8cd6:	69e2      	ldr	r2, [r4, #28]
   d8cd8:	3a01      	subs	r2, #1
   d8cda:	61e2      	str	r2, [r4, #28]
   d8cdc:	69a2      	ldr	r2, [r4, #24]
   d8cde:	3a01      	subs	r2, #1
   d8ce0:	bf48      	it	mi
   d8ce2:	2206      	movmi	r2, #6
   d8ce4:	61a2      	str	r2, [r4, #24]
   d8ce6:	68e2      	ldr	r2, [r4, #12]
   d8ce8:	3318      	adds	r3, #24
   d8cea:	3a01      	subs	r2, #1
   d8cec:	60e2      	str	r2, [r4, #12]
   d8cee:	60a3      	str	r3, [r4, #8]
   d8cf0:	bb32      	cbnz	r2, d8d40 <localtime_r+0x1b8>
   d8cf2:	6923      	ldr	r3, [r4, #16]
   d8cf4:	3b01      	subs	r3, #1
   d8cf6:	d401      	bmi.n	d8cfc <localtime_r+0x174>
   d8cf8:	6123      	str	r3, [r4, #16]
   d8cfa:	e01d      	b.n	d8d38 <localtime_r+0x1b0>
   d8cfc:	230b      	movs	r3, #11
   d8cfe:	6123      	str	r3, [r4, #16]
   d8d00:	6963      	ldr	r3, [r4, #20]
   d8d02:	1e5a      	subs	r2, r3, #1
   d8d04:	f012 0f03 	tst.w	r2, #3
   d8d08:	6162      	str	r2, [r4, #20]
   d8d0a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d8d0e:	d105      	bne.n	d8d1c <localtime_r+0x194>
   d8d10:	2164      	movs	r1, #100	; 0x64
   d8d12:	fb93 f2f1 	sdiv	r2, r3, r1
   d8d16:	fb01 3212 	mls	r2, r1, r2, r3
   d8d1a:	b94a      	cbnz	r2, d8d30 <localtime_r+0x1a8>
   d8d1c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8d20:	fb93 f2f1 	sdiv	r2, r3, r1
   d8d24:	fb01 3312 	mls	r3, r1, r2, r3
   d8d28:	fab3 f383 	clz	r3, r3
   d8d2c:	095b      	lsrs	r3, r3, #5
   d8d2e:	e000      	b.n	d8d32 <localtime_r+0x1aa>
   d8d30:	2301      	movs	r3, #1
   d8d32:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8d36:	61e3      	str	r3, [r4, #28]
   d8d38:	6923      	ldr	r3, [r4, #16]
   d8d3a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d8d3e:	60e3      	str	r3, [r4, #12]
   d8d40:	f000 f9e9 	bl	d9116 <__tz_unlock>
   d8d44:	4620      	mov	r0, r4
   d8d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d4a:	bf00      	nop
   d8d4c:	000d9ccc 	.word	0x000d9ccc
   d8d50:	2003e7e4 	.word	0x2003e7e4

000d8d54 <memcmp>:
   d8d54:	b510      	push	{r4, lr}
   d8d56:	3901      	subs	r1, #1
   d8d58:	4402      	add	r2, r0
   d8d5a:	4290      	cmp	r0, r2
   d8d5c:	d007      	beq.n	d8d6e <memcmp+0x1a>
   d8d5e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8d62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8d66:	42a3      	cmp	r3, r4
   d8d68:	d0f7      	beq.n	d8d5a <memcmp+0x6>
   d8d6a:	1b18      	subs	r0, r3, r4
   d8d6c:	bd10      	pop	{r4, pc}
   d8d6e:	2000      	movs	r0, #0
   d8d70:	bd10      	pop	{r4, pc}

000d8d72 <memcpy>:
   d8d72:	b510      	push	{r4, lr}
   d8d74:	1e43      	subs	r3, r0, #1
   d8d76:	440a      	add	r2, r1
   d8d78:	4291      	cmp	r1, r2
   d8d7a:	d004      	beq.n	d8d86 <memcpy+0x14>
   d8d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d80:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d84:	e7f8      	b.n	d8d78 <memcpy+0x6>
   d8d86:	bd10      	pop	{r4, pc}

000d8d88 <memmove>:
   d8d88:	4288      	cmp	r0, r1
   d8d8a:	b510      	push	{r4, lr}
   d8d8c:	eb01 0302 	add.w	r3, r1, r2
   d8d90:	d801      	bhi.n	d8d96 <memmove+0xe>
   d8d92:	1e42      	subs	r2, r0, #1
   d8d94:	e00b      	b.n	d8dae <memmove+0x26>
   d8d96:	4298      	cmp	r0, r3
   d8d98:	d2fb      	bcs.n	d8d92 <memmove+0xa>
   d8d9a:	1881      	adds	r1, r0, r2
   d8d9c:	1ad2      	subs	r2, r2, r3
   d8d9e:	42d3      	cmn	r3, r2
   d8da0:	d004      	beq.n	d8dac <memmove+0x24>
   d8da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8da6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8daa:	e7f8      	b.n	d8d9e <memmove+0x16>
   d8dac:	bd10      	pop	{r4, pc}
   d8dae:	4299      	cmp	r1, r3
   d8db0:	d004      	beq.n	d8dbc <memmove+0x34>
   d8db2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8db6:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8dba:	e7f8      	b.n	d8dae <memmove+0x26>
   d8dbc:	bd10      	pop	{r4, pc}

000d8dbe <memset>:
   d8dbe:	4402      	add	r2, r0
   d8dc0:	4603      	mov	r3, r0
   d8dc2:	4293      	cmp	r3, r2
   d8dc4:	d002      	beq.n	d8dcc <memset+0xe>
   d8dc6:	f803 1b01 	strb.w	r1, [r3], #1
   d8dca:	e7fa      	b.n	d8dc2 <memset+0x4>
   d8dcc:	4770      	bx	lr
	...

000d8dd0 <srand>:
   d8dd0:	b538      	push	{r3, r4, r5, lr}
   d8dd2:	4b12      	ldr	r3, [pc, #72]	; (d8e1c <srand+0x4c>)
   d8dd4:	681c      	ldr	r4, [r3, #0]
   d8dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8dd8:	4605      	mov	r5, r0
   d8dda:	b9d3      	cbnz	r3, d8e12 <srand+0x42>
   d8ddc:	2018      	movs	r0, #24
   d8dde:	f7fc fdbd 	bl	d595c <malloc>
   d8de2:	f243 330e 	movw	r3, #13070	; 0x330e
   d8de6:	63a0      	str	r0, [r4, #56]	; 0x38
   d8de8:	8003      	strh	r3, [r0, #0]
   d8dea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8dee:	8043      	strh	r3, [r0, #2]
   d8df0:	f241 2334 	movw	r3, #4660	; 0x1234
   d8df4:	8083      	strh	r3, [r0, #4]
   d8df6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8dfa:	80c3      	strh	r3, [r0, #6]
   d8dfc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8e00:	8103      	strh	r3, [r0, #8]
   d8e02:	2305      	movs	r3, #5
   d8e04:	8143      	strh	r3, [r0, #10]
   d8e06:	230b      	movs	r3, #11
   d8e08:	8183      	strh	r3, [r0, #12]
   d8e0a:	2201      	movs	r2, #1
   d8e0c:	2300      	movs	r3, #0
   d8e0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8e14:	2200      	movs	r2, #0
   d8e16:	611d      	str	r5, [r3, #16]
   d8e18:	615a      	str	r2, [r3, #20]
   d8e1a:	bd38      	pop	{r3, r4, r5, pc}
   d8e1c:	2003dcc8 	.word	0x2003dcc8

000d8e20 <strcmp>:
   d8e20:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8e24:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8e28:	2a01      	cmp	r2, #1
   d8e2a:	bf28      	it	cs
   d8e2c:	429a      	cmpcs	r2, r3
   d8e2e:	d0f7      	beq.n	d8e20 <strcmp>
   d8e30:	1ad0      	subs	r0, r2, r3
   d8e32:	4770      	bx	lr

000d8e34 <strcpy>:
   d8e34:	4603      	mov	r3, r0
   d8e36:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8e3a:	f803 2b01 	strb.w	r2, [r3], #1
   d8e3e:	2a00      	cmp	r2, #0
   d8e40:	d1f9      	bne.n	d8e36 <strcpy+0x2>
   d8e42:	4770      	bx	lr

000d8e44 <strdup>:
   d8e44:	4b02      	ldr	r3, [pc, #8]	; (d8e50 <strdup+0xc>)
   d8e46:	4601      	mov	r1, r0
   d8e48:	6818      	ldr	r0, [r3, #0]
   d8e4a:	f000 b803 	b.w	d8e54 <_strdup_r>
   d8e4e:	bf00      	nop
   d8e50:	2003dcc8 	.word	0x2003dcc8

000d8e54 <_strdup_r>:
   d8e54:	b570      	push	{r4, r5, r6, lr}
   d8e56:	4606      	mov	r6, r0
   d8e58:	4608      	mov	r0, r1
   d8e5a:	460c      	mov	r4, r1
   d8e5c:	f000 f80d 	bl	d8e7a <strlen>
   d8e60:	1c45      	adds	r5, r0, #1
   d8e62:	4629      	mov	r1, r5
   d8e64:	4630      	mov	r0, r6
   d8e66:	f7fc fdb9 	bl	d59dc <_malloc_r>
   d8e6a:	4606      	mov	r6, r0
   d8e6c:	b118      	cbz	r0, d8e76 <_strdup_r+0x22>
   d8e6e:	462a      	mov	r2, r5
   d8e70:	4621      	mov	r1, r4
   d8e72:	f7ff ff7e 	bl	d8d72 <memcpy>
   d8e76:	4630      	mov	r0, r6
   d8e78:	bd70      	pop	{r4, r5, r6, pc}

000d8e7a <strlen>:
   d8e7a:	4603      	mov	r3, r0
   d8e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e80:	2a00      	cmp	r2, #0
   d8e82:	d1fb      	bne.n	d8e7c <strlen+0x2>
   d8e84:	1a18      	subs	r0, r3, r0
   d8e86:	3801      	subs	r0, #1
   d8e88:	4770      	bx	lr

000d8e8a <strncmp>:
   d8e8a:	b530      	push	{r4, r5, lr}
   d8e8c:	b182      	cbz	r2, d8eb0 <strncmp+0x26>
   d8e8e:	1e45      	subs	r5, r0, #1
   d8e90:	3901      	subs	r1, #1
   d8e92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8e96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8e9a:	42a3      	cmp	r3, r4
   d8e9c:	d106      	bne.n	d8eac <strncmp+0x22>
   d8e9e:	43ec      	mvns	r4, r5
   d8ea0:	4414      	add	r4, r2
   d8ea2:	42e0      	cmn	r0, r4
   d8ea4:	d001      	beq.n	d8eaa <strncmp+0x20>
   d8ea6:	2b00      	cmp	r3, #0
   d8ea8:	d1f3      	bne.n	d8e92 <strncmp+0x8>
   d8eaa:	461c      	mov	r4, r3
   d8eac:	1b18      	subs	r0, r3, r4
   d8eae:	bd30      	pop	{r4, r5, pc}
   d8eb0:	4610      	mov	r0, r2
   d8eb2:	bd30      	pop	{r4, r5, pc}

000d8eb4 <_strtoul_r>:
   d8eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8eb8:	4680      	mov	r8, r0
   d8eba:	483c      	ldr	r0, [pc, #240]	; (d8fac <_strtoul_r+0xf8>)
   d8ebc:	f8d0 9000 	ldr.w	r9, [r0]
   d8ec0:	460e      	mov	r6, r1
   d8ec2:	4635      	mov	r5, r6
   d8ec4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8ec8:	eb09 0004 	add.w	r0, r9, r4
   d8ecc:	7840      	ldrb	r0, [r0, #1]
   d8ece:	f000 0008 	and.w	r0, r0, #8
   d8ed2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d8ed6:	b108      	cbz	r0, d8edc <_strtoul_r+0x28>
   d8ed8:	462e      	mov	r6, r5
   d8eda:	e7f2      	b.n	d8ec2 <_strtoul_r+0xe>
   d8edc:	2c2d      	cmp	r4, #45	; 0x2d
   d8ede:	d103      	bne.n	d8ee8 <_strtoul_r+0x34>
   d8ee0:	1cb5      	adds	r5, r6, #2
   d8ee2:	7874      	ldrb	r4, [r6, #1]
   d8ee4:	2701      	movs	r7, #1
   d8ee6:	e003      	b.n	d8ef0 <_strtoul_r+0x3c>
   d8ee8:	2c2b      	cmp	r4, #43	; 0x2b
   d8eea:	bf04      	itt	eq
   d8eec:	7874      	ldrbeq	r4, [r6, #1]
   d8eee:	1cb5      	addeq	r5, r6, #2
   d8ef0:	b113      	cbz	r3, d8ef8 <_strtoul_r+0x44>
   d8ef2:	2b10      	cmp	r3, #16
   d8ef4:	d10a      	bne.n	d8f0c <_strtoul_r+0x58>
   d8ef6:	e053      	b.n	d8fa0 <_strtoul_r+0xec>
   d8ef8:	2c30      	cmp	r4, #48	; 0x30
   d8efa:	d14f      	bne.n	d8f9c <_strtoul_r+0xe8>
   d8efc:	7828      	ldrb	r0, [r5, #0]
   d8efe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8f02:	2858      	cmp	r0, #88	; 0x58
   d8f04:	d145      	bne.n	d8f92 <_strtoul_r+0xde>
   d8f06:	786c      	ldrb	r4, [r5, #1]
   d8f08:	2310      	movs	r3, #16
   d8f0a:	3502      	adds	r5, #2
   d8f0c:	f04f 3cff 	mov.w	ip, #4294967295
   d8f10:	2600      	movs	r6, #0
   d8f12:	fbbc fcf3 	udiv	ip, ip, r3
   d8f16:	fb03 fa0c 	mul.w	sl, r3, ip
   d8f1a:	ea6f 0a0a 	mvn.w	sl, sl
   d8f1e:	4630      	mov	r0, r6
   d8f20:	eb09 0e04 	add.w	lr, r9, r4
   d8f24:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8f28:	f01e 0f04 	tst.w	lr, #4
   d8f2c:	d001      	beq.n	d8f32 <_strtoul_r+0x7e>
   d8f2e:	3c30      	subs	r4, #48	; 0x30
   d8f30:	e00b      	b.n	d8f4a <_strtoul_r+0x96>
   d8f32:	f01e 0e03 	ands.w	lr, lr, #3
   d8f36:	d01a      	beq.n	d8f6e <_strtoul_r+0xba>
   d8f38:	f1be 0f01 	cmp.w	lr, #1
   d8f3c:	bf0c      	ite	eq
   d8f3e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8f42:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8f46:	ebce 0404 	rsb	r4, lr, r4
   d8f4a:	42a3      	cmp	r3, r4
   d8f4c:	dd0f      	ble.n	d8f6e <_strtoul_r+0xba>
   d8f4e:	2e00      	cmp	r6, #0
   d8f50:	db08      	blt.n	d8f64 <_strtoul_r+0xb0>
   d8f52:	4560      	cmp	r0, ip
   d8f54:	d806      	bhi.n	d8f64 <_strtoul_r+0xb0>
   d8f56:	d101      	bne.n	d8f5c <_strtoul_r+0xa8>
   d8f58:	4554      	cmp	r4, sl
   d8f5a:	dc03      	bgt.n	d8f64 <_strtoul_r+0xb0>
   d8f5c:	fb03 4000 	mla	r0, r3, r0, r4
   d8f60:	2601      	movs	r6, #1
   d8f62:	e001      	b.n	d8f68 <_strtoul_r+0xb4>
   d8f64:	f04f 36ff 	mov.w	r6, #4294967295
   d8f68:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8f6c:	e7d8      	b.n	d8f20 <_strtoul_r+0x6c>
   d8f6e:	2e00      	cmp	r6, #0
   d8f70:	da07      	bge.n	d8f82 <_strtoul_r+0xce>
   d8f72:	2322      	movs	r3, #34	; 0x22
   d8f74:	f8c8 3000 	str.w	r3, [r8]
   d8f78:	f04f 30ff 	mov.w	r0, #4294967295
   d8f7c:	b92a      	cbnz	r2, d8f8a <_strtoul_r+0xd6>
   d8f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f82:	b107      	cbz	r7, d8f86 <_strtoul_r+0xd2>
   d8f84:	4240      	negs	r0, r0
   d8f86:	b172      	cbz	r2, d8fa6 <_strtoul_r+0xf2>
   d8f88:	b106      	cbz	r6, d8f8c <_strtoul_r+0xd8>
   d8f8a:	1e69      	subs	r1, r5, #1
   d8f8c:	6011      	str	r1, [r2, #0]
   d8f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f92:	2430      	movs	r4, #48	; 0x30
   d8f94:	2b00      	cmp	r3, #0
   d8f96:	d1b9      	bne.n	d8f0c <_strtoul_r+0x58>
   d8f98:	2308      	movs	r3, #8
   d8f9a:	e7b7      	b.n	d8f0c <_strtoul_r+0x58>
   d8f9c:	230a      	movs	r3, #10
   d8f9e:	e7b5      	b.n	d8f0c <_strtoul_r+0x58>
   d8fa0:	2c30      	cmp	r4, #48	; 0x30
   d8fa2:	d0ab      	beq.n	d8efc <_strtoul_r+0x48>
   d8fa4:	e7b2      	b.n	d8f0c <_strtoul_r+0x58>
   d8fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8faa:	bf00      	nop
   d8fac:	2003dc64 	.word	0x2003dc64

000d8fb0 <strtoul>:
   d8fb0:	4613      	mov	r3, r2
   d8fb2:	460a      	mov	r2, r1
   d8fb4:	4601      	mov	r1, r0
   d8fb6:	4802      	ldr	r0, [pc, #8]	; (d8fc0 <strtoul+0x10>)
   d8fb8:	6800      	ldr	r0, [r0, #0]
   d8fba:	f7ff bf7b 	b.w	d8eb4 <_strtoul_r>
   d8fbe:	bf00      	nop
   d8fc0:	2003dcc8 	.word	0x2003dcc8

000d8fc4 <__tzcalc_limits>:
   d8fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fc8:	4604      	mov	r4, r0
   d8fca:	f000 fa6f 	bl	d94ac <__gettzinfo>
   d8fce:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8fd2:	429c      	cmp	r4, r3
   d8fd4:	f340 8096 	ble.w	d9104 <__tzcalc_limits+0x140>
   d8fd8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8fdc:	18e3      	adds	r3, r4, r3
   d8fde:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d8fe2:	109b      	asrs	r3, r3, #2
   d8fe4:	f240 156d 	movw	r5, #365	; 0x16d
   d8fe8:	fb05 3502 	mla	r5, r5, r2, r3
   d8fec:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d8ff0:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d8ff4:	fb92 f3f3 	sdiv	r3, r2, r3
   d8ff8:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8ffc:	442b      	add	r3, r5
   d8ffe:	18a5      	adds	r5, r4, r2
   d9000:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9004:	fb95 f5f2 	sdiv	r5, r5, r2
   d9008:	441d      	add	r5, r3
   d900a:	2364      	movs	r3, #100	; 0x64
   d900c:	fb94 f7f2 	sdiv	r7, r4, r2
   d9010:	fb94 f6f3 	sdiv	r6, r4, r3
   d9014:	fb02 4717 	mls	r7, r2, r7, r4
   d9018:	fb03 4616 	mls	r6, r3, r6, r4
   d901c:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d9020:	fab7 fe87 	clz	lr, r7
   d9024:	9301      	str	r3, [sp, #4]
   d9026:	f004 0303 	and.w	r3, r4, #3
   d902a:	6044      	str	r4, [r0, #4]
   d902c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9030:	4601      	mov	r1, r0
   d9032:	9300      	str	r3, [sp, #0]
   d9034:	f04f 0c07 	mov.w	ip, #7
   d9038:	7a0b      	ldrb	r3, [r1, #8]
   d903a:	2b4a      	cmp	r3, #74	; 0x4a
   d903c:	d10e      	bne.n	d905c <__tzcalc_limits+0x98>
   d903e:	694b      	ldr	r3, [r1, #20]
   d9040:	9a00      	ldr	r2, [sp, #0]
   d9042:	18ec      	adds	r4, r5, r3
   d9044:	b902      	cbnz	r2, d9048 <__tzcalc_limits+0x84>
   d9046:	b906      	cbnz	r6, d904a <__tzcalc_limits+0x86>
   d9048:	b927      	cbnz	r7, d9054 <__tzcalc_limits+0x90>
   d904a:	2b3b      	cmp	r3, #59	; 0x3b
   d904c:	bfd4      	ite	le
   d904e:	2300      	movle	r3, #0
   d9050:	2301      	movgt	r3, #1
   d9052:	e000      	b.n	d9056 <__tzcalc_limits+0x92>
   d9054:	2300      	movs	r3, #0
   d9056:	4423      	add	r3, r4
   d9058:	3b01      	subs	r3, #1
   d905a:	e03f      	b.n	d90dc <__tzcalc_limits+0x118>
   d905c:	2b44      	cmp	r3, #68	; 0x44
   d905e:	d102      	bne.n	d9066 <__tzcalc_limits+0xa2>
   d9060:	694b      	ldr	r3, [r1, #20]
   d9062:	442b      	add	r3, r5
   d9064:	e03a      	b.n	d90dc <__tzcalc_limits+0x118>
   d9066:	9b00      	ldr	r3, [sp, #0]
   d9068:	b92b      	cbnz	r3, d9076 <__tzcalc_limits+0xb2>
   d906a:	2e00      	cmp	r6, #0
   d906c:	bf0c      	ite	eq
   d906e:	46f0      	moveq	r8, lr
   d9070:	f04f 0801 	movne.w	r8, #1
   d9074:	e000      	b.n	d9078 <__tzcalc_limits+0xb4>
   d9076:	46f0      	mov	r8, lr
   d9078:	4b24      	ldr	r3, [pc, #144]	; (d910c <__tzcalc_limits+0x148>)
   d907a:	68cc      	ldr	r4, [r1, #12]
   d907c:	2230      	movs	r2, #48	; 0x30
   d907e:	fb02 3808 	mla	r8, r2, r8, r3
   d9082:	f1a8 0a04 	sub.w	sl, r8, #4
   d9086:	46a9      	mov	r9, r5
   d9088:	2301      	movs	r3, #1
   d908a:	42a3      	cmp	r3, r4
   d908c:	da04      	bge.n	d9098 <__tzcalc_limits+0xd4>
   d908e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d9092:	3301      	adds	r3, #1
   d9094:	44d9      	add	r9, fp
   d9096:	e7f8      	b.n	d908a <__tzcalc_limits+0xc6>
   d9098:	f109 0304 	add.w	r3, r9, #4
   d909c:	fb93 fbfc 	sdiv	fp, r3, ip
   d90a0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d90a4:	2c01      	cmp	r4, #1
   d90a6:	ebca 0a03 	rsb	sl, sl, r3
   d90aa:	694b      	ldr	r3, [r1, #20]
   d90ac:	bfb8      	it	lt
   d90ae:	2401      	movlt	r4, #1
   d90b0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d90b4:	ebb3 0a0a 	subs.w	sl, r3, sl
   d90b8:	690b      	ldr	r3, [r1, #16]
   d90ba:	f104 34ff 	add.w	r4, r4, #4294967295
   d90be:	f103 33ff 	add.w	r3, r3, #4294967295
   d90c2:	bf48      	it	mi
   d90c4:	f10a 0a07 	addmi.w	sl, sl, #7
   d90c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d90cc:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d90d0:	4453      	add	r3, sl
   d90d2:	42a3      	cmp	r3, r4
   d90d4:	db01      	blt.n	d90da <__tzcalc_limits+0x116>
   d90d6:	3b07      	subs	r3, #7
   d90d8:	e7fb      	b.n	d90d2 <__tzcalc_limits+0x10e>
   d90da:	444b      	add	r3, r9
   d90dc:	698c      	ldr	r4, [r1, #24]
   d90de:	4a0c      	ldr	r2, [pc, #48]	; (d9110 <__tzcalc_limits+0x14c>)
   d90e0:	fb02 4303 	mla	r3, r2, r3, r4
   d90e4:	6a0c      	ldr	r4, [r1, #32]
   d90e6:	4423      	add	r3, r4
   d90e8:	f841 3f1c 	str.w	r3, [r1, #28]!
   d90ec:	9b01      	ldr	r3, [sp, #4]
   d90ee:	4299      	cmp	r1, r3
   d90f0:	d1a2      	bne.n	d9038 <__tzcalc_limits+0x74>
   d90f2:	69c3      	ldr	r3, [r0, #28]
   d90f4:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d90f6:	4293      	cmp	r3, r2
   d90f8:	bfac      	ite	ge
   d90fa:	2300      	movge	r3, #0
   d90fc:	2301      	movlt	r3, #1
   d90fe:	6003      	str	r3, [r0, #0]
   d9100:	2001      	movs	r0, #1
   d9102:	e000      	b.n	d9106 <__tzcalc_limits+0x142>
   d9104:	2000      	movs	r0, #0
   d9106:	b003      	add	sp, #12
   d9108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d910c:	000d9ccc 	.word	0x000d9ccc
   d9110:	00015180 	.word	0x00015180

000d9114 <__tz_lock>:
   d9114:	4770      	bx	lr

000d9116 <__tz_unlock>:
   d9116:	4770      	bx	lr

000d9118 <_tzset_unlocked>:
   d9118:	4b01      	ldr	r3, [pc, #4]	; (d9120 <_tzset_unlocked+0x8>)
   d911a:	6818      	ldr	r0, [r3, #0]
   d911c:	f000 b802 	b.w	d9124 <_tzset_unlocked_r>
   d9120:	2003dcc8 	.word	0x2003dcc8

000d9124 <_tzset_unlocked_r>:
   d9124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9128:	b08d      	sub	sp, #52	; 0x34
   d912a:	4607      	mov	r7, r0
   d912c:	f000 f9be 	bl	d94ac <__gettzinfo>
   d9130:	49b0      	ldr	r1, [pc, #704]	; (d93f4 <_tzset_unlocked_r+0x2d0>)
   d9132:	4eb1      	ldr	r6, [pc, #708]	; (d93f8 <_tzset_unlocked_r+0x2d4>)
   d9134:	4604      	mov	r4, r0
   d9136:	4638      	mov	r0, r7
   d9138:	f000 f9b0 	bl	d949c <_getenv_r>
   d913c:	4605      	mov	r5, r0
   d913e:	b960      	cbnz	r0, d915a <_tzset_unlocked_r+0x36>
   d9140:	4bae      	ldr	r3, [pc, #696]	; (d93fc <_tzset_unlocked_r+0x2d8>)
   d9142:	4aaf      	ldr	r2, [pc, #700]	; (d9400 <_tzset_unlocked_r+0x2dc>)
   d9144:	6018      	str	r0, [r3, #0]
   d9146:	4baf      	ldr	r3, [pc, #700]	; (d9404 <_tzset_unlocked_r+0x2e0>)
   d9148:	6018      	str	r0, [r3, #0]
   d914a:	4baf      	ldr	r3, [pc, #700]	; (d9408 <_tzset_unlocked_r+0x2e4>)
   d914c:	6830      	ldr	r0, [r6, #0]
   d914e:	601a      	str	r2, [r3, #0]
   d9150:	605a      	str	r2, [r3, #4]
   d9152:	f7fc fc0b 	bl	d596c <free>
   d9156:	6035      	str	r5, [r6, #0]
   d9158:	e148      	b.n	d93ec <_tzset_unlocked_r+0x2c8>
   d915a:	6831      	ldr	r1, [r6, #0]
   d915c:	b979      	cbnz	r1, d917e <_tzset_unlocked_r+0x5a>
   d915e:	6830      	ldr	r0, [r6, #0]
   d9160:	f7fc fc04 	bl	d596c <free>
   d9164:	4628      	mov	r0, r5
   d9166:	f7ff fe88 	bl	d8e7a <strlen>
   d916a:	1c41      	adds	r1, r0, #1
   d916c:	4638      	mov	r0, r7
   d916e:	f7fc fc35 	bl	d59dc <_malloc_r>
   d9172:	6030      	str	r0, [r6, #0]
   d9174:	b148      	cbz	r0, d918a <_tzset_unlocked_r+0x66>
   d9176:	4629      	mov	r1, r5
   d9178:	f7ff fe5c 	bl	d8e34 <strcpy>
   d917c:	e005      	b.n	d918a <_tzset_unlocked_r+0x66>
   d917e:	f7ff fe4f 	bl	d8e20 <strcmp>
   d9182:	2800      	cmp	r0, #0
   d9184:	f000 8132 	beq.w	d93ec <_tzset_unlocked_r+0x2c8>
   d9188:	e7e9      	b.n	d915e <_tzset_unlocked_r+0x3a>
   d918a:	782b      	ldrb	r3, [r5, #0]
   d918c:	4a9f      	ldr	r2, [pc, #636]	; (d940c <_tzset_unlocked_r+0x2e8>)
   d918e:	49a0      	ldr	r1, [pc, #640]	; (d9410 <_tzset_unlocked_r+0x2ec>)
   d9190:	2b3a      	cmp	r3, #58	; 0x3a
   d9192:	bf08      	it	eq
   d9194:	3501      	addeq	r5, #1
   d9196:	ae0a      	add	r6, sp, #40	; 0x28
   d9198:	4633      	mov	r3, r6
   d919a:	4628      	mov	r0, r5
   d919c:	f7fc fc06 	bl	d59ac <siscanf>
   d91a0:	2800      	cmp	r0, #0
   d91a2:	f340 8123 	ble.w	d93ec <_tzset_unlocked_r+0x2c8>
   d91a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d91a8:	18ef      	adds	r7, r5, r3
   d91aa:	5ceb      	ldrb	r3, [r5, r3]
   d91ac:	2b2d      	cmp	r3, #45	; 0x2d
   d91ae:	d103      	bne.n	d91b8 <_tzset_unlocked_r+0x94>
   d91b0:	3701      	adds	r7, #1
   d91b2:	f04f 35ff 	mov.w	r5, #4294967295
   d91b6:	e003      	b.n	d91c0 <_tzset_unlocked_r+0x9c>
   d91b8:	2b2b      	cmp	r3, #43	; 0x2b
   d91ba:	bf08      	it	eq
   d91bc:	3701      	addeq	r7, #1
   d91be:	2501      	movs	r5, #1
   d91c0:	f10d 0a20 	add.w	sl, sp, #32
   d91c4:	f10d 0b1e 	add.w	fp, sp, #30
   d91c8:	f04f 0800 	mov.w	r8, #0
   d91cc:	9603      	str	r6, [sp, #12]
   d91ce:	f8cd a008 	str.w	sl, [sp, #8]
   d91d2:	9601      	str	r6, [sp, #4]
   d91d4:	f8cd b000 	str.w	fp, [sp]
   d91d8:	4633      	mov	r3, r6
   d91da:	aa07      	add	r2, sp, #28
   d91dc:	498d      	ldr	r1, [pc, #564]	; (d9414 <_tzset_unlocked_r+0x2f0>)
   d91de:	f8ad 801e 	strh.w	r8, [sp, #30]
   d91e2:	4638      	mov	r0, r7
   d91e4:	f8ad 8020 	strh.w	r8, [sp, #32]
   d91e8:	f7fc fbe0 	bl	d59ac <siscanf>
   d91ec:	4540      	cmp	r0, r8
   d91ee:	f340 80fd 	ble.w	d93ec <_tzset_unlocked_r+0x2c8>
   d91f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d91f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d91fa:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9420 <_tzset_unlocked_r+0x2fc>
   d91fe:	213c      	movs	r1, #60	; 0x3c
   d9200:	fb01 3302 	mla	r3, r1, r2, r3
   d9204:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9208:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d920c:	fb01 3302 	mla	r3, r1, r2, r3
   d9210:	435d      	muls	r5, r3
   d9212:	6225      	str	r5, [r4, #32]
   d9214:	4d7c      	ldr	r5, [pc, #496]	; (d9408 <_tzset_unlocked_r+0x2e4>)
   d9216:	4b7d      	ldr	r3, [pc, #500]	; (d940c <_tzset_unlocked_r+0x2e8>)
   d9218:	602b      	str	r3, [r5, #0]
   d921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d921c:	497c      	ldr	r1, [pc, #496]	; (d9410 <_tzset_unlocked_r+0x2ec>)
   d921e:	441f      	add	r7, r3
   d9220:	464a      	mov	r2, r9
   d9222:	4633      	mov	r3, r6
   d9224:	4638      	mov	r0, r7
   d9226:	f7fc fbc1 	bl	d59ac <siscanf>
   d922a:	4540      	cmp	r0, r8
   d922c:	dc08      	bgt.n	d9240 <_tzset_unlocked_r+0x11c>
   d922e:	682b      	ldr	r3, [r5, #0]
   d9230:	606b      	str	r3, [r5, #4]
   d9232:	4b72      	ldr	r3, [pc, #456]	; (d93fc <_tzset_unlocked_r+0x2d8>)
   d9234:	6a22      	ldr	r2, [r4, #32]
   d9236:	601a      	str	r2, [r3, #0]
   d9238:	4b72      	ldr	r3, [pc, #456]	; (d9404 <_tzset_unlocked_r+0x2e0>)
   d923a:	f8c3 8000 	str.w	r8, [r3]
   d923e:	e0d5      	b.n	d93ec <_tzset_unlocked_r+0x2c8>
   d9240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9242:	f8c5 9004 	str.w	r9, [r5, #4]
   d9246:	18fd      	adds	r5, r7, r3
   d9248:	5cfb      	ldrb	r3, [r7, r3]
   d924a:	2b2d      	cmp	r3, #45	; 0x2d
   d924c:	d103      	bne.n	d9256 <_tzset_unlocked_r+0x132>
   d924e:	3501      	adds	r5, #1
   d9250:	f04f 37ff 	mov.w	r7, #4294967295
   d9254:	e003      	b.n	d925e <_tzset_unlocked_r+0x13a>
   d9256:	2b2b      	cmp	r3, #43	; 0x2b
   d9258:	bf08      	it	eq
   d925a:	3501      	addeq	r5, #1
   d925c:	2701      	movs	r7, #1
   d925e:	2300      	movs	r3, #0
   d9260:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9264:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9268:	f8ad 3020 	strh.w	r3, [sp, #32]
   d926c:	930a      	str	r3, [sp, #40]	; 0x28
   d926e:	9603      	str	r6, [sp, #12]
   d9270:	f8cd a008 	str.w	sl, [sp, #8]
   d9274:	9601      	str	r6, [sp, #4]
   d9276:	f8cd b000 	str.w	fp, [sp]
   d927a:	4633      	mov	r3, r6
   d927c:	aa07      	add	r2, sp, #28
   d927e:	4965      	ldr	r1, [pc, #404]	; (d9414 <_tzset_unlocked_r+0x2f0>)
   d9280:	4628      	mov	r0, r5
   d9282:	f7fc fb93 	bl	d59ac <siscanf>
   d9286:	2800      	cmp	r0, #0
   d9288:	dc04      	bgt.n	d9294 <_tzset_unlocked_r+0x170>
   d928a:	6a23      	ldr	r3, [r4, #32]
   d928c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9290:	63e3      	str	r3, [r4, #60]	; 0x3c
   d9292:	e00e      	b.n	d92b2 <_tzset_unlocked_r+0x18e>
   d9294:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9298:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d929c:	213c      	movs	r1, #60	; 0x3c
   d929e:	fb01 3302 	mla	r3, r1, r2, r3
   d92a2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d92a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d92aa:	fb01 3302 	mla	r3, r1, r2, r3
   d92ae:	435f      	muls	r7, r3
   d92b0:	63e7      	str	r7, [r4, #60]	; 0x3c
   d92b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d92b4:	4627      	mov	r7, r4
   d92b6:	441d      	add	r5, r3
   d92b8:	f04f 0900 	mov.w	r9, #0
   d92bc:	782b      	ldrb	r3, [r5, #0]
   d92be:	2b2c      	cmp	r3, #44	; 0x2c
   d92c0:	bf08      	it	eq
   d92c2:	3501      	addeq	r5, #1
   d92c4:	f895 8000 	ldrb.w	r8, [r5]
   d92c8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d92cc:	d126      	bne.n	d931c <_tzset_unlocked_r+0x1f8>
   d92ce:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d92d2:	9302      	str	r3, [sp, #8]
   d92d4:	ab09      	add	r3, sp, #36	; 0x24
   d92d6:	9300      	str	r3, [sp, #0]
   d92d8:	9603      	str	r6, [sp, #12]
   d92da:	9601      	str	r6, [sp, #4]
   d92dc:	4633      	mov	r3, r6
   d92de:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d92e2:	494d      	ldr	r1, [pc, #308]	; (d9418 <_tzset_unlocked_r+0x2f4>)
   d92e4:	4628      	mov	r0, r5
   d92e6:	f7fc fb61 	bl	d59ac <siscanf>
   d92ea:	2803      	cmp	r0, #3
   d92ec:	d17e      	bne.n	d93ec <_tzset_unlocked_r+0x2c8>
   d92ee:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d92f2:	1e4b      	subs	r3, r1, #1
   d92f4:	2b0b      	cmp	r3, #11
   d92f6:	d879      	bhi.n	d93ec <_tzset_unlocked_r+0x2c8>
   d92f8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d92fc:	1e53      	subs	r3, r2, #1
   d92fe:	2b04      	cmp	r3, #4
   d9300:	d874      	bhi.n	d93ec <_tzset_unlocked_r+0x2c8>
   d9302:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9306:	2b06      	cmp	r3, #6
   d9308:	d870      	bhi.n	d93ec <_tzset_unlocked_r+0x2c8>
   d930a:	f887 8008 	strb.w	r8, [r7, #8]
   d930e:	60f9      	str	r1, [r7, #12]
   d9310:	613a      	str	r2, [r7, #16]
   d9312:	617b      	str	r3, [r7, #20]
   d9314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9316:	eb05 0803 	add.w	r8, r5, r3
   d931a:	e02a      	b.n	d9372 <_tzset_unlocked_r+0x24e>
   d931c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9320:	bf06      	itte	eq
   d9322:	3501      	addeq	r5, #1
   d9324:	4643      	moveq	r3, r8
   d9326:	2344      	movne	r3, #68	; 0x44
   d9328:	220a      	movs	r2, #10
   d932a:	a90b      	add	r1, sp, #44	; 0x2c
   d932c:	4628      	mov	r0, r5
   d932e:	9305      	str	r3, [sp, #20]
   d9330:	f7ff fe3e 	bl	d8fb0 <strtoul>
   d9334:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9338:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d933c:	4545      	cmp	r5, r8
   d933e:	9b05      	ldr	r3, [sp, #20]
   d9340:	d114      	bne.n	d936c <_tzset_unlocked_r+0x248>
   d9342:	234d      	movs	r3, #77	; 0x4d
   d9344:	f1b9 0f00 	cmp.w	r9, #0
   d9348:	d107      	bne.n	d935a <_tzset_unlocked_r+0x236>
   d934a:	7223      	strb	r3, [r4, #8]
   d934c:	2303      	movs	r3, #3
   d934e:	60e3      	str	r3, [r4, #12]
   d9350:	2302      	movs	r3, #2
   d9352:	6123      	str	r3, [r4, #16]
   d9354:	f8c4 9014 	str.w	r9, [r4, #20]
   d9358:	e00b      	b.n	d9372 <_tzset_unlocked_r+0x24e>
   d935a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d935e:	230b      	movs	r3, #11
   d9360:	62a3      	str	r3, [r4, #40]	; 0x28
   d9362:	2301      	movs	r3, #1
   d9364:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9366:	2300      	movs	r3, #0
   d9368:	6323      	str	r3, [r4, #48]	; 0x30
   d936a:	e002      	b.n	d9372 <_tzset_unlocked_r+0x24e>
   d936c:	b280      	uxth	r0, r0
   d936e:	723b      	strb	r3, [r7, #8]
   d9370:	6178      	str	r0, [r7, #20]
   d9372:	2302      	movs	r3, #2
   d9374:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9378:	2300      	movs	r3, #0
   d937a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d937e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9382:	930a      	str	r3, [sp, #40]	; 0x28
   d9384:	f898 3000 	ldrb.w	r3, [r8]
   d9388:	2b2f      	cmp	r3, #47	; 0x2f
   d938a:	d10b      	bne.n	d93a4 <_tzset_unlocked_r+0x280>
   d938c:	9603      	str	r6, [sp, #12]
   d938e:	f8cd a008 	str.w	sl, [sp, #8]
   d9392:	9601      	str	r6, [sp, #4]
   d9394:	f8cd b000 	str.w	fp, [sp]
   d9398:	4633      	mov	r3, r6
   d939a:	aa07      	add	r2, sp, #28
   d939c:	491f      	ldr	r1, [pc, #124]	; (d941c <_tzset_unlocked_r+0x2f8>)
   d939e:	4640      	mov	r0, r8
   d93a0:	f7fc fb04 	bl	d59ac <siscanf>
   d93a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d93a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d93ac:	213c      	movs	r1, #60	; 0x3c
   d93ae:	fb01 3302 	mla	r3, r1, r2, r3
   d93b2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d93b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d93ba:	fb01 3302 	mla	r3, r1, r2, r3
   d93be:	61bb      	str	r3, [r7, #24]
   d93c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d93c2:	f109 0901 	add.w	r9, r9, #1
   d93c6:	f1b9 0f02 	cmp.w	r9, #2
   d93ca:	4445      	add	r5, r8
   d93cc:	f107 071c 	add.w	r7, r7, #28
   d93d0:	f47f af74 	bne.w	d92bc <_tzset_unlocked_r+0x198>
   d93d4:	6860      	ldr	r0, [r4, #4]
   d93d6:	f7ff fdf5 	bl	d8fc4 <__tzcalc_limits>
   d93da:	4b08      	ldr	r3, [pc, #32]	; (d93fc <_tzset_unlocked_r+0x2d8>)
   d93dc:	6a22      	ldr	r2, [r4, #32]
   d93de:	601a      	str	r2, [r3, #0]
   d93e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d93e2:	1a9b      	subs	r3, r3, r2
   d93e4:	4a07      	ldr	r2, [pc, #28]	; (d9404 <_tzset_unlocked_r+0x2e0>)
   d93e6:	bf18      	it	ne
   d93e8:	2301      	movne	r3, #1
   d93ea:	6013      	str	r3, [r2, #0]
   d93ec:	b00d      	add	sp, #52	; 0x34
   d93ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93f2:	bf00      	nop
   d93f4:	000d9d2c 	.word	0x000d9d2c
   d93f8:	2003e7e0 	.word	0x2003e7e0
   d93fc:	2003e7e8 	.word	0x2003e7e8
   d9400:	000d9d2f 	.word	0x000d9d2f
   d9404:	2003e7e4 	.word	0x2003e7e4
   d9408:	2003dccc 	.word	0x2003dccc
   d940c:	2003e7d3 	.word	0x2003e7d3
   d9410:	000d9d33 	.word	0x000d9d33
   d9414:	000d9d56 	.word	0x000d9d56
   d9418:	000d9d42 	.word	0x000d9d42
   d941c:	000d9d55 	.word	0x000d9d55
   d9420:	2003e7c8 	.word	0x2003e7c8

000d9424 <_findenv_r>:
   d9424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9428:	4607      	mov	r7, r0
   d942a:	468b      	mov	fp, r1
   d942c:	4690      	mov	r8, r2
   d942e:	f000 f8d9 	bl	d95e4 <__env_lock>
   d9432:	4b19      	ldr	r3, [pc, #100]	; (d9498 <_findenv_r+0x74>)
   d9434:	681d      	ldr	r5, [r3, #0]
   d9436:	469a      	mov	sl, r3
   d9438:	b13d      	cbz	r5, d944a <_findenv_r+0x26>
   d943a:	465c      	mov	r4, fp
   d943c:	4623      	mov	r3, r4
   d943e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9442:	b142      	cbz	r2, d9456 <_findenv_r+0x32>
   d9444:	2a3d      	cmp	r2, #61	; 0x3d
   d9446:	461c      	mov	r4, r3
   d9448:	d1f8      	bne.n	d943c <_findenv_r+0x18>
   d944a:	4638      	mov	r0, r7
   d944c:	f000 f8cb 	bl	d95e6 <__env_unlock>
   d9450:	2000      	movs	r0, #0
   d9452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9456:	ebcb 0404 	rsb	r4, fp, r4
   d945a:	46a9      	mov	r9, r5
   d945c:	f859 0b04 	ldr.w	r0, [r9], #4
   d9460:	2800      	cmp	r0, #0
   d9462:	d0f2      	beq.n	d944a <_findenv_r+0x26>
   d9464:	4622      	mov	r2, r4
   d9466:	4659      	mov	r1, fp
   d9468:	f7ff fd0f 	bl	d8e8a <strncmp>
   d946c:	b988      	cbnz	r0, d9492 <_findenv_r+0x6e>
   d946e:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9472:	191e      	adds	r6, r3, r4
   d9474:	5d1b      	ldrb	r3, [r3, r4]
   d9476:	2b3d      	cmp	r3, #61	; 0x3d
   d9478:	d10b      	bne.n	d9492 <_findenv_r+0x6e>
   d947a:	f8da 3000 	ldr.w	r3, [sl]
   d947e:	1aed      	subs	r5, r5, r3
   d9480:	10ad      	asrs	r5, r5, #2
   d9482:	4638      	mov	r0, r7
   d9484:	f8c8 5000 	str.w	r5, [r8]
   d9488:	f000 f8ad 	bl	d95e6 <__env_unlock>
   d948c:	1c70      	adds	r0, r6, #1
   d948e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9492:	464d      	mov	r5, r9
   d9494:	e7e1      	b.n	d945a <_findenv_r+0x36>
   d9496:	bf00      	nop
   d9498:	2003dd14 	.word	0x2003dd14

000d949c <_getenv_r>:
   d949c:	b507      	push	{r0, r1, r2, lr}
   d949e:	aa01      	add	r2, sp, #4
   d94a0:	f7ff ffc0 	bl	d9424 <_findenv_r>
   d94a4:	b003      	add	sp, #12
   d94a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d94ac <__gettzinfo>:
   d94ac:	4800      	ldr	r0, [pc, #0]	; (d94b0 <__gettzinfo+0x4>)
   d94ae:	4770      	bx	lr
   d94b0:	2003dcd4 	.word	0x2003dcd4

000d94b4 <gmtime_r>:
   d94b4:	6802      	ldr	r2, [r0, #0]
   d94b6:	4b47      	ldr	r3, [pc, #284]	; (d95d4 <gmtime_r+0x120>)
   d94b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d94ba:	fb92 f4f3 	sdiv	r4, r2, r3
   d94be:	fb03 2214 	mls	r2, r3, r4, r2
   d94c2:	2a00      	cmp	r2, #0
   d94c4:	bfbc      	itt	lt
   d94c6:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d94ca:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d94ce:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d94d2:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d94d6:	fb92 f3f0 	sdiv	r3, r2, r0
   d94da:	fb00 2213 	mls	r2, r0, r3, r2
   d94de:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d94e2:	bfac      	ite	ge
   d94e4:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d94e8:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d94ec:	608b      	str	r3, [r1, #8]
   d94ee:	fb92 f3f0 	sdiv	r3, r2, r0
   d94f2:	fb00 2213 	mls	r2, r0, r3, r2
   d94f6:	604b      	str	r3, [r1, #4]
   d94f8:	600a      	str	r2, [r1, #0]
   d94fa:	2307      	movs	r3, #7
   d94fc:	1ce2      	adds	r2, r4, #3
   d94fe:	fb92 f3f3 	sdiv	r3, r2, r3
   d9502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9506:	1ad3      	subs	r3, r2, r3
   d9508:	618b      	str	r3, [r1, #24]
   d950a:	4b33      	ldr	r3, [pc, #204]	; (d95d8 <gmtime_r+0x124>)
   d950c:	4d33      	ldr	r5, [pc, #204]	; (d95dc <gmtime_r+0x128>)
   d950e:	fb94 f5f5 	sdiv	r5, r4, r5
   d9512:	fb03 4405 	mla	r4, r3, r5, r4
   d9516:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d951a:	fbb4 f2f2 	udiv	r2, r4, r2
   d951e:	4422      	add	r2, r4
   d9520:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9524:	fbb4 f3f7 	udiv	r3, r4, r7
   d9528:	1ad2      	subs	r2, r2, r3
   d952a:	482d      	ldr	r0, [pc, #180]	; (d95e0 <gmtime_r+0x12c>)
   d952c:	fbb4 f0f0 	udiv	r0, r4, r0
   d9530:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9534:	1a13      	subs	r3, r2, r0
   d9536:	fbb3 f6f6 	udiv	r6, r3, r6
   d953a:	4434      	add	r4, r6
   d953c:	f240 126d 	movw	r2, #365	; 0x16d
   d9540:	fbb3 f0f2 	udiv	r0, r3, r2
   d9544:	fbb3 f3f7 	udiv	r3, r3, r7
   d9548:	1ae3      	subs	r3, r4, r3
   d954a:	fb02 3310 	mls	r3, r2, r0, r3
   d954e:	2499      	movs	r4, #153	; 0x99
   d9550:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9554:	3202      	adds	r2, #2
   d9556:	fbb2 f2f4 	udiv	r2, r2, r4
   d955a:	2a0a      	cmp	r2, #10
   d955c:	fb04 f402 	mul.w	r4, r4, r2
   d9560:	f104 0602 	add.w	r6, r4, #2
   d9564:	f04f 0405 	mov.w	r4, #5
   d9568:	fbb6 f4f4 	udiv	r4, r6, r4
   d956c:	bf34      	ite	cc
   d956e:	2602      	movcc	r6, #2
   d9570:	f06f 0609 	mvncs.w	r6, #9
   d9574:	4416      	add	r6, r2
   d9576:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d957a:	fb02 0505 	mla	r5, r2, r5, r0
   d957e:	1c5f      	adds	r7, r3, #1
   d9580:	2e01      	cmp	r6, #1
   d9582:	bf98      	it	ls
   d9584:	3501      	addls	r5, #1
   d9586:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d958a:	eba7 0704 	sub.w	r7, r7, r4
   d958e:	d302      	bcc.n	d9596 <gmtime_r+0xe2>
   d9590:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9594:	e014      	b.n	d95c0 <gmtime_r+0x10c>
   d9596:	0782      	lsls	r2, r0, #30
   d9598:	d105      	bne.n	d95a6 <gmtime_r+0xf2>
   d959a:	2464      	movs	r4, #100	; 0x64
   d959c:	fbb0 f2f4 	udiv	r2, r0, r4
   d95a0:	fb04 0212 	mls	r2, r4, r2, r0
   d95a4:	b94a      	cbnz	r2, d95ba <gmtime_r+0x106>
   d95a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d95aa:	fbb0 f4f2 	udiv	r4, r0, r2
   d95ae:	fb02 0014 	mls	r0, r2, r4, r0
   d95b2:	fab0 f280 	clz	r2, r0
   d95b6:	0952      	lsrs	r2, r2, #5
   d95b8:	e000      	b.n	d95bc <gmtime_r+0x108>
   d95ba:	2201      	movs	r2, #1
   d95bc:	333b      	adds	r3, #59	; 0x3b
   d95be:	441a      	add	r2, r3
   d95c0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d95c4:	2300      	movs	r3, #0
   d95c6:	61ca      	str	r2, [r1, #28]
   d95c8:	614d      	str	r5, [r1, #20]
   d95ca:	610e      	str	r6, [r1, #16]
   d95cc:	60cf      	str	r7, [r1, #12]
   d95ce:	620b      	str	r3, [r1, #32]
   d95d0:	4608      	mov	r0, r1
   d95d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d95d4:	00015180 	.word	0x00015180
   d95d8:	fffdc54f 	.word	0xfffdc54f
   d95dc:	00023ab1 	.word	0x00023ab1
   d95e0:	00023ab0 	.word	0x00023ab0

000d95e4 <__env_lock>:
   d95e4:	4770      	bx	lr

000d95e6 <__env_unlock>:
   d95e6:	4770      	bx	lr

000d95e8 <dynalib_user>:
   d95e8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d95f8:	0000 0000                                   ....

000d95fc <_ZTV16JsonParserStaticILj512ELj50EE>:
	...
   d9604:	41a1 000d 41b5 000d 2820 2943 2000 4628     .A...A.. (C). (F
   d9614:	0029 6574 706d 6552 6963 7665 6465 2500     ).tempRecieved.%
   d9624:	3230 0069 666e 5063 6961 0072 6c62 6e79     02i.nfcPair.blyn
   d9634:	506b 7375 0068 6964 7073 616c 4d79 6e61     kPush.displayMan
   d9644:	6761 6d65 6e65 0074 7865 6574 6e72 6c61     agement.external
   d9654:	6554 706d 6900 746e 7265 616e 546c 6d65     Temp.internalTem
   d9664:	0070 6f68 6b6f 722d 7365 6f70 736e 2f65     p.hook-response/
   d9674:	6574 706d 6552 6461 6300 2f3a 7355 7265     tempRead.c:/User
   d9684:	2f73 654e 6472 6d6f 442f 7365 746b 706f     s/Nerdom/Desktop
   d9694:	642f 6f79 2f6c 7273 2f63 7964 6c6f 692e     /dyol/src/dyol.i
   d96a4:	6f6e 6100 7070 4100 7070 696c 6163 6974     no.app.Applicati
   d96b4:	6e6f 7320 6174 7472 6465 002e 6f54 6464     on started..Todd
   d96c4:	4d00 5043 3839 3830 6e20 746f 6620 756f     .MCP9808 not fou
   d96d4:	646e 4d00 5043 3839 3830 4f20 004b 6625     nd.MCP9808 OK.%f
   d96e4:	252c 0066 7562 7474 6e6f 6f5f 006e 3074     ,%f.button_on.t0
   d96f4:	742e 7478 223d 6554 7473 2221 ffff 00ff     .txt="Test!"....
   d9704:	3025 6933 4e00 5054 6320 6f6c 6b63 6920     %03i.NTP clock i
   d9714:	3a73 0020 7953 7473 6d65 6320 6f6c 6b63     s: .System clock
   d9724:	6920 3a73 0020 7953 7473 6d65 203a 7600           is: .System: .

000d9733 <_ZZ5setupE19__PRETTY_FUNCTION__>:
   d9733:	6f76 6469 7320 7465 7075 2928 0000               void setup().

000d9740 <_ZTV10JsonBuffer>:
	...
   d9748:	4b0d 000d 4b29 000d 6c25 0075 3025 7834     .K..)K..%lu.%04x
   d9758:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d9768:	6573 2500 2a2e 0066 2e25 6c2a 0066 6c25     se.%.*f.%.*lf.%l
   d9778:	0066 0000                                   f...

000d977c <_ZTV10JsonParser>:
	...
   d9784:	4b3d 000d 4b61 000d                         =K..aK..

000d978c <_ZTV23GoogleMapsDeviceLocator>:
	...
   d9794:	52b1 000d 52d1 000d 002c 7325 227b 226d     .R...R..,.%s{"m"
   d97a4:	223a 3025 7832 253a 3230 3a78 3025 7832     :"%02x:%02x:%02x
   d97b4:	253a 3230 3a78 3025 7832 253a 3230 2278     :%02x:%02x:%02x"
   d97c4:	222c 2273 253a 2c64 6322 3a22 6425 007d     ,"s":%d,"c":%d}.
   d97d4:	6564 6976 6563 6f4c 6163 6f74 0072 5441     deviceLocator.AT
   d97e4:	5426 7b00 7722 3a22 227b 2261 003a 7570     &T.{"w":{"a":.pu
   d97f4:	6c62 7369 4c68 636f 7461 6f69 006e 6373     blishLocation.sc
   d9804:	6e61 6144 6174 253d 0073 6f68 6b6f 722d     anData=%s.hook-r
   d9814:	7365 6f70 736e 2f65 7325 252f 0073 0000     esponse/%s/%s...

000d9824 <_ZTVN5spark13EthernetClassE>:
	...
   d982c:	5a5b 000d 5a51 000d 5a47 000d 5a3d 000d     [Z..QZ..GZ..=Z..
   d983c:	5a31 000d 5a25 000d 5a19 000d 5a11 000d     1Z..%Z...Z...Z..
   d984c:	5a07 000d 59fd 000d 7c75 000d               .Z...Y..u|..

000d9858 <_ZTV8SPIClass>:
	...
   d9860:	5a79 000d 5a7b 000d                         yZ..{Z..

000d9868 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9870:	5d99 000d 5d9f 000d 6133 000d 5dad 000d     .]...]..3a...]..
   d9880:	5d9b 000d 616e 006e 766f 0066 6e69 0066     .]..nan.ovf.inf.
   d9890:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d98a0:	006c 0a0d 2500 3130 7530 0020 205d 2c00     l....%010u .] .,
   d98b0:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   d98c0:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   d98d0:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d98e0:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d98f0:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d9900:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d9910:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d9920:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d9930:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d9940:	7265 6e00 6e6f 0065 7274 6361 0065 6e69     er.none.trace.in
   d9950:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d9960:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
   d9970:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d9980:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d9990 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9998:	6bd5 000d 6bdb 000d 6bf3 000d 6be9 000d     .k...k...k...k..
   d99a8:	6bd7 000d                                   .k..

000d99ac <_ZTV9IPAddress>:
	...
   d99b4:	70f9 000d 70e9 000d 70eb 000d               .p...p...p..

000d99c0 <_ZTV9USBSerial>:
	...
   d99c8:	71fd 000d 724d 000d 725b 000d 6629 000d     .q..Mr..[r..)f..
   d99d8:	7239 000d 71ff 000d 7215 000d 7247 000d     9r...q...r..Gr..
   d99e8:	722b 000d 71f9 000d                         +r...q..

000d99f0 <_ZTV11USARTSerial>:
	...
   d99f8:	7309 000d 7359 000d 7367 000d 6629 000d     .s..Ys..gs..)f..
   d9a08:	731d 000d 733f 000d 732b 000d 7353 000d     .s..?s..+s..Ss..
   d9a18:	730b 000d 730f 000d                         .s...s..

000d9a20 <_ZTV7TwoWire>:
	...
   d9a28:	7441 000d 748b 000d 7463 000d 7443 000d     At...t..ct..Ct..
   d9a38:	746b 000d 7473 000d 747b 000d 7483 000d     kt..st..{t...t..

000d9a48 <_ZTVN5spark9MeshClassE>:
	...
   d9a50:	7567 000d 755d 000d 7553 000d 7549 000d     gu..]u..Su..Iu..
   d9a60:	753d 000d 7531 000d 7525 000d 751d 000d     =u..1u..%u...u..
   d9a70:	7513 000d 7509 000d 7c75 000d               .u...u..u|..

000d9a7c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9a84:	7689 000d 768f 000d 7b77 000d 769d 000d     .v...v..w{...v..
   d9a94:	768b 000d                                   .v..

000d9a98 <_ZTV9TCPClient>:
	...
   d9aa0:	6a85 000d 6aa5 000d 7601 000d 761b 000d     .j...j...v...v..
   d9ab0:	7a1d 000d 785f 000d 7831 000d 7645 000d     .z.._x..1x..Ev..
   d9ac0:	78f5 000d 76a1 000d 7893 000d 79ef 000d     .x...v...x...y..
   d9ad0:	7647 000d 767f 000d 762d 000d 7791 000d     Gv...v..-v...w..
   d9ae0:	7811 000d 6977 6972 676e 7200 6365 2076     .x..wiring.recv 
   d9af0:	7265 6f72 2072 203d 6425 0000               error = %d..

000d9afc <_ZTVN5spark9WiFiClassE>:
	...
   d9b04:	7bed 000d 7be3 000d 7bd9 000d 7b8f 000d     .{...{...{...{..
   d9b14:	7bcd 000d 7bc1 000d 7bb5 000d 7bad 000d     .{...{...{...{..
   d9b24:	7ba3 000d 7b99 000d 7c75 000d               .{...{..u|..

000d9b30 <_ZTVN5spark12NetworkClassE>:
	...
   d9b38:	7c0d 000d 7c17 000d 7c21 000d 7c2b 000d     .|...|..!|..+|..
   d9b48:	7c35 000d 7c41 000d 7c4d 000d 7c59 000d     5|..A|..M|..Y|..
   d9b58:	7c61 000d 7c6b 000d 7c75 000d               a|..k|..u|..

000d9b64 <_ZSt7nothrow>:
	...

000d9b65 <_ctype_>:
   d9b65:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d9b75:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9b85:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d9b95:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d9ba5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d9bb5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d9bc5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d9bd5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d9be5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d9c68 <__sf_fake_stdin>:
	...

000d9c88 <__sf_fake_stdout>:
	...

000d9ca8 <__sf_fake_stderr>:
	...
   d9cc8:	0043 0000                                   C...

000d9ccc <__month_lengths>:
   d9ccc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9cdc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9cec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9cfc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9d0c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9d1c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9d2c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d9d3c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d9d4c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d9d5c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d9d68 <link_const_variable_data_end>:
   d9d68:	000d482d 	.word	0x000d482d
   d9d6c:	000d4ac7 	.word	0x000d4ac7
   d9d70:	000d4b07 	.word	0x000d4b07
   d9d74:	000d529d 	.word	0x000d529d
   d9d78:	000d52a1 	.word	0x000d52a1
   d9d7c:	000d52a5 	.word	0x000d52a5
   d9d80:	000d52a9 	.word	0x000d52a9
   d9d84:	000d52ad 	.word	0x000d52ad
   d9d88:	000d5331 	.word	0x000d5331
   d9d8c:	000d5341 	.word	0x000d5341
   d9d90:	000d5345 	.word	0x000d5345
   d9d94:	000d5349 	.word	0x000d5349
   d9d98:	000d534d 	.word	0x000d534d
   d9d9c:	000d5351 	.word	0x000d5351
   d9da0:	000d5355 	.word	0x000d5355
   d9da4:	000d5359 	.word	0x000d5359
   d9da8:	000d535d 	.word	0x000d535d
   d9dac:	000d5361 	.word	0x000d5361
   d9db0:	000d5365 	.word	0x000d5365
   d9db4:	000d5369 	.word	0x000d5369
   d9db8:	000d536d 	.word	0x000d536d
   d9dbc:	000d5371 	.word	0x000d5371
   d9dc0:	000d5375 	.word	0x000d5375
   d9dc4:	000d5379 	.word	0x000d5379
   d9dc8:	000d537d 	.word	0x000d537d
   d9dcc:	000d5381 	.word	0x000d5381
   d9dd0:	000d5385 	.word	0x000d5385
   d9dd4:	000d5389 	.word	0x000d5389
   d9dd8:	000d538d 	.word	0x000d538d
   d9ddc:	000d5391 	.word	0x000d5391
   d9de0:	000d5a65 	.word	0x000d5a65
   d9de4:	000d5ab9 	.word	0x000d5ab9
   d9de8:	000d6619 	.word	0x000d6619
   d9dec:	000d6939 	.word	0x000d6939
   d9df0:	000d6a49 	.word	0x000d6a49
   d9df4:	000d6ae5 	.word	0x000d6ae5
   d9df8:	000d75b5 	.word	0x000d75b5
   d9dfc:	000d7bf9 	.word	0x000d7bf9
   d9e00:	000d7d41 	.word	0x000d7d41
   d9e04:	000d7df1 	.word	0x000d7df1
   d9e08:	000d7eb9 	.word	0x000d7eb9
   d9e0c:	000d7f3d 	.word	0x000d7f3d
   d9e10:	000d8001 	.word	0x000d8001
   d9e14:	000d80c5 	.word	0x000d80c5

000d9e18 <link_constructors_end>:
	...
